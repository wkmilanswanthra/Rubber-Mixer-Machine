
GccApplicationxx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  00001632  000016c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000089  0080010e  0080010e  00001774  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001777  00000000  00000000  000018c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a51  00000000  00000000  0000303f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ffd  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  00004a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005aa  00000000  00000000  00004dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000189f  00000000  00000000  00005366  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00006c05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 07 	call	0xed6	; 0xed6 <main>
      8a:	0c 94 17 0b 	jmp	0x162e	; 0x162e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <getdata>:
{
	uint32 m=1,index=0;
	for(index=1;index<=x;index++)
	m*=10;
	return m;
}
      92:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <keypad_scan>
      96:	8d 33       	cpi	r24, 0x3D	; 61
      98:	e1 f0       	breq	.+56     	; 0xd2 <getdata+0x40>
      9a:	88 23       	and	r24, r24
      9c:	b1 f0       	breq	.+44     	; 0xca <getdata+0x38>
      9e:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DigitsCounter>
      a2:	f0 e0       	ldi	r31, 0x00	; 0
      a4:	e4 58       	subi	r30, 0x84	; 132
      a6:	fe 4f       	sbci	r31, 0xFE	; 254
      a8:	80 83       	st	Z, r24
      aa:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <lcd_write_character>
      ae:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DigitsCounter>
      b2:	8f 5f       	subi	r24, 0xFF	; 255
      b4:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <DigitsCounter>
      b8:	2f e5       	ldi	r18, 0x5F	; 95
      ba:	8a ee       	ldi	r24, 0xEA	; 234
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	21 50       	subi	r18, 0x01	; 1
      c0:	80 40       	sbci	r24, 0x00	; 0
      c2:	90 40       	sbci	r25, 0x00	; 0
      c4:	e1 f7       	brne	.-8      	; 0xbe <getdata+0x2c>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <getdata+0x36>
      c8:	00 00       	nop
      ca:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <keypad_scan>
      ce:	8d 33       	cpi	r24, 0x3D	; 61
      d0:	21 f7       	brne	.-56     	; 0x9a <getdata+0x8>
      d2:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <DigitsCounter>
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	e4 58       	subi	r30, 0x84	; 132
      da:	fe 4f       	sbci	r31, 0xFE	; 254
      dc:	8d e3       	ldi	r24, 0x3D	; 61
      de:	80 83       	st	Z, r24
      e0:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <lcd_write_character>
      e4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DigitsCounter>
      e8:	8f 5f       	subi	r24, 0xFF	; 255
      ea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <DigitsCounter>
      ee:	82 e0       	ldi	r24, 0x02	; 2
      f0:	08 95       	ret

000000f2 <ConvertToInt>:
uint64 ConvertToInt(sint8 * ptr,uint8 len)
{
      f2:	2f 92       	push	r2
      f4:	3f 92       	push	r3
      f6:	4f 92       	push	r4
      f8:	5f 92       	push	r5
      fa:	6f 92       	push	r6
      fc:	7f 92       	push	r7
      fe:	8f 92       	push	r8
     100:	9f 92       	push	r9
     102:	af 92       	push	r10
     104:	bf 92       	push	r11
     106:	cf 92       	push	r12
     108:	df 92       	push	r13
     10a:	ef 92       	push	r14
     10c:	ff 92       	push	r15
     10e:	0f 93       	push	r16
     110:	1f 93       	push	r17
     112:	cf 93       	push	r28
     114:	df 93       	push	r29
     116:	cd b7       	in	r28, 0x3d	; 61
     118:	de b7       	in	r29, 0x3e	; 62
     11a:	28 97       	sbiw	r28, 0x08	; 8
     11c:	0f b6       	in	r0, 0x3f	; 63
     11e:	f8 94       	cli
     120:	de bf       	out	0x3e, r29	; 62
     122:	0f be       	out	0x3f, r0	; 63
     124:	cd bf       	out	0x3d, r28	; 61
     126:	6d 83       	std	Y+5, r22	; 0x05
	uint8 index;
	sint64 value=0;
		
	for(index=0;index<len;index++)
     128:	61 11       	cpse	r22, r1
     12a:	8a c0       	rjmp	.+276    	; 0x240 <ConvertToInt+0x14e>
	return m;
}
uint64 ConvertToInt(sint8 * ptr,uint8 len)
{
	uint8 index;
	sint64 value=0;
     12c:	19 82       	std	Y+1, r1	; 0x01
     12e:	1a 82       	std	Y+2, r1	; 0x02
     130:	c1 2c       	mov	r12, r1
     132:	d1 2c       	mov	r13, r1
     134:	e1 2c       	mov	r14, r1
     136:	f1 2c       	mov	r15, r1
     138:	00 e0       	ldi	r16, 0x00	; 0
     13a:	10 e0       	ldi	r17, 0x00	; 0
     13c:	68 c0       	rjmp	.+208    	; 0x20e <ConvertToInt+0x11c>
		
	for(index=0;index<len;index++)
	{
		value+=(ptr[len-index-1]-48)*powerten(index);	
     13e:	82 90       	ld	r8, -Z
     140:	08 2c       	mov	r0, r8
     142:	00 0c       	add	r0, r0
     144:	99 08       	sbc	r9, r9
     146:	20 e3       	ldi	r18, 0x30	; 48
     148:	82 1a       	sub	r8, r18
     14a:	91 08       	sbc	r9, r1
     14c:	09 2c       	mov	r0, r9
     14e:	00 0c       	add	r0, r0
     150:	aa 08       	sbc	r10, r10
     152:	bb 08       	sbc	r11, r11
}

uint32 powerten(uint8 x)
{
	uint32 m=1,index=0;
	for(index=1;index<=x;index++)
     154:	41 14       	cp	r4, r1
     156:	51 04       	cpc	r5, r1
     158:	61 04       	cpc	r6, r1
     15a:	71 04       	cpc	r7, r1
     15c:	49 f1       	breq	.+82     	; 0x1b0 <ConvertToInt+0xbe>
     15e:	c1 2c       	mov	r12, r1
     160:	d1 2c       	mov	r13, r1
     162:	76 01       	movw	r14, r12
     164:	c3 94       	inc	r12
     166:	21 e0       	ldi	r18, 0x01	; 1
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	42 2d       	mov	r20, r2
     16c:	53 2d       	mov	r21, r3
	m*=10;
     16e:	ba 01       	movw	r22, r20
     170:	a9 01       	movw	r20, r18
     172:	44 0f       	add	r20, r20
     174:	55 1f       	adc	r21, r21
     176:	66 1f       	adc	r22, r22
     178:	77 1f       	adc	r23, r23
     17a:	db 01       	movw	r26, r22
     17c:	ca 01       	movw	r24, r20
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	aa 1f       	adc	r26, r26
     184:	bb 1f       	adc	r27, r27
     186:	88 0f       	add	r24, r24
     188:	99 1f       	adc	r25, r25
     18a:	aa 1f       	adc	r26, r26
     18c:	bb 1f       	adc	r27, r27
     18e:	9a 01       	movw	r18, r20
     190:	ab 01       	movw	r20, r22
     192:	28 0f       	add	r18, r24
     194:	39 1f       	adc	r19, r25
     196:	4a 1f       	adc	r20, r26
     198:	5b 1f       	adc	r21, r27
}

uint32 powerten(uint8 x)
{
	uint32 m=1,index=0;
	for(index=1;index<=x;index++)
     19a:	8f ef       	ldi	r24, 0xFF	; 255
     19c:	c8 1a       	sub	r12, r24
     19e:	d8 0a       	sbc	r13, r24
     1a0:	e8 0a       	sbc	r14, r24
     1a2:	f8 0a       	sbc	r15, r24
     1a4:	4c 14       	cp	r4, r12
     1a6:	5d 04       	cpc	r5, r13
     1a8:	6e 04       	cpc	r6, r14
     1aa:	7f 04       	cpc	r7, r15
     1ac:	00 f7       	brcc	.-64     	; 0x16e <ConvertToInt+0x7c>
     1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <ConvertToInt+0xc6>
	return AnalyzePoint;
}

uint32 powerten(uint8 x)
{
	uint32 m=1,index=0;
     1b0:	21 e0       	ldi	r18, 0x01	; 1
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	42 2d       	mov	r20, r2
     1b6:	53 2d       	mov	r21, r3
     1b8:	8f ef       	ldi	r24, 0xFF	; 255
     1ba:	48 1a       	sub	r4, r24
     1bc:	58 0a       	sbc	r5, r24
     1be:	68 0a       	sbc	r6, r24
     1c0:	78 0a       	sbc	r7, r24
	uint8 index;
	sint64 value=0;
		
	for(index=0;index<len;index++)
	{
		value+=(ptr[len-index-1]-48)*powerten(index);	
     1c2:	c5 01       	movw	r24, r10
     1c4:	b4 01       	movw	r22, r8
     1c6:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulsi3>
     1ca:	4b 01       	movw	r8, r22
     1cc:	5c 01       	movw	r10, r24
     1ce:	26 2f       	mov	r18, r22
     1d0:	39 2d       	mov	r19, r9
     1d2:	4a 2d       	mov	r20, r10
     1d4:	5b 2d       	mov	r21, r11
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	70 e0       	ldi	r23, 0x00	; 0
     1da:	80 e0       	ldi	r24, 0x00	; 0
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	a9 80       	ldd	r10, Y+1	; 0x01
     1e0:	ba 80       	ldd	r11, Y+2	; 0x02
     1e2:	c8 84       	ldd	r12, Y+8	; 0x08
     1e4:	de 80       	ldd	r13, Y+6	; 0x06
     1e6:	eb 80       	ldd	r14, Y+3	; 0x03
     1e8:	fc 80       	ldd	r15, Y+4	; 0x04
     1ea:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__adddi3>
     1ee:	29 83       	std	Y+1, r18	; 0x01
     1f0:	3a 83       	std	Y+2, r19	; 0x02
     1f2:	48 87       	std	Y+8, r20	; 0x08
     1f4:	5e 83       	std	Y+6, r21	; 0x06
     1f6:	6b 83       	std	Y+3, r22	; 0x03
     1f8:	7c 83       	std	Y+4, r23	; 0x04
     1fa:	08 2f       	mov	r16, r24
     1fc:	19 2f       	mov	r17, r25
uint64 ConvertToInt(sint8 * ptr,uint8 len)
{
	uint8 index;
	sint64 value=0;
		
	for(index=0;index<len;index++)
     1fe:	2d 81       	ldd	r18, Y+5	; 0x05
     200:	42 16       	cp	r4, r18
     202:	08 f4       	brcc	.+2      	; 0x206 <ConvertToInt+0x114>
     204:	9c cf       	rjmp	.-200    	; 0x13e <ConvertToInt+0x4c>
     206:	c4 2e       	mov	r12, r20
     208:	d5 2e       	mov	r13, r21
     20a:	e6 2e       	mov	r14, r22
     20c:	f7 2e       	mov	r15, r23
	{
		value+=(ptr[len-index-1]-48)*powerten(index);	
	}
	
	if(SignNumberFlagToConvertInt64)
     20e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SignNumberFlagToConvertInt64>
     212:	88 23       	and	r24, r24
     214:	f1 f1       	breq	.+124    	; 0x292 <ConvertToInt+0x1a0>
	{
		
		value= -value; 
     216:	29 81       	ldd	r18, Y+1	; 0x01
     218:	3a 81       	ldd	r19, Y+2	; 0x02
     21a:	4c 2d       	mov	r20, r12
     21c:	5d 2d       	mov	r21, r13
     21e:	6e 2d       	mov	r22, r14
     220:	7f 2d       	mov	r23, r15
     222:	80 2f       	mov	r24, r16
     224:	91 2f       	mov	r25, r17
     226:	0e 94 93 0a 	call	0x1526	; 0x1526 <__negdi2>
     22a:	29 83       	std	Y+1, r18	; 0x01
     22c:	3a 83       	std	Y+2, r19	; 0x02
     22e:	c4 2e       	mov	r12, r20
     230:	d5 2e       	mov	r13, r21
     232:	e6 2e       	mov	r14, r22
     234:	f7 2e       	mov	r15, r23
     236:	08 2f       	mov	r16, r24
     238:	19 2f       	mov	r17, r25
		SignNumberFlagToConvertInt64=false;
     23a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <SignNumberFlagToConvertInt64>
	}
	 
	return value;
     23e:	29 c0       	rjmp	.+82     	; 0x292 <ConvertToInt+0x1a0>
	uint8 index;
	sint64 value=0;
		
	for(index=0;index<len;index++)
	{
		value+=(ptr[len-index-1]-48)*powerten(index);	
     240:	fd 81       	ldd	r31, Y+5	; 0x05
     242:	ef 2f       	mov	r30, r31
     244:	f0 e0       	ldi	r31, 0x00	; 0
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	e8 0f       	add	r30, r24
     24a:	f9 1f       	adc	r31, r25
     24c:	ff 83       	std	Y+7, r31	; 0x07
     24e:	ee 83       	std	Y+6, r30	; 0x06
     250:	60 81       	ld	r22, Z
     252:	06 2e       	mov	r0, r22
     254:	00 0c       	add	r0, r0
     256:	77 0b       	sbc	r23, r23
     258:	60 53       	subi	r22, 0x30	; 48
     25a:	71 09       	sbc	r23, r1
     25c:	4b 01       	movw	r8, r22
     25e:	77 0f       	add	r23, r23
     260:	aa 08       	sbc	r10, r10
     262:	bb 08       	sbc	r11, r11
     264:	41 2c       	mov	r4, r1
     266:	51 2c       	mov	r5, r1
     268:	32 01       	movw	r6, r4
     26a:	43 94       	inc	r4
     26c:	19 82       	std	Y+1, r1	; 0x01
     26e:	1a 82       	std	Y+2, r1	; 0x02
     270:	c1 2c       	mov	r12, r1
     272:	d1 2c       	mov	r13, r1
     274:	e1 2c       	mov	r14, r1
     276:	f1 2c       	mov	r15, r1
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	10 e0       	ldi	r17, 0x00	; 0
	return AnalyzePoint;
}

uint32 powerten(uint8 x)
{
	uint32 m=1,index=0;
     27c:	21 e0       	ldi	r18, 0x01	; 1
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	40 e0       	ldi	r20, 0x00	; 0
     282:	50 e0       	ldi	r21, 0x00	; 0
     284:	21 2c       	mov	r2, r1
     286:	31 2c       	mov	r3, r1
     288:	c8 86       	std	Y+8, r12	; 0x08
     28a:	de 82       	std	Y+6, r13	; 0x06
     28c:	eb 82       	std	Y+3, r14	; 0x03
     28e:	fc 82       	std	Y+4, r15	; 0x04
     290:	98 cf       	rjmp	.-208    	; 0x1c2 <ConvertToInt+0xd0>
		value= -value; 
		SignNumberFlagToConvertInt64=false;
	}
	 
	return value;
}
     292:	29 81       	ldd	r18, Y+1	; 0x01
     294:	3a 81       	ldd	r19, Y+2	; 0x02
     296:	4c 2d       	mov	r20, r12
     298:	5d 2d       	mov	r21, r13
     29a:	6e 2d       	mov	r22, r14
     29c:	7f 2d       	mov	r23, r15
     29e:	80 2f       	mov	r24, r16
     2a0:	91 2f       	mov	r25, r17
     2a2:	28 96       	adiw	r28, 0x08	; 8
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	f8 94       	cli
     2a8:	de bf       	out	0x3e, r29	; 62
     2aa:	0f be       	out	0x3f, r0	; 63
     2ac:	cd bf       	out	0x3d, r28	; 61
     2ae:	df 91       	pop	r29
     2b0:	cf 91       	pop	r28
     2b2:	1f 91       	pop	r17
     2b4:	0f 91       	pop	r16
     2b6:	ff 90       	pop	r15
     2b8:	ef 90       	pop	r14
     2ba:	df 90       	pop	r13
     2bc:	cf 90       	pop	r12
     2be:	bf 90       	pop	r11
     2c0:	af 90       	pop	r10
     2c2:	9f 90       	pop	r9
     2c4:	8f 90       	pop	r8
     2c6:	7f 90       	pop	r7
     2c8:	6f 90       	pop	r6
     2ca:	5f 90       	pop	r5
     2cc:	4f 90       	pop	r4
     2ce:	3f 90       	pop	r3
     2d0:	2f 90       	pop	r2
     2d2:	08 95       	ret

000002d4 <analyze>:

uint8 analyze()
{	
     2d4:	bf 92       	push	r11
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	60 97       	sbiw	r28, 0x10	; 16
     2ec:	0f b6       	in	r0, 0x3f	; 63
     2ee:	f8 94       	cli
     2f0:	de bf       	out	0x3e, r29	; 62
     2f2:	0f be       	out	0x3f, r0	; 63
     2f4:	cd bf       	out	0x3d, r28	; 61
	sint8 TempArr[MaxNumberOfDigits]={0};
     2f6:	fe 01       	movw	r30, r28
     2f8:	31 96       	adiw	r30, 0x01	; 1
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	df 01       	movw	r26, r30
     2fe:	1d 92       	st	X+, r1
     300:	8a 95       	dec	r24
     302:	e9 f7       	brne	.-6      	; 0x2fe <analyze+0x2a>
	uint8 TempIndex=0;
	uint8 index=0;
	
	if (IsOperation(Digits[0]) && Digits[0]!= '-') //input is *5
     304:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <Digits>
     308:	96 ed       	ldi	r25, 0xD6	; 214
     30a:	98 0f       	add	r25, r24
     30c:	92 30       	cpi	r25, 0x02	; 2
     30e:	30 f0       	brcs	.+12     	; 0x31c <analyze+0x48>
     310:	8d 32       	cpi	r24, 0x2D	; 45
     312:	b9 f0       	breq	.+46     	; 0x342 <analyze+0x6e>
     314:	85 32       	cpi	r24, 0x25	; 37
     316:	21 f0       	breq	.+8      	; 0x320 <analyze+0x4c>

uint8 analyze()
{	
	sint8 TempArr[MaxNumberOfDigits]={0};
	uint8 TempIndex=0;
	uint8 index=0;
     318:	10 e0       	ldi	r17, 0x00	; 0
     31a:	24 c0       	rjmp	.+72     	; 0x364 <analyze+0x90>
	
	if (IsOperation(Digits[0]) && Digits[0]!= '-') //input is *5
     31c:	8d 32       	cpi	r24, 0x2D	; 45
     31e:	89 f0       	breq	.+34     	; 0x342 <analyze+0x6e>
	{	
		lcd_clearDisplay();
     320:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
		lcd_write_string("MATH ERROR");
     324:	80 e6       	ldi	r24, 0x60	; 96
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     32c:	bf e3       	ldi	r27, 0x3F	; 63
     32e:	2d e0       	ldi	r18, 0x0D	; 13
     330:	83 e0       	ldi	r24, 0x03	; 3
     332:	b1 50       	subi	r27, 0x01	; 1
     334:	20 40       	sbci	r18, 0x00	; 0
     336:	80 40       	sbci	r24, 0x00	; 0
     338:	e1 f7       	brne	.-8      	; 0x332 <analyze+0x5e>
     33a:	00 c0       	rjmp	.+0      	; 0x33c <analyze+0x68>
     33c:	00 00       	nop
		_delay_ms(1000);
		return Reset;
     33e:	b1 2c       	mov	r11, r1
     340:	a2 c0       	rjmp	.+324    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
	}
	
	
	if(Digits[0]== '-' && IsOperation(Digits[1])) //check if first number is signed
     342:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <Digits+0x1>
     346:	96 ed       	ldi	r25, 0xD6	; 214
     348:	98 0f       	add	r25, r24
     34a:	92 30       	cpi	r25, 0x02	; 2
     34c:	18 f0       	brcs	.+6      	; 0x354 <analyze+0x80>
     34e:	87 7f       	andi	r24, 0xF7	; 247
     350:	85 32       	cpi	r24, 0x25	; 37
     352:	39 f4       	brne	.+14     	; 0x362 <analyze+0x8e>
	{
		FirstNumberSign =true; /*To register the number in TempArr without conflict with the second condition*/
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <FirstNumberSign>
		SignNumberFlagToConvertInt64=true; /*To make a note that the number which ConvertInt64 will convert is negative*/
     35a:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SignNumberFlagToConvertInt64>
		index++; /*TempArr[0]= Digits[1]*/
     35e:	11 e0       	ldi	r17, 0x01	; 1
     360:	01 c0       	rjmp	.+2      	; 0x364 <analyze+0x90>

uint8 analyze()
{	
	sint8 TempArr[MaxNumberOfDigits]={0};
	uint8 TempIndex=0;
	uint8 index=0;
     362:	10 e0       	ldi	r17, 0x00	; 0
		SignNumberFlagToConvertInt64=true; /*To make a note that the number which ConvertInt64 will convert is negative*/
		index++; /*TempArr[0]= Digits[1]*/
		
	}
	
	while(DigitsCounter != 0) //incremented in getdata
     364:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DigitsCounter>
     368:	88 23       	and	r24, r24
     36a:	09 f4       	brne	.+2      	; 0x36e <analyze+0x9a>
     36c:	82 c0       	rjmp	.+260    	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     36e:	60 e0       	ldi	r22, 0x00	; 0
				Operands[OperandsCounter]=ConvertToInt(TempArr,TempIndex);
				OperandsCounter++;
				TempIndex=0;
					if(Digits[index+1] == '-' && index >0) /*If the 2nd operand is signed */
					{
						OtherNumberSign=true;
     370:	01 e0       	ldi	r16, 0x01	; 1
	
	while(DigitsCounter != 0) //incremented in getdata
		{
			/*search for operation one it find it convert whats before it to a single integer and start search for second number*/
			
			if(((Digits[index]>='0') && (Digits[index]<='9')) || FirstNumberSign||OtherNumberSign) 
     372:	e1 2e       	mov	r14, r17
     374:	f1 2c       	mov	r15, r1
     376:	f7 01       	movw	r30, r14
     378:	e4 58       	subi	r30, 0x84	; 132
     37a:	fe 4f       	sbci	r31, 0xFE	; 254
     37c:	80 81       	ld	r24, Z
     37e:	90 ed       	ldi	r25, 0xD0	; 208
     380:	98 0f       	add	r25, r24
     382:	9a 30       	cpi	r25, 0x0A	; 10
     384:	40 f0       	brcs	.+16     	; 0x396 <analyze+0xc2>
     386:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <FirstNumberSign>
     38a:	91 11       	cpse	r25, r1
     38c:	04 c0       	rjmp	.+8      	; 0x396 <analyze+0xc2>
     38e:	b0 90 0e 01 	lds	r11, 0x010E	; 0x80010e <__data_end>
     392:	bb 20       	and	r11, r11
     394:	69 f0       	breq	.+26     	; 0x3b0 <analyze+0xdc>
			{
				TempArr[TempIndex]=Digits[index];
     396:	e1 e0       	ldi	r30, 0x01	; 1
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	ec 0f       	add	r30, r28
     39c:	fd 1f       	adc	r31, r29
     39e:	e6 0f       	add	r30, r22
     3a0:	f1 1d       	adc	r31, r1
     3a2:	80 83       	st	Z, r24
				TempIndex++;
     3a4:	6f 5f       	subi	r22, 0xFF	; 255
				FirstNumberSign =false;
     3a6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <FirstNumberSign>
				OtherNumberSign =false;
     3aa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
     3ae:	54 c0       	rjmp	.+168    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
			}
							
			else if (((IsOperation(Digits[index]))||(Digits[index]== '=')))
     3b0:	96 ed       	ldi	r25, 0xD6	; 214
     3b2:	98 0f       	add	r25, r24
     3b4:	92 30       	cpi	r25, 0x02	; 2
     3b6:	38 f0       	brcs	.+14     	; 0x3c6 <analyze+0xf2>
     3b8:	98 2f       	mov	r25, r24
     3ba:	97 7f       	andi	r25, 0xF7	; 247
     3bc:	95 32       	cpi	r25, 0x25	; 37
     3be:	19 f0       	breq	.+6      	; 0x3c6 <analyze+0xf2>
     3c0:	8d 33       	cpi	r24, 0x3D	; 61
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <analyze+0xf2>
     3c4:	49 c0       	rjmp	.+146    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
			{
				Operations[OperationsCounter]=Digits[index];
     3c6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <OperationsCounter>
     3ca:	e9 2f       	mov	r30, r25
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	e4 57       	subi	r30, 0x74	; 116
     3d0:	fe 4f       	sbci	r31, 0xFE	; 254
     3d2:	80 83       	st	Z, r24
				OperationsCounter++;
     3d4:	9f 5f       	subi	r25, 0xFF	; 255
     3d6:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <OperationsCounter>
				Operands[OperandsCounter]=ConvertToInt(TempArr,TempIndex);
     3da:	c0 90 13 01 	lds	r12, 0x0113	; 0x800113 <OperandsCounter>
     3de:	d1 2c       	mov	r13, r1
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	0e 94 79 00 	call	0xf2	; 0xf2 <ConvertToInt>
     3e8:	f6 01       	movw	r30, r12
     3ea:	ee 0f       	add	r30, r30
     3ec:	ff 1f       	adc	r31, r31
     3ee:	ee 0f       	add	r30, r30
     3f0:	ff 1f       	adc	r31, r31
     3f2:	ee 0f       	add	r30, r30
     3f4:	ff 1f       	adc	r31, r31
     3f6:	e4 5e       	subi	r30, 0xE4	; 228
     3f8:	fe 4f       	sbci	r31, 0xFE	; 254
     3fa:	20 83       	st	Z, r18
     3fc:	31 83       	std	Z+1, r19	; 0x01
     3fe:	42 83       	std	Z+2, r20	; 0x02
     400:	53 83       	std	Z+3, r21	; 0x03
     402:	64 83       	std	Z+4, r22	; 0x04
     404:	75 83       	std	Z+5, r23	; 0x05
     406:	86 83       	std	Z+6, r24	; 0x06
     408:	97 83       	std	Z+7, r25	; 0x07
				OperandsCounter++;
     40a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <OperandsCounter>
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <OperandsCounter>
				TempIndex=0;
					if(Digits[index+1] == '-' && index >0) /*If the 2nd operand is signed */
     414:	f7 01       	movw	r30, r14
     416:	e4 58       	subi	r30, 0x84	; 132
     418:	fe 4f       	sbci	r31, 0xFE	; 254
     41a:	81 81       	ldd	r24, Z+1	; 0x01
     41c:	8d 32       	cpi	r24, 0x2D	; 45
     41e:	71 f5       	brne	.+92     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     420:	11 23       	and	r17, r17
     422:	49 f0       	breq	.+18     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
					{
						OtherNumberSign=true;
     424:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__data_end>
						SignNumberFlagToConvertInt64=true;
     428:	00 93 0f 01 	sts	0x010F, r16	; 0x80010f <SignNumberFlagToConvertInt64>
						index++;
     42c:	1f 5f       	subi	r17, 0xFF	; 255
			{
				Operations[OperationsCounter]=Digits[index];
				OperationsCounter++;
				Operands[OperandsCounter]=ConvertToInt(TempArr,TempIndex);
				OperandsCounter++;
				TempIndex=0;
     42e:	60 e0       	ldi	r22, 0x00	; 0
					if(Digits[index+1] == '-' && index >0) /*If the 2nd operand is signed */
					{
						OtherNumberSign=true;
						SignNumberFlagToConvertInt64=true;
						index++;
     430:	13 c0       	rjmp	.+38     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
					}
					else if(IsOperation(Digits[index+1])) /*if two symbols after each other ++ or *% */
     432:	85 32       	cpi	r24, 0x25	; 37
     434:	81 f4       	brne	.+32     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
					{
						lcd_clearDisplay();
     436:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
						lcd_write_string("MATH ERROR");
     43a:	80 e6       	ldi	r24, 0x60	; 96
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     442:	9f e3       	ldi	r25, 0x3F	; 63
     444:	ad e0       	ldi	r26, 0x0D	; 13
     446:	b3 e0       	ldi	r27, 0x03	; 3
     448:	91 50       	subi	r25, 0x01	; 1
     44a:	a0 40       	sbci	r26, 0x00	; 0
     44c:	b0 40       	sbci	r27, 0x00	; 0
     44e:	e1 f7       	brne	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     452:	00 00       	nop
						_delay_ms(1000);
						return Reset;
     454:	18 c0       	rjmp	.+48     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			{
				Operations[OperationsCounter]=Digits[index];
				OperationsCounter++;
				Operands[OperandsCounter]=ConvertToInt(TempArr,TempIndex);
				OperandsCounter++;
				TempIndex=0;
     456:	60 e0       	ldi	r22, 0x00	; 0
						return Reset;
						
					}
					
			}
			index++;
     458:	1f 5f       	subi	r17, 0xFF	; 255
			DigitsCounter--;
     45a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <DigitsCounter>
     45e:	81 50       	subi	r24, 0x01	; 1
     460:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <DigitsCounter>
		SignNumberFlagToConvertInt64=true; /*To make a note that the number which ConvertInt64 will convert is negative*/
		index++; /*TempArr[0]= Digits[1]*/
		
	}
	
	while(DigitsCounter != 0) //incremented in getdata
     464:	81 11       	cpse	r24, r1
     466:	85 cf       	rjmp	.-246    	; 0x372 <analyze+0x9e>
			}
			index++;
			DigitsCounter--;
		}
		
			return CalculatePoint;	
     468:	0f 2e       	mov	r0, r31
     46a:	f3 e0       	ldi	r31, 0x03	; 3
     46c:	bf 2e       	mov	r11, r31
     46e:	f0 2d       	mov	r31, r0
     470:	0a c0       	rjmp	.+20     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
     472:	0f 2e       	mov	r0, r31
     474:	f3 e0       	ldi	r31, 0x03	; 3
     476:	bf 2e       	mov	r11, r31
     478:	f0 2d       	mov	r31, r0
     47a:	05 c0       	rjmp	.+10     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
					{
						OtherNumberSign=true;
						SignNumberFlagToConvertInt64=true;
						index++;
					}
					else if(IsOperation(Digits[index+1])) /*if two symbols after each other ++ or *% */
     47c:	96 ed       	ldi	r25, 0xD6	; 214
     47e:	98 0f       	add	r25, r24
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	b8 f6       	brcc	.-82     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     484:	d8 cf       	rjmp	.-80     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			DigitsCounter--;
		}
		
			return CalculatePoint;	
			
}
     486:	8b 2d       	mov	r24, r11
     488:	60 96       	adiw	r28, 0x10	; 16
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	1f 91       	pop	r17
     49a:	0f 91       	pop	r16
     49c:	ff 90       	pop	r15
     49e:	ef 90       	pop	r14
     4a0:	df 90       	pop	r13
     4a2:	cf 90       	pop	r12
     4a4:	bf 90       	pop	r11
     4a6:	08 95       	ret

000004a8 <calculate>:


uint8 calculate()
{
     4a8:	8f 92       	push	r8
     4aa:	9f 92       	push	r9
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
	uint8 priority=false;
	
	if(OperationsCounter>2)	/* > 2 As equal sign included*/
     4c0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <OperationsCounter>
     4c4:	83 30       	cpi	r24, 0x03	; 3
     4c6:	08 f4       	brcc	.+2      	; 0x4ca <calculate+0x22>
     4c8:	dc c3       	rjmp	.+1976   	; 0xc82 <__stack+0x423>
	{									
		if(Operations[1] != Operations[0]) priority=true;		
	}		
	
	if(OperandsCounter == 1)
     4ca:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <OperandsCounter>
     4ce:	a1 30       	cpi	r26, 0x01	; 1
     4d0:	e1 f4       	brne	.+56     	; 0x50a <calculate+0x62>
	{	
		Result=Operands[0];
     4d2:	ec e1       	ldi	r30, 0x1C	; 28
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	80 81       	ld	r24, Z
     4d8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Result>
     4dc:	81 81       	ldd	r24, Z+1	; 0x01
     4de:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Result+0x1>
     4e2:	82 81       	ldd	r24, Z+2	; 0x02
     4e4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Result+0x2>
     4e8:	83 81       	ldd	r24, Z+3	; 0x03
     4ea:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Result+0x3>
     4ee:	84 81       	ldd	r24, Z+4	; 0x04
     4f0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <Result+0x4>
     4f4:	85 81       	ldd	r24, Z+5	; 0x05
     4f6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Result+0x5>
     4fa:	86 81       	ldd	r24, Z+6	; 0x06
     4fc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     500:	87 81       	ldd	r24, Z+7	; 0x07
     502:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <Result+0x7>
		return DisplayPoint;	
     506:	84 e0       	ldi	r24, 0x04	; 4
     508:	c2 c3       	rjmp	.+1924   	; 0xc8e <__stack+0x42f>
{
	uint8 priority=false;
	
	if(OperationsCounter>2)	/* > 2 As equal sign included*/
	{									
		if(Operations[1] != Operations[0]) priority=true;		
     50a:	ec e8       	ldi	r30, 0x8C	; 140
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	91 81       	ldd	r25, Z+1	; 0x01
     510:	80 81       	ld	r24, Z
	{	
		Result=Operands[0];
		return DisplayPoint;	
	}

if(priority==false){	
     512:	98 13       	cpse	r25, r24
     514:	1d c1       	rjmp	.+570    	; 0x750 <calculate+0x2a8>
	if((OperandsCounter>1))
     516:	a2 30       	cpi	r26, 0x02	; 2
     518:	08 f4       	brcc	.+2      	; 0x51c <calculate+0x74>
     51a:	ad c3       	rjmp	.+1882   	; 0xc76 <__stack+0x417>
	{
		uint8 index=0;
		switch(Operations[0])
     51c:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <Operations>
     520:	8a 32       	cpi	r24, 0x2A	; 42
     522:	09 f4       	brne	.+2      	; 0x526 <calculate+0x7e>
     524:	49 c0       	rjmp	.+146    	; 0x5b8 <calculate+0x110>
     526:	20 f4       	brcc	.+8      	; 0x530 <calculate+0x88>
     528:	85 32       	cpi	r24, 0x25	; 37
     52a:	09 f4       	brne	.+2      	; 0x52e <calculate+0x86>
     52c:	c7 c0       	rjmp	.+398    	; 0x6bc <calculate+0x214>
     52e:	ff c0       	rjmp	.+510    	; 0x72e <calculate+0x286>
     530:	8b 32       	cpi	r24, 0x2B	; 43
     532:	21 f0       	breq	.+8      	; 0x53c <calculate+0x94>
     534:	8d 32       	cpi	r24, 0x2D	; 45
     536:	09 f4       	brne	.+2      	; 0x53a <calculate+0x92>
     538:	8a c0       	rjmp	.+276    	; 0x64e <calculate+0x1a6>
     53a:	f9 c0       	rjmp	.+498    	; 0x72e <calculate+0x286>
		{
			case '+':{
						Result=Operands[0];
     53c:	ec e1       	ldi	r30, 0x1C	; 28
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	a0 80       	ld	r10, Z
     542:	b1 80       	ldd	r11, Z+1	; 0x01
     544:	c2 80       	ldd	r12, Z+2	; 0x02
     546:	d3 80       	ldd	r13, Z+3	; 0x03
     548:	e4 80       	ldd	r14, Z+4	; 0x04
     54a:	f5 80       	ldd	r15, Z+5	; 0x05
     54c:	06 81       	ldd	r16, Z+6	; 0x06
     54e:	17 81       	ldd	r17, Z+7	; 0x07
     550:	e4 e2       	ldi	r30, 0x24	; 36
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	a2 50       	subi	r26, 0x02	; 2
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	aa 0f       	add	r26, r26
     55a:	bb 1f       	adc	r27, r27
     55c:	aa 0f       	add	r26, r26
     55e:	bb 1f       	adc	r27, r27
     560:	aa 0f       	add	r26, r26
     562:	bb 1f       	adc	r27, r27
     564:	a4 5d       	subi	r26, 0xD4	; 212
     566:	be 4f       	sbci	r27, 0xFE	; 254
						for(index=1;index<OperandsCounter;index++)
							Result+=Operands[index];				
     568:	20 81       	ld	r18, Z
     56a:	31 81       	ldd	r19, Z+1	; 0x01
     56c:	42 81       	ldd	r20, Z+2	; 0x02
     56e:	53 81       	ldd	r21, Z+3	; 0x03
     570:	64 81       	ldd	r22, Z+4	; 0x04
     572:	75 81       	ldd	r23, Z+5	; 0x05
     574:	86 81       	ldd	r24, Z+6	; 0x06
     576:	97 81       	ldd	r25, Z+7	; 0x07
     578:	38 96       	adiw	r30, 0x08	; 8
     57a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__adddi3>
     57e:	a2 2e       	mov	r10, r18
     580:	b3 2e       	mov	r11, r19
     582:	c4 2e       	mov	r12, r20
     584:	d5 2e       	mov	r13, r21
     586:	e6 2e       	mov	r14, r22
     588:	f7 2e       	mov	r15, r23
     58a:	08 2f       	mov	r16, r24
     58c:	19 2f       	mov	r17, r25
		uint8 index=0;
		switch(Operations[0])
		{
			case '+':{
						Result=Operands[0];
						for(index=1;index<OperandsCounter;index++)
     58e:	ea 17       	cp	r30, r26
     590:	fb 07       	cpc	r31, r27
     592:	51 f7       	brne	.-44     	; 0x568 <calculate+0xc0>
     594:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     598:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     59c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     5a0:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     5a4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     5a8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     5ac:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     5b0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
						return Reset;
						break;
					}					
		}
		
		return DisplayPoint;
     5b4:	84 e0       	ldi	r24, 0x04	; 4
     5b6:	6b c3       	rjmp	.+1750   	; 0xc8e <__stack+0x42f>
							Result+=Operands[index];				
						break;
					 }
					
			case '*':{
						Result=1;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <Result>
     5be:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Result+0x1>
     5c2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Result+0x2>
     5c6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Result+0x3>
     5ca:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Result+0x4>
     5ce:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Result+0x5>
     5d2:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Result+0x6>
     5d6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Result+0x7>
						for(index=0;index<OperandsCounter;index++)
     5da:	aa 23       	and	r26, r26
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <calculate+0x138>
     5de:	4d c3       	rjmp	.+1690   	; 0xc7a <__stack+0x41b>
     5e0:	cc e1       	ldi	r28, 0x1C	; 28
     5e2:	d1 e0       	ldi	r29, 0x01	; 1
     5e4:	a1 50       	subi	r26, 0x01	; 1
     5e6:	8a 2f       	mov	r24, r26
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	88 0f       	add	r24, r24
     5f4:	99 1f       	adc	r25, r25
     5f6:	9c 01       	movw	r18, r24
     5f8:	2c 5d       	subi	r18, 0xDC	; 220
     5fa:	3e 4f       	sbci	r19, 0xFE	; 254
     5fc:	49 01       	movw	r8, r18
     5fe:	21 e0       	ldi	r18, 0x01	; 1
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
							Result*=Operands[index];
     60e:	a8 80       	ld	r10, Y
     610:	b9 80       	ldd	r11, Y+1	; 0x01
     612:	ca 80       	ldd	r12, Y+2	; 0x02
     614:	db 80       	ldd	r13, Y+3	; 0x03
     616:	ec 80       	ldd	r14, Y+4	; 0x04
     618:	fd 80       	ldd	r15, Y+5	; 0x05
     61a:	0e 81       	ldd	r16, Y+6	; 0x06
     61c:	1f 81       	ldd	r17, Y+7	; 0x07
     61e:	28 96       	adiw	r28, 0x08	; 8
     620:	0e 94 aa 09 	call	0x1354	; 0x1354 <__muldi3>
						break;
					 }
					
			case '*':{
						Result=1;
						for(index=0;index<OperandsCounter;index++)
     624:	c8 15       	cp	r28, r8
     626:	d9 05       	cpc	r29, r9
     628:	91 f7       	brne	.-28     	; 0x60e <calculate+0x166>
     62a:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     62e:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     632:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     636:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     63a:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     63e:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     642:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     646:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
						return Reset;
						break;
					}					
		}
		
		return DisplayPoint;
     64a:	84 e0       	ldi	r24, 0x04	; 4
     64c:	20 c3       	rjmp	.+1600   	; 0xc8e <__stack+0x42f>
							Result*=Operands[index];
						break;
					 }
					
			case '-':{
						Result=Operands[0];
     64e:	ec e1       	ldi	r30, 0x1C	; 28
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	20 81       	ld	r18, Z
     654:	31 81       	ldd	r19, Z+1	; 0x01
     656:	42 81       	ldd	r20, Z+2	; 0x02
     658:	53 81       	ldd	r21, Z+3	; 0x03
     65a:	64 81       	ldd	r22, Z+4	; 0x04
     65c:	75 81       	ldd	r23, Z+5	; 0x05
     65e:	86 81       	ldd	r24, Z+6	; 0x06
     660:	97 81       	ldd	r25, Z+7	; 0x07
     662:	c4 e2       	ldi	r28, 0x24	; 36
     664:	d1 e0       	ldi	r29, 0x01	; 1
     666:	a2 50       	subi	r26, 0x02	; 2
     668:	ea 2f       	mov	r30, r26
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	ee 0f       	add	r30, r30
     66e:	ff 1f       	adc	r31, r31
     670:	ee 0f       	add	r30, r30
     672:	ff 1f       	adc	r31, r31
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e4 5d       	subi	r30, 0xD4	; 212
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
						for(index=1;index<OperandsCounter;index++)
							Result-=Operands[index];
     67c:	a8 80       	ld	r10, Y
     67e:	b9 80       	ldd	r11, Y+1	; 0x01
     680:	ca 80       	ldd	r12, Y+2	; 0x02
     682:	db 80       	ldd	r13, Y+3	; 0x03
     684:	ec 80       	ldd	r14, Y+4	; 0x04
     686:	fd 80       	ldd	r15, Y+5	; 0x05
     688:	0e 81       	ldd	r16, Y+6	; 0x06
     68a:	1f 81       	ldd	r17, Y+7	; 0x07
     68c:	28 96       	adiw	r28, 0x08	; 8
     68e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subdi3>
						break;
					 }
					
			case '-':{
						Result=Operands[0];
						for(index=1;index<OperandsCounter;index++)
     692:	ce 17       	cp	r28, r30
     694:	df 07       	cpc	r29, r31
     696:	91 f7       	brne	.-28     	; 0x67c <calculate+0x1d4>
     698:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     69c:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     6a0:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     6a4:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     6a8:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     6ac:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     6b0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     6b4:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
						return Reset;
						break;
					}					
		}
		
		return DisplayPoint;
     6b8:	84 e0       	ldi	r24, 0x04	; 4
     6ba:	e9 c2       	rjmp	.+1490   	; 0xc8e <__stack+0x42f>
							Result-=Operands[index];
						break;
					 }
						
			case '%':{
						Result=Operands[0]; 
     6bc:	ec e1       	ldi	r30, 0x1C	; 28
     6be:	f1 e0       	ldi	r31, 0x01	; 1
     6c0:	20 81       	ld	r18, Z
     6c2:	31 81       	ldd	r19, Z+1	; 0x01
     6c4:	42 81       	ldd	r20, Z+2	; 0x02
     6c6:	53 81       	ldd	r21, Z+3	; 0x03
     6c8:	64 81       	ldd	r22, Z+4	; 0x04
     6ca:	75 81       	ldd	r23, Z+5	; 0x05
     6cc:	86 81       	ldd	r24, Z+6	; 0x06
     6ce:	97 81       	ldd	r25, Z+7	; 0x07
     6d0:	c4 e2       	ldi	r28, 0x24	; 36
     6d2:	d1 e0       	ldi	r29, 0x01	; 1
     6d4:	a2 50       	subi	r26, 0x02	; 2
     6d6:	ea 2f       	mov	r30, r26
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	df 01       	movw	r26, r30
     6e8:	a4 5d       	subi	r26, 0xD4	; 212
     6ea:	be 4f       	sbci	r27, 0xFE	; 254
     6ec:	4d 01       	movw	r8, r26
						for(index=1;index<OperandsCounter;index++)
							Result/=Operands[index];
     6ee:	a8 80       	ld	r10, Y
     6f0:	b9 80       	ldd	r11, Y+1	; 0x01
     6f2:	ca 80       	ldd	r12, Y+2	; 0x02
     6f4:	db 80       	ldd	r13, Y+3	; 0x03
     6f6:	ec 80       	ldd	r14, Y+4	; 0x04
     6f8:	fd 80       	ldd	r15, Y+5	; 0x05
     6fa:	0e 81       	ldd	r16, Y+6	; 0x06
     6fc:	1f 81       	ldd	r17, Y+7	; 0x07
     6fe:	28 96       	adiw	r28, 0x08	; 8
     700:	0e 94 05 0a 	call	0x140a	; 0x140a <__divdi3>
						break;
					 }
						
			case '%':{
						Result=Operands[0]; 
						for(index=1;index<OperandsCounter;index++)
     704:	c8 15       	cp	r28, r8
     706:	d9 05       	cpc	r29, r9
     708:	91 f7       	brne	.-28     	; 0x6ee <calculate+0x246>
     70a:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     70e:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     712:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     716:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     71a:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     71e:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     722:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     726:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
						return Reset;
						break;
					}					
		}
		
		return DisplayPoint;
     72a:	84 e0       	ldi	r24, 0x04	; 4
     72c:	b0 c2       	rjmp	.+1376   	; 0xc8e <__stack+0x42f>
							Result/=Operands[index];
						break;
					 }
					
			default:{
						lcd_clearDisplay();
     72e:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
						lcd_write_string("MATH ERROR");
     732:	80 e6       	ldi	r24, 0x60	; 96
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     73a:	bf e3       	ldi	r27, 0x3F	; 63
     73c:	2d e0       	ldi	r18, 0x0D	; 13
     73e:	33 e0       	ldi	r19, 0x03	; 3
     740:	b1 50       	subi	r27, 0x01	; 1
     742:	20 40       	sbci	r18, 0x00	; 0
     744:	30 40       	sbci	r19, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <calculate+0x298>
     748:	00 c0       	rjmp	.+0      	; 0x74a <calculate+0x2a2>
     74a:	00 00       	nop
						_delay_ms(1000);
						return Reset;
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	9f c2       	rjmp	.+1342   	; 0xc8e <__stack+0x42f>
		
	}
		}	
else
	{	
	if((OperandsCounter>1))
     750:	a2 30       	cpi	r26, 0x02	; 2
     752:	08 f4       	brcc	.+2      	; 0x756 <calculate+0x2ae>
     754:	94 c2       	rjmp	.+1320   	; 0xc7e <__stack+0x41f>
	{
		
		uint8 code=0;
		if(Operations[0]=='*' && Operations[1] == '+') code=1;
     756:	8a 32       	cpi	r24, 0x2A	; 42
     758:	19 f4       	brne	.+6      	; 0x760 <calculate+0x2b8>
     75a:	9b 32       	cpi	r25, 0x2B	; 43
     75c:	71 f4       	brne	.+28     	; 0x77a <calculate+0x2d2>
     75e:	2c c0       	rjmp	.+88     	; 0x7b8 <calculate+0x310>
		else if(Operations[0]=='+' && Operations[1] == '*') code=2;
     760:	8b 32       	cpi	r24, 0x2B	; 43
     762:	31 f4       	brne	.+12     	; 0x770 <calculate+0x2c8>
     764:	9a 32       	cpi	r25, 0x2A	; 42
     766:	09 f4       	brne	.+2      	; 0x76a <calculate+0x2c2>
     768:	57 c0       	rjmp	.+174    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
		else if(Operations[0]=='+' && Operations[1] == '-') code=3;
     76a:	9d 32       	cpi	r25, 0x2D	; 45
     76c:	91 f4       	brne	.+36     	; 0x792 <calculate+0x2ea>
     76e:	84 c0       	rjmp	.+264    	; 0x878 <__stack+0x19>
		else if(Operations[0]=='-' && Operations[1] == '+') code=4;
     770:	8d 32       	cpi	r24, 0x2D	; 45
     772:	31 f4       	brne	.+12     	; 0x780 <calculate+0x2d8>
     774:	9b 32       	cpi	r25, 0x2B	; 43
     776:	a9 f4       	brne	.+42     	; 0x7a2 <calculate+0x2fa>
     778:	af c0       	rjmp	.+350    	; 0x8d8 <__stack+0x79>
		else if(Operations[0]=='*' && Operations[1] == '%') code=5;
     77a:	95 32       	cpi	r25, 0x25	; 37
     77c:	71 f4       	brne	.+28     	; 0x79a <calculate+0x2f2>
     77e:	dc c0       	rjmp	.+440    	; 0x938 <__stack+0xd9>
		else if(Operations[0]=='%' && Operations[1] == '*') code=6;
     780:	85 32       	cpi	r24, 0x25	; 37
     782:	09 f0       	breq	.+2      	; 0x786 <calculate+0x2de>
     784:	69 c2       	rjmp	.+1234   	; 0xc58 <__stack+0x3f9>
     786:	9a 32       	cpi	r25, 0x2A	; 42
     788:	09 f4       	brne	.+2      	; 0x78c <calculate+0x2e4>
     78a:	06 c1       	rjmp	.+524    	; 0x998 <__stack+0x139>
		else if(Operations[0]=='%' && Operations[1] == '+') code=7;
     78c:	9b 32       	cpi	r25, 0x2B	; 43
     78e:	61 f4       	brne	.+24     	; 0x7a8 <calculate+0x300>
     790:	33 c1       	rjmp	.+614    	; 0x9f8 <__stack+0x199>
		else if(Operations[0]=='+' && Operations[1] == '%') code=8;
     792:	95 32       	cpi	r25, 0x25	; 37
     794:	09 f0       	breq	.+2      	; 0x798 <calculate+0x2f0>
     796:	60 c2       	rjmp	.+1216   	; 0xc58 <__stack+0x3f9>
     798:	5f c1       	rjmp	.+702    	; 0xa58 <__stack+0x1f9>
		else if(Operations[0]=='*' && Operations[1] == '-') code=9;
     79a:	9d 32       	cpi	r25, 0x2D	; 45
     79c:	09 f0       	breq	.+2      	; 0x7a0 <calculate+0x2f8>
     79e:	5c c2       	rjmp	.+1208   	; 0xc58 <__stack+0x3f9>
     7a0:	8b c1       	rjmp	.+790    	; 0xab8 <__stack+0x259>
		else if(Operations[0]=='-' && Operations[1] == '*') code=10;
     7a2:	9a 32       	cpi	r25, 0x2A	; 42
     7a4:	29 f4       	brne	.+10     	; 0x7b0 <calculate+0x308>
     7a6:	b8 c1       	rjmp	.+880    	; 0xb18 <__stack+0x2b9>
		else if(Operations[0]=='%' && Operations[1] == '-') code=11;
     7a8:	9d 32       	cpi	r25, 0x2D	; 45
     7aa:	09 f0       	breq	.+2      	; 0x7ae <calculate+0x306>
     7ac:	55 c2       	rjmp	.+1194   	; 0xc58 <__stack+0x3f9>
     7ae:	ec c1       	rjmp	.+984    	; 0xb88 <__stack+0x329>
		else if(Operations[0]=='-' && Operations[1] == '%') code=12;
     7b0:	95 32       	cpi	r25, 0x25	; 37
     7b2:	09 f0       	breq	.+2      	; 0x7b6 <calculate+0x30e>
     7b4:	51 c2       	rjmp	.+1186   	; 0xc58 <__stack+0x3f9>
     7b6:	18 c2       	rjmp	.+1072   	; 0xbe8 <__stack+0x389>
		else code =0; 
		
		switch(code){
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
     7b8:	cc e1       	ldi	r28, 0x1C	; 28
     7ba:	d1 e0       	ldi	r29, 0x01	; 1
     7bc:	a8 84       	ldd	r10, Y+8	; 0x08
     7be:	b9 84       	ldd	r11, Y+9	; 0x09
     7c0:	ca 84       	ldd	r12, Y+10	; 0x0a
     7c2:	db 84       	ldd	r13, Y+11	; 0x0b
     7c4:	ec 84       	ldd	r14, Y+12	; 0x0c
     7c6:	fd 84       	ldd	r15, Y+13	; 0x0d
     7c8:	0e 85       	ldd	r16, Y+14	; 0x0e
     7ca:	1f 85       	ldd	r17, Y+15	; 0x0f
     7cc:	28 81       	ld	r18, Y
     7ce:	39 81       	ldd	r19, Y+1	; 0x01
     7d0:	4a 81       	ldd	r20, Y+2	; 0x02
     7d2:	5b 81       	ldd	r21, Y+3	; 0x03
     7d4:	6c 81       	ldd	r22, Y+4	; 0x04
     7d6:	7d 81       	ldd	r23, Y+5	; 0x05
     7d8:	8e 81       	ldd	r24, Y+6	; 0x06
     7da:	9f 81       	ldd	r25, Y+7	; 0x07
     7dc:	0e 94 aa 09 	call	0x1354	; 0x1354 <__muldi3>
     7e0:	a8 88       	ldd	r10, Y+16	; 0x10
     7e2:	b9 88       	ldd	r11, Y+17	; 0x11
     7e4:	ca 88       	ldd	r12, Y+18	; 0x12
     7e6:	db 88       	ldd	r13, Y+19	; 0x13
     7e8:	ec 88       	ldd	r14, Y+20	; 0x14
     7ea:	fd 88       	ldd	r15, Y+21	; 0x15
     7ec:	0e 89       	ldd	r16, Y+22	; 0x16
     7ee:	1f 89       	ldd	r17, Y+23	; 0x17
     7f0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__adddi3>
     7f4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     7f8:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     7fc:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     800:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     804:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     808:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     80c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     810:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     814:	84 e0       	ldi	r24, 0x04	; 4
		else if(Operations[0]=='%' && Operations[1] == '-') code=11;
		else if(Operations[0]=='-' && Operations[1] == '%') code=12;
		else code =0; 
		
		switch(code){
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
     816:	3b c2       	rjmp	.+1142   	; 0xc8e <__stack+0x42f>
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
     818:	cc e1       	ldi	r28, 0x1C	; 28
     81a:	d1 e0       	ldi	r29, 0x01	; 1
     81c:	a8 88       	ldd	r10, Y+16	; 0x10
     81e:	b9 88       	ldd	r11, Y+17	; 0x11
     820:	ca 88       	ldd	r12, Y+18	; 0x12
     822:	db 88       	ldd	r13, Y+19	; 0x13
     824:	ec 88       	ldd	r14, Y+20	; 0x14
     826:	fd 88       	ldd	r15, Y+21	; 0x15
     828:	0e 89       	ldd	r16, Y+22	; 0x16
     82a:	1f 89       	ldd	r17, Y+23	; 0x17
     82c:	28 85       	ldd	r18, Y+8	; 0x08
     82e:	39 85       	ldd	r19, Y+9	; 0x09
     830:	4a 85       	ldd	r20, Y+10	; 0x0a
     832:	5b 85       	ldd	r21, Y+11	; 0x0b
     834:	6c 85       	ldd	r22, Y+12	; 0x0c
     836:	7d 85       	ldd	r23, Y+13	; 0x0d
     838:	8e 85       	ldd	r24, Y+14	; 0x0e
     83a:	9f 85       	ldd	r25, Y+15	; 0x0f
     83c:	0e 94 aa 09 	call	0x1354	; 0x1354 <__muldi3>
     840:	a8 80       	ld	r10, Y
     842:	b9 80       	ldd	r11, Y+1	; 0x01
     844:	ca 80       	ldd	r12, Y+2	; 0x02
     846:	db 80       	ldd	r13, Y+3	; 0x03
     848:	ec 80       	ldd	r14, Y+4	; 0x04
     84a:	fd 80       	ldd	r15, Y+5	; 0x05
     84c:	0e 81       	ldd	r16, Y+6	; 0x06
     84e:	1f 81       	ldd	r17, Y+7	; 0x07
     850:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__adddi3>
     854:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     858:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     85c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     860:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     864:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     868:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     86c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     870:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     874:	84 e0       	ldi	r24, 0x04	; 4
		else if(Operations[0]=='-' && Operations[1] == '%') code=12;
		else code =0; 
		
		switch(code){
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
     876:	0b c2       	rjmp	.+1046   	; 0xc8e <__stack+0x42f>
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
     878:	ec e1       	ldi	r30, 0x1C	; 28
     87a:	f1 e0       	ldi	r31, 0x01	; 1
     87c:	20 85       	ldd	r18, Z+8	; 0x08
     87e:	31 85       	ldd	r19, Z+9	; 0x09
     880:	42 85       	ldd	r20, Z+10	; 0x0a
     882:	53 85       	ldd	r21, Z+11	; 0x0b
     884:	64 85       	ldd	r22, Z+12	; 0x0c
     886:	75 85       	ldd	r23, Z+13	; 0x0d
     888:	86 85       	ldd	r24, Z+14	; 0x0e
     88a:	97 85       	ldd	r25, Z+15	; 0x0f
     88c:	a0 88       	ldd	r10, Z+16	; 0x10
     88e:	b1 88       	ldd	r11, Z+17	; 0x11
     890:	c2 88       	ldd	r12, Z+18	; 0x12
     892:	d3 88       	ldd	r13, Z+19	; 0x13
     894:	e4 88       	ldd	r14, Z+20	; 0x14
     896:	f5 88       	ldd	r15, Z+21	; 0x15
     898:	06 89       	ldd	r16, Z+22	; 0x16
     89a:	17 89       	ldd	r17, Z+23	; 0x17
     89c:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subdi3>
     8a0:	a0 80       	ld	r10, Z
     8a2:	b1 80       	ldd	r11, Z+1	; 0x01
     8a4:	c2 80       	ldd	r12, Z+2	; 0x02
     8a6:	d3 80       	ldd	r13, Z+3	; 0x03
     8a8:	e4 80       	ldd	r14, Z+4	; 0x04
     8aa:	f5 80       	ldd	r15, Z+5	; 0x05
     8ac:	06 81       	ldd	r16, Z+6	; 0x06
     8ae:	17 81       	ldd	r17, Z+7	; 0x07
     8b0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__adddi3>
     8b4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     8b8:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     8bc:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     8c0:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     8c4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     8c8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     8cc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     8d0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     8d4:	84 e0       	ldi	r24, 0x04	; 4
		else code =0; 
		
		switch(code){
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
     8d6:	db c1       	rjmp	.+950    	; 0xc8e <__stack+0x42f>
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
     8d8:	ec e1       	ldi	r30, 0x1C	; 28
     8da:	f1 e0       	ldi	r31, 0x01	; 1
     8dc:	20 81       	ld	r18, Z
     8de:	31 81       	ldd	r19, Z+1	; 0x01
     8e0:	42 81       	ldd	r20, Z+2	; 0x02
     8e2:	53 81       	ldd	r21, Z+3	; 0x03
     8e4:	64 81       	ldd	r22, Z+4	; 0x04
     8e6:	75 81       	ldd	r23, Z+5	; 0x05
     8e8:	86 81       	ldd	r24, Z+6	; 0x06
     8ea:	97 81       	ldd	r25, Z+7	; 0x07
     8ec:	a0 84       	ldd	r10, Z+8	; 0x08
     8ee:	b1 84       	ldd	r11, Z+9	; 0x09
     8f0:	c2 84       	ldd	r12, Z+10	; 0x0a
     8f2:	d3 84       	ldd	r13, Z+11	; 0x0b
     8f4:	e4 84       	ldd	r14, Z+12	; 0x0c
     8f6:	f5 84       	ldd	r15, Z+13	; 0x0d
     8f8:	06 85       	ldd	r16, Z+14	; 0x0e
     8fa:	17 85       	ldd	r17, Z+15	; 0x0f
     8fc:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subdi3>
     900:	a0 88       	ldd	r10, Z+16	; 0x10
     902:	b1 88       	ldd	r11, Z+17	; 0x11
     904:	c2 88       	ldd	r12, Z+18	; 0x12
     906:	d3 88       	ldd	r13, Z+19	; 0x13
     908:	e4 88       	ldd	r14, Z+20	; 0x14
     90a:	f5 88       	ldd	r15, Z+21	; 0x15
     90c:	06 89       	ldd	r16, Z+22	; 0x16
     90e:	17 89       	ldd	r17, Z+23	; 0x17
     910:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__adddi3>
     914:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     918:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     91c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     920:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     924:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     928:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     92c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     930:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     934:	84 e0       	ldi	r24, 0x04	; 4
		
		switch(code){
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
     936:	ab c1       	rjmp	.+854    	; 0xc8e <__stack+0x42f>
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
     938:	cc e1       	ldi	r28, 0x1C	; 28
     93a:	d1 e0       	ldi	r29, 0x01	; 1
     93c:	a8 88       	ldd	r10, Y+16	; 0x10
     93e:	b9 88       	ldd	r11, Y+17	; 0x11
     940:	ca 88       	ldd	r12, Y+18	; 0x12
     942:	db 88       	ldd	r13, Y+19	; 0x13
     944:	ec 88       	ldd	r14, Y+20	; 0x14
     946:	fd 88       	ldd	r15, Y+21	; 0x15
     948:	0e 89       	ldd	r16, Y+22	; 0x16
     94a:	1f 89       	ldd	r17, Y+23	; 0x17
     94c:	28 85       	ldd	r18, Y+8	; 0x08
     94e:	39 85       	ldd	r19, Y+9	; 0x09
     950:	4a 85       	ldd	r20, Y+10	; 0x0a
     952:	5b 85       	ldd	r21, Y+11	; 0x0b
     954:	6c 85       	ldd	r22, Y+12	; 0x0c
     956:	7d 85       	ldd	r23, Y+13	; 0x0d
     958:	8e 85       	ldd	r24, Y+14	; 0x0e
     95a:	9f 85       	ldd	r25, Y+15	; 0x0f
     95c:	0e 94 05 0a 	call	0x140a	; 0x140a <__divdi3>
     960:	a8 80       	ld	r10, Y
     962:	b9 80       	ldd	r11, Y+1	; 0x01
     964:	ca 80       	ldd	r12, Y+2	; 0x02
     966:	db 80       	ldd	r13, Y+3	; 0x03
     968:	ec 80       	ldd	r14, Y+4	; 0x04
     96a:	fd 80       	ldd	r15, Y+5	; 0x05
     96c:	0e 81       	ldd	r16, Y+6	; 0x06
     96e:	1f 81       	ldd	r17, Y+7	; 0x07
     970:	0e 94 aa 09 	call	0x1354	; 0x1354 <__muldi3>
     974:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     978:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     97c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     980:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     984:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     988:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     98c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     990:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     994:	84 e0       	ldi	r24, 0x04	; 4
		switch(code){
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
     996:	7b c1       	rjmp	.+758    	; 0xc8e <__stack+0x42f>
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
     998:	cc e1       	ldi	r28, 0x1C	; 28
     99a:	d1 e0       	ldi	r29, 0x01	; 1
     99c:	a8 84       	ldd	r10, Y+8	; 0x08
     99e:	b9 84       	ldd	r11, Y+9	; 0x09
     9a0:	ca 84       	ldd	r12, Y+10	; 0x0a
     9a2:	db 84       	ldd	r13, Y+11	; 0x0b
     9a4:	ec 84       	ldd	r14, Y+12	; 0x0c
     9a6:	fd 84       	ldd	r15, Y+13	; 0x0d
     9a8:	0e 85       	ldd	r16, Y+14	; 0x0e
     9aa:	1f 85       	ldd	r17, Y+15	; 0x0f
     9ac:	28 81       	ld	r18, Y
     9ae:	39 81       	ldd	r19, Y+1	; 0x01
     9b0:	4a 81       	ldd	r20, Y+2	; 0x02
     9b2:	5b 81       	ldd	r21, Y+3	; 0x03
     9b4:	6c 81       	ldd	r22, Y+4	; 0x04
     9b6:	7d 81       	ldd	r23, Y+5	; 0x05
     9b8:	8e 81       	ldd	r24, Y+6	; 0x06
     9ba:	9f 81       	ldd	r25, Y+7	; 0x07
     9bc:	0e 94 05 0a 	call	0x140a	; 0x140a <__divdi3>
     9c0:	a8 88       	ldd	r10, Y+16	; 0x10
     9c2:	b9 88       	ldd	r11, Y+17	; 0x11
     9c4:	ca 88       	ldd	r12, Y+18	; 0x12
     9c6:	db 88       	ldd	r13, Y+19	; 0x13
     9c8:	ec 88       	ldd	r14, Y+20	; 0x14
     9ca:	fd 88       	ldd	r15, Y+21	; 0x15
     9cc:	0e 89       	ldd	r16, Y+22	; 0x16
     9ce:	1f 89       	ldd	r17, Y+23	; 0x17
     9d0:	0e 94 aa 09 	call	0x1354	; 0x1354 <__muldi3>
     9d4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     9d8:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     9dc:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     9e0:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     9e4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     9e8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     9ec:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     9f0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     9f4:	84 e0       	ldi	r24, 0x04	; 4
			case 1: Result=(Operands[0]*Operands[1])+Operands[2]; break;
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
     9f6:	4b c1       	rjmp	.+662    	; 0xc8e <__stack+0x42f>
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
     9f8:	cc e1       	ldi	r28, 0x1C	; 28
     9fa:	d1 e0       	ldi	r29, 0x01	; 1
     9fc:	a8 84       	ldd	r10, Y+8	; 0x08
     9fe:	b9 84       	ldd	r11, Y+9	; 0x09
     a00:	ca 84       	ldd	r12, Y+10	; 0x0a
     a02:	db 84       	ldd	r13, Y+11	; 0x0b
     a04:	ec 84       	ldd	r14, Y+12	; 0x0c
     a06:	fd 84       	ldd	r15, Y+13	; 0x0d
     a08:	0e 85       	ldd	r16, Y+14	; 0x0e
     a0a:	1f 85       	ldd	r17, Y+15	; 0x0f
     a0c:	28 81       	ld	r18, Y
     a0e:	39 81       	ldd	r19, Y+1	; 0x01
     a10:	4a 81       	ldd	r20, Y+2	; 0x02
     a12:	5b 81       	ldd	r21, Y+3	; 0x03
     a14:	6c 81       	ldd	r22, Y+4	; 0x04
     a16:	7d 81       	ldd	r23, Y+5	; 0x05
     a18:	8e 81       	ldd	r24, Y+6	; 0x06
     a1a:	9f 81       	ldd	r25, Y+7	; 0x07
     a1c:	0e 94 05 0a 	call	0x140a	; 0x140a <__divdi3>
     a20:	a8 88       	ldd	r10, Y+16	; 0x10
     a22:	b9 88       	ldd	r11, Y+17	; 0x11
     a24:	ca 88       	ldd	r12, Y+18	; 0x12
     a26:	db 88       	ldd	r13, Y+19	; 0x13
     a28:	ec 88       	ldd	r14, Y+20	; 0x14
     a2a:	fd 88       	ldd	r15, Y+21	; 0x15
     a2c:	0e 89       	ldd	r16, Y+22	; 0x16
     a2e:	1f 89       	ldd	r17, Y+23	; 0x17
     a30:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__adddi3>
     a34:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     a38:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     a3c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     a40:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     a44:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     a48:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     a4c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     a50:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     a54:	84 e0       	ldi	r24, 0x04	; 4
			case 2: Result=Operands[0]+(Operands[1]*Operands[2]); break;
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
     a56:	1b c1       	rjmp	.+566    	; 0xc8e <__stack+0x42f>
			case 8: Result=Operands[0]/Operands[1]+Operands[2]; break;
     a58:	cc e1       	ldi	r28, 0x1C	; 28
     a5a:	d1 e0       	ldi	r29, 0x01	; 1
     a5c:	a8 84       	ldd	r10, Y+8	; 0x08
     a5e:	b9 84       	ldd	r11, Y+9	; 0x09
     a60:	ca 84       	ldd	r12, Y+10	; 0x0a
     a62:	db 84       	ldd	r13, Y+11	; 0x0b
     a64:	ec 84       	ldd	r14, Y+12	; 0x0c
     a66:	fd 84       	ldd	r15, Y+13	; 0x0d
     a68:	0e 85       	ldd	r16, Y+14	; 0x0e
     a6a:	1f 85       	ldd	r17, Y+15	; 0x0f
     a6c:	28 81       	ld	r18, Y
     a6e:	39 81       	ldd	r19, Y+1	; 0x01
     a70:	4a 81       	ldd	r20, Y+2	; 0x02
     a72:	5b 81       	ldd	r21, Y+3	; 0x03
     a74:	6c 81       	ldd	r22, Y+4	; 0x04
     a76:	7d 81       	ldd	r23, Y+5	; 0x05
     a78:	8e 81       	ldd	r24, Y+6	; 0x06
     a7a:	9f 81       	ldd	r25, Y+7	; 0x07
     a7c:	0e 94 05 0a 	call	0x140a	; 0x140a <__divdi3>
     a80:	a8 88       	ldd	r10, Y+16	; 0x10
     a82:	b9 88       	ldd	r11, Y+17	; 0x11
     a84:	ca 88       	ldd	r12, Y+18	; 0x12
     a86:	db 88       	ldd	r13, Y+19	; 0x13
     a88:	ec 88       	ldd	r14, Y+20	; 0x14
     a8a:	fd 88       	ldd	r15, Y+21	; 0x15
     a8c:	0e 89       	ldd	r16, Y+22	; 0x16
     a8e:	1f 89       	ldd	r17, Y+23	; 0x17
     a90:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <__adddi3>
     a94:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     a98:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     a9c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     aa0:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     aa4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     aa8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     aac:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     ab0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     ab4:	84 e0       	ldi	r24, 0x04	; 4
			case 3: Result=Operands[0]+(Operands[1]-Operands[2]); break;
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 8: Result=Operands[0]/Operands[1]+Operands[2]; break;
     ab6:	eb c0       	rjmp	.+470    	; 0xc8e <__stack+0x42f>
			case 9: Result= Operands[0]*Operands[1]-Operands[2]; break;
     ab8:	cc e1       	ldi	r28, 0x1C	; 28
     aba:	d1 e0       	ldi	r29, 0x01	; 1
     abc:	a8 84       	ldd	r10, Y+8	; 0x08
     abe:	b9 84       	ldd	r11, Y+9	; 0x09
     ac0:	ca 84       	ldd	r12, Y+10	; 0x0a
     ac2:	db 84       	ldd	r13, Y+11	; 0x0b
     ac4:	ec 84       	ldd	r14, Y+12	; 0x0c
     ac6:	fd 84       	ldd	r15, Y+13	; 0x0d
     ac8:	0e 85       	ldd	r16, Y+14	; 0x0e
     aca:	1f 85       	ldd	r17, Y+15	; 0x0f
     acc:	28 81       	ld	r18, Y
     ace:	39 81       	ldd	r19, Y+1	; 0x01
     ad0:	4a 81       	ldd	r20, Y+2	; 0x02
     ad2:	5b 81       	ldd	r21, Y+3	; 0x03
     ad4:	6c 81       	ldd	r22, Y+4	; 0x04
     ad6:	7d 81       	ldd	r23, Y+5	; 0x05
     ad8:	8e 81       	ldd	r24, Y+6	; 0x06
     ada:	9f 81       	ldd	r25, Y+7	; 0x07
     adc:	0e 94 aa 09 	call	0x1354	; 0x1354 <__muldi3>
     ae0:	a8 88       	ldd	r10, Y+16	; 0x10
     ae2:	b9 88       	ldd	r11, Y+17	; 0x11
     ae4:	ca 88       	ldd	r12, Y+18	; 0x12
     ae6:	db 88       	ldd	r13, Y+19	; 0x13
     ae8:	ec 88       	ldd	r14, Y+20	; 0x14
     aea:	fd 88       	ldd	r15, Y+21	; 0x15
     aec:	0e 89       	ldd	r16, Y+22	; 0x16
     aee:	1f 89       	ldd	r17, Y+23	; 0x17
     af0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subdi3>
     af4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     af8:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     afc:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     b00:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     b04:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     b08:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     b0c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     b10:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     b14:	84 e0       	ldi	r24, 0x04	; 4
			case 4: Result=(Operands[0]-Operands[1])+Operands[2]; break;
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 8: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 9: Result= Operands[0]*Operands[1]-Operands[2]; break;
     b16:	bb c0       	rjmp	.+374    	; 0xc8e <__stack+0x42f>
			case 10: Result=Operands[0]-Operands[1]*Operands[2]; break;
     b18:	cc e1       	ldi	r28, 0x1C	; 28
     b1a:	d1 e0       	ldi	r29, 0x01	; 1
     b1c:	a8 88       	ldd	r10, Y+16	; 0x10
     b1e:	b9 88       	ldd	r11, Y+17	; 0x11
     b20:	ca 88       	ldd	r12, Y+18	; 0x12
     b22:	db 88       	ldd	r13, Y+19	; 0x13
     b24:	ec 88       	ldd	r14, Y+20	; 0x14
     b26:	fd 88       	ldd	r15, Y+21	; 0x15
     b28:	0e 89       	ldd	r16, Y+22	; 0x16
     b2a:	1f 89       	ldd	r17, Y+23	; 0x17
     b2c:	28 85       	ldd	r18, Y+8	; 0x08
     b2e:	39 85       	ldd	r19, Y+9	; 0x09
     b30:	4a 85       	ldd	r20, Y+10	; 0x0a
     b32:	5b 85       	ldd	r21, Y+11	; 0x0b
     b34:	6c 85       	ldd	r22, Y+12	; 0x0c
     b36:	7d 85       	ldd	r23, Y+13	; 0x0d
     b38:	8e 85       	ldd	r24, Y+14	; 0x0e
     b3a:	9f 85       	ldd	r25, Y+15	; 0x0f
     b3c:	0e 94 aa 09 	call	0x1354	; 0x1354 <__muldi3>
     b40:	a2 2e       	mov	r10, r18
     b42:	b3 2e       	mov	r11, r19
     b44:	c4 2e       	mov	r12, r20
     b46:	d5 2e       	mov	r13, r21
     b48:	e6 2e       	mov	r14, r22
     b4a:	f7 2e       	mov	r15, r23
     b4c:	08 2f       	mov	r16, r24
     b4e:	19 2f       	mov	r17, r25
     b50:	28 81       	ld	r18, Y
     b52:	39 81       	ldd	r19, Y+1	; 0x01
     b54:	4a 81       	ldd	r20, Y+2	; 0x02
     b56:	5b 81       	ldd	r21, Y+3	; 0x03
     b58:	6c 81       	ldd	r22, Y+4	; 0x04
     b5a:	7d 81       	ldd	r23, Y+5	; 0x05
     b5c:	8e 81       	ldd	r24, Y+6	; 0x06
     b5e:	9f 81       	ldd	r25, Y+7	; 0x07
     b60:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subdi3>
     b64:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     b68:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     b6c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     b70:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     b74:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     b78:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     b7c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     b80:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     b84:	84 e0       	ldi	r24, 0x04	; 4
			case 5: Result=Operands[0]*(Operands[1]/Operands[2]); break;
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 8: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 9: Result= Operands[0]*Operands[1]-Operands[2]; break;
			case 10: Result=Operands[0]-Operands[1]*Operands[2]; break;
     b86:	83 c0       	rjmp	.+262    	; 0xc8e <__stack+0x42f>
			case 11: Result= Operands[0]/Operands[1]-Operands[2];break;
     b88:	cc e1       	ldi	r28, 0x1C	; 28
     b8a:	d1 e0       	ldi	r29, 0x01	; 1
     b8c:	a8 84       	ldd	r10, Y+8	; 0x08
     b8e:	b9 84       	ldd	r11, Y+9	; 0x09
     b90:	ca 84       	ldd	r12, Y+10	; 0x0a
     b92:	db 84       	ldd	r13, Y+11	; 0x0b
     b94:	ec 84       	ldd	r14, Y+12	; 0x0c
     b96:	fd 84       	ldd	r15, Y+13	; 0x0d
     b98:	0e 85       	ldd	r16, Y+14	; 0x0e
     b9a:	1f 85       	ldd	r17, Y+15	; 0x0f
     b9c:	28 81       	ld	r18, Y
     b9e:	39 81       	ldd	r19, Y+1	; 0x01
     ba0:	4a 81       	ldd	r20, Y+2	; 0x02
     ba2:	5b 81       	ldd	r21, Y+3	; 0x03
     ba4:	6c 81       	ldd	r22, Y+4	; 0x04
     ba6:	7d 81       	ldd	r23, Y+5	; 0x05
     ba8:	8e 81       	ldd	r24, Y+6	; 0x06
     baa:	9f 81       	ldd	r25, Y+7	; 0x07
     bac:	0e 94 05 0a 	call	0x140a	; 0x140a <__divdi3>
     bb0:	a8 88       	ldd	r10, Y+16	; 0x10
     bb2:	b9 88       	ldd	r11, Y+17	; 0x11
     bb4:	ca 88       	ldd	r12, Y+18	; 0x12
     bb6:	db 88       	ldd	r13, Y+19	; 0x13
     bb8:	ec 88       	ldd	r14, Y+20	; 0x14
     bba:	fd 88       	ldd	r15, Y+21	; 0x15
     bbc:	0e 89       	ldd	r16, Y+22	; 0x16
     bbe:	1f 89       	ldd	r17, Y+23	; 0x17
     bc0:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subdi3>
     bc4:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     bc8:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     bcc:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     bd0:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     bd4:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     bd8:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     bdc:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     be0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     be4:	84 e0       	ldi	r24, 0x04	; 4
			case 6: Result=(Operands[0]/Operands[1])*Operands[2]; break;
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 8: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 9: Result= Operands[0]*Operands[1]-Operands[2]; break;
			case 10: Result=Operands[0]-Operands[1]*Operands[2]; break;
			case 11: Result= Operands[0]/Operands[1]-Operands[2];break;
     be6:	53 c0       	rjmp	.+166    	; 0xc8e <__stack+0x42f>
			case 12: Result= Operands[0]-Operands[1]/Operands[2];break;
     be8:	cc e1       	ldi	r28, 0x1C	; 28
     bea:	d1 e0       	ldi	r29, 0x01	; 1
     bec:	a8 88       	ldd	r10, Y+16	; 0x10
     bee:	b9 88       	ldd	r11, Y+17	; 0x11
     bf0:	ca 88       	ldd	r12, Y+18	; 0x12
     bf2:	db 88       	ldd	r13, Y+19	; 0x13
     bf4:	ec 88       	ldd	r14, Y+20	; 0x14
     bf6:	fd 88       	ldd	r15, Y+21	; 0x15
     bf8:	0e 89       	ldd	r16, Y+22	; 0x16
     bfa:	1f 89       	ldd	r17, Y+23	; 0x17
     bfc:	28 85       	ldd	r18, Y+8	; 0x08
     bfe:	39 85       	ldd	r19, Y+9	; 0x09
     c00:	4a 85       	ldd	r20, Y+10	; 0x0a
     c02:	5b 85       	ldd	r21, Y+11	; 0x0b
     c04:	6c 85       	ldd	r22, Y+12	; 0x0c
     c06:	7d 85       	ldd	r23, Y+13	; 0x0d
     c08:	8e 85       	ldd	r24, Y+14	; 0x0e
     c0a:	9f 85       	ldd	r25, Y+15	; 0x0f
     c0c:	0e 94 05 0a 	call	0x140a	; 0x140a <__divdi3>
     c10:	a2 2e       	mov	r10, r18
     c12:	b3 2e       	mov	r11, r19
     c14:	c4 2e       	mov	r12, r20
     c16:	d5 2e       	mov	r13, r21
     c18:	e6 2e       	mov	r14, r22
     c1a:	f7 2e       	mov	r15, r23
     c1c:	08 2f       	mov	r16, r24
     c1e:	19 2f       	mov	r17, r25
     c20:	28 81       	ld	r18, Y
     c22:	39 81       	ldd	r19, Y+1	; 0x01
     c24:	4a 81       	ldd	r20, Y+2	; 0x02
     c26:	5b 81       	ldd	r21, Y+3	; 0x03
     c28:	6c 81       	ldd	r22, Y+4	; 0x04
     c2a:	7d 81       	ldd	r23, Y+5	; 0x05
     c2c:	8e 81       	ldd	r24, Y+6	; 0x06
     c2e:	9f 81       	ldd	r25, Y+7	; 0x07
     c30:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subdi3>
     c34:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <Result>
     c38:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <Result+0x1>
     c3c:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <Result+0x2>
     c40:	50 93 17 01 	sts	0x0117, r21	; 0x800117 <Result+0x3>
     c44:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <Result+0x4>
     c48:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <Result+0x5>
     c4c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Result+0x6>
     c50:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Result+0x7>
					_delay_ms(1000);	
					return Reset;
					break;
				}
		}	
		return DisplayPoint;
     c54:	84 e0       	ldi	r24, 0x04	; 4
			case 7: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 8: Result=Operands[0]/Operands[1]+Operands[2]; break;
			case 9: Result= Operands[0]*Operands[1]-Operands[2]; break;
			case 10: Result=Operands[0]-Operands[1]*Operands[2]; break;
			case 11: Result= Operands[0]/Operands[1]-Operands[2];break;
			case 12: Result= Operands[0]-Operands[1]/Operands[2];break;
     c56:	1b c0       	rjmp	.+54     	; 0xc8e <__stack+0x42f>
					
			default:
				{
					lcd_write_string("PRIORITY ERROR");
     c58:	8b e6       	ldi	r24, 0x6B	; 107
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     c60:	8f e3       	ldi	r24, 0x3F	; 63
     c62:	9d e0       	ldi	r25, 0x0D	; 13
     c64:	a3 e0       	ldi	r26, 0x03	; 3
     c66:	81 50       	subi	r24, 0x01	; 1
     c68:	90 40       	sbci	r25, 0x00	; 0
     c6a:	a0 40       	sbci	r26, 0x00	; 0
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <__stack+0x407>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <__stack+0x411>
     c70:	00 00       	nop
					_delay_ms(1000);	
					return Reset;
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	0c c0       	rjmp	.+24     	; 0xc8e <__stack+0x42f>
		return DisplayPoint;
		
	}
		}
		
	return DisplayPoint;
     c76:	84 e0       	ldi	r24, 0x04	; 4
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__stack+0x42f>
						return Reset;
						break;
					}					
		}
		
		return DisplayPoint;
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	08 c0       	rjmp	.+16     	; 0xc8e <__stack+0x42f>
		return DisplayPoint;
		
	}
		}
		
	return DisplayPoint;
     c7e:	84 e0       	ldi	r24, 0x04	; 4
     c80:	06 c0       	rjmp	.+12     	; 0xc8e <__stack+0x42f>
	if(OperationsCounter>2)	/* > 2 As equal sign included*/
	{									
		if(Operations[1] != Operations[0]) priority=true;		
	}		
	
	if(OperandsCounter == 1)
     c82:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <OperandsCounter>
     c86:	a1 30       	cpi	r26, 0x01	; 1
     c88:	09 f0       	breq	.+2      	; 0xc8c <__stack+0x42d>
     c8a:	45 cc       	rjmp	.-1910   	; 0x516 <calculate+0x6e>
     c8c:	22 cc       	rjmp	.-1980   	; 0x4d2 <calculate+0x2a>
		
	}
		}
		
	return DisplayPoint;
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	bf 90       	pop	r11
     ca0:	af 90       	pop	r10
     ca2:	9f 90       	pop	r9
     ca4:	8f 90       	pop	r8
     ca6:	08 95       	ret

00000ca8 <display>:
		

uint8 display()
{	unsigned char str[16];
     ca8:	2f 92       	push	r2
     caa:	3f 92       	push	r3
     cac:	4f 92       	push	r4
     cae:	5f 92       	push	r5
     cb0:	6f 92       	push	r6
     cb2:	7f 92       	push	r7
     cb4:	8f 92       	push	r8
     cb6:	9f 92       	push	r9
     cb8:	af 92       	push	r10
     cba:	bf 92       	push	r11
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
     cd0:	63 97       	sbiw	r28, 0x13	; 19
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
	sint64 sum = Result;
     cdc:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <Result>
     ce0:	29 8b       	std	Y+17, r18	; 0x11
     ce2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Result+0x1>
     ce6:	8a 8b       	std	Y+18, r24	; 0x12
     ce8:	80 90 16 01 	lds	r8, 0x0116	; 0x800116 <Result+0x2>
     cec:	70 90 17 01 	lds	r7, 0x0117	; 0x800117 <Result+0x3>
     cf0:	60 90 18 01 	lds	r6, 0x0118	; 0x800118 <Result+0x4>
     cf4:	50 90 19 01 	lds	r5, 0x0119	; 0x800119 <Result+0x5>
     cf8:	40 90 1a 01 	lds	r4, 0x011A	; 0x80011a <Result+0x6>
     cfc:	30 90 1b 01 	lds	r3, 0x011B	; 0x80011b <Result+0x7>
	uint8 i = 0;
	uint8 digit;
	uint8 Negative=0;
	
	if(sum < 0){
     d00:	38 2f       	mov	r19, r24
     d02:	48 2d       	mov	r20, r8
     d04:	57 2d       	mov	r21, r7
     d06:	66 2d       	mov	r22, r6
     d08:	75 2d       	mov	r23, r5
     d0a:	84 2d       	mov	r24, r4
     d0c:	93 2d       	mov	r25, r3
     d0e:	a0 e0       	ldi	r26, 0x00	; 0
     d10:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__cmpdi2_s8>
     d14:	6c f4       	brge	.+26     	; 0xd30 <display+0x88>
		sum=-sum;
     d16:	0e 94 93 0a 	call	0x1526	; 0x1526 <__negdi2>
     d1a:	29 8b       	std	Y+17, r18	; 0x11
     d1c:	3a 8b       	std	Y+18, r19	; 0x12
     d1e:	84 2e       	mov	r8, r20
     d20:	75 2e       	mov	r7, r21
     d22:	66 2e       	mov	r6, r22
     d24:	57 2e       	mov	r5, r23
     d26:	48 2e       	mov	r4, r24
     d28:	39 2e       	mov	r3, r25
		Negative=1;
     d2a:	91 e0       	ldi	r25, 0x01	; 1
     d2c:	9b 8b       	std	Y+19, r25	; 0x13
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <display+0x8a>
uint8 display()
{	unsigned char str[16];
	sint64 sum = Result;
	uint8 i = 0;
	uint8 digit;
	uint8 Negative=0;
     d30:	1b 8a       	std	Y+19, r1	; 0x13
	
	if(sum < 0){
		sum=-sum;
		Negative=1;
     d32:	99 24       	eor	r9, r9
     d34:	93 94       	inc	r9
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <display+0x92>
     d38:	9e 2e       	mov	r9, r30
     d3a:	22 24       	eor	r2, r2
     d3c:	2a 94       	dec	r2
     d3e:	29 0c       	add	r2, r9
	}
	
	do
	{
		digit = sum % 10;
     d40:	0f 2e       	mov	r0, r31
     d42:	fa e0       	ldi	r31, 0x0A	; 10
     d44:	af 2e       	mov	r10, r31
     d46:	f0 2d       	mov	r31, r0
     d48:	b1 2c       	mov	r11, r1
     d4a:	c1 2c       	mov	r12, r1
     d4c:	d1 2c       	mov	r13, r1
     d4e:	e1 2c       	mov	r14, r1
     d50:	f1 2c       	mov	r15, r1
     d52:	00 e0       	ldi	r16, 0x00	; 0
     d54:	10 e0       	ldi	r17, 0x00	; 0
     d56:	29 89       	ldd	r18, Y+17	; 0x11
     d58:	3a 89       	ldd	r19, Y+18	; 0x12
     d5a:	48 2d       	mov	r20, r8
     d5c:	57 2d       	mov	r21, r7
     d5e:	66 2d       	mov	r22, r6
     d60:	75 2d       	mov	r23, r5
     d62:	84 2d       	mov	r24, r4
     d64:	93 2d       	mov	r25, r3
     d66:	0e 94 03 0a 	call	0x1406	; 0x1406 <__moddi3>
		if (digit < 0xA)
     d6a:	2a 30       	cpi	r18, 0x0A	; 10
     d6c:	48 f4       	brcc	.+18     	; 0xd80 <display+0xd8>
		str[i++] = '0' + digit;
     d6e:	e1 e0       	ldi	r30, 0x01	; 1
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	ec 0f       	add	r30, r28
     d74:	fd 1f       	adc	r31, r29
     d76:	e2 0d       	add	r30, r2
     d78:	f1 1d       	adc	r31, r1
     d7a:	20 5d       	subi	r18, 0xD0	; 208
     d7c:	20 83       	st	Z, r18
     d7e:	08 c0       	rjmp	.+16     	; 0xd90 <display+0xe8>
		else
		str[i++] = 'A' + digit - 0xA;
     d80:	e1 e0       	ldi	r30, 0x01	; 1
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	ec 0f       	add	r30, r28
     d86:	fd 1f       	adc	r31, r29
     d88:	e2 0d       	add	r30, r2
     d8a:	f1 1d       	adc	r31, r1
     d8c:	29 5c       	subi	r18, 0xC9	; 201
     d8e:	20 83       	st	Z, r18
		sum /= 10;
     d90:	0f 2e       	mov	r0, r31
     d92:	fa e0       	ldi	r31, 0x0A	; 10
     d94:	af 2e       	mov	r10, r31
     d96:	f0 2d       	mov	r31, r0
     d98:	b1 2c       	mov	r11, r1
     d9a:	c1 2c       	mov	r12, r1
     d9c:	d1 2c       	mov	r13, r1
     d9e:	e1 2c       	mov	r14, r1
     da0:	f1 2c       	mov	r15, r1
     da2:	00 e0       	ldi	r16, 0x00	; 0
     da4:	10 e0       	ldi	r17, 0x00	; 0
     da6:	29 89       	ldd	r18, Y+17	; 0x11
     da8:	3a 89       	ldd	r19, Y+18	; 0x12
     daa:	48 2d       	mov	r20, r8
     dac:	57 2d       	mov	r21, r7
     dae:	66 2d       	mov	r22, r6
     db0:	75 2d       	mov	r23, r5
     db2:	84 2d       	mov	r24, r4
     db4:	93 2d       	mov	r25, r3
     db6:	0e 94 05 0a 	call	0x140a	; 0x140a <__divdi3>
     dba:	29 8b       	std	Y+17, r18	; 0x11
     dbc:	3a 8b       	std	Y+18, r19	; 0x12
     dbe:	84 2e       	mov	r8, r20
     dc0:	75 2e       	mov	r7, r21
     dc2:	66 2e       	mov	r6, r22
     dc4:	57 2e       	mov	r5, r23
     dc6:	48 2e       	mov	r4, r24
     dc8:	39 2e       	mov	r3, r25
     dca:	e1 e0       	ldi	r30, 0x01	; 1
     dcc:	e9 0d       	add	r30, r9
	}
	while (sum > 0);
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <__cmpdi2_s8>
     dd4:	11 f0       	breq	.+4      	; 0xdda <display+0x132>
     dd6:	0c f0       	brlt	.+2      	; 0xdda <display+0x132>
     dd8:	af cf       	rjmp	.-162    	; 0xd38 <display+0x90>

	if(Negative) str[i]='-';
     dda:	2b 89       	ldd	r18, Y+19	; 0x13
     ddc:	22 23       	and	r18, r18
     dde:	29 f0       	breq	.+10     	; 0xdea <display+0x142>
     de0:	8d e2       	ldi	r24, 0x2D	; 45
     de2:	fe 01       	movw	r30, r28
     de4:	e9 0d       	add	r30, r9
     de6:	f1 1d       	adc	r31, r1
     de8:	81 83       	std	Z+1, r24	; 0x01
	i++;
	str[i] = '\0';
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	89 0d       	add	r24, r9
     dee:	e1 e0       	ldi	r30, 0x01	; 1
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	ec 0f       	add	r30, r28
     df4:	fd 1f       	adc	r31, r29
     df6:	e8 0f       	add	r30, r24
     df8:	f1 1d       	adc	r31, r1
     dfa:	10 82       	st	Z, r1
	strrev(str);
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	0e 94 07 0b 	call	0x160e	; 0x160e <strrev>
	Negative=0;
	
	lcd_gotoxy (1,1);
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	0e 94 78 09 	call	0x12f0	; 0x12f0 <lcd_gotoxy>
	lcd_write_string(str);
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     e14:	8f e3       	ldi	r24, 0x3F	; 63
     e16:	9d e0       	ldi	r25, 0x0D	; 13
     e18:	23 e0       	ldi	r18, 0x03	; 3
     e1a:	81 50       	subi	r24, 0x01	; 1
     e1c:	90 40       	sbci	r25, 0x00	; 0
     e1e:	20 40       	sbci	r18, 0x00	; 0
     e20:	e1 f7       	brne	.-8      	; 0xe1a <display+0x172>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <display+0x17c>
     e24:	00 00       	nop
	_delay_ms(1000);
	
	return Reset;
}
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	63 96       	adiw	r28, 0x13	; 19
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	bf 90       	pop	r11
     e46:	af 90       	pop	r10
     e48:	9f 90       	pop	r9
     e4a:	8f 90       	pop	r8
     e4c:	7f 90       	pop	r7
     e4e:	6f 90       	pop	r6
     e50:	5f 90       	pop	r5
     e52:	4f 90       	pop	r4
     e54:	3f 90       	pop	r3
     e56:	2f 90       	pop	r2
     e58:	08 95       	ret

00000e5a <Resetall>:


uint8  Resetall()
{
     e5a:	ec e7       	ldi	r30, 0x7C	; 124
     e5c:	f1 e0       	ldi	r31, 0x01	; 1
     e5e:	8c e8       	ldi	r24, 0x8C	; 140
     e60:	91 e0       	ldi	r25, 0x01	; 1
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
	Digits[index]=0;
     e62:	11 92       	st	Z+, r1


uint8  Resetall()
{
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
     e64:	8e 17       	cp	r24, r30
     e66:	9f 07       	cpc	r25, r31
     e68:	e1 f7       	brne	.-8      	; 0xe62 <Resetall+0x8>
     e6a:	ec e1       	ldi	r30, 0x1C	; 28
     e6c:	f1 e0       	ldi	r31, 0x01	; 1
     e6e:	8c e7       	ldi	r24, 0x7C	; 124
     e70:	91 e0       	ldi	r25, 0x01	; 1
	Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
	Operands[index]=0;
     e72:	10 82       	st	Z, r1
     e74:	11 82       	std	Z+1, r1	; 0x01
     e76:	12 82       	std	Z+2, r1	; 0x02
     e78:	13 82       	std	Z+3, r1	; 0x03
     e7a:	14 82       	std	Z+4, r1	; 0x04
     e7c:	15 82       	std	Z+5, r1	; 0x05
     e7e:	16 82       	std	Z+6, r1	; 0x06
     e80:	17 82       	std	Z+7, r1	; 0x07
     e82:	38 96       	adiw	r30, 0x08	; 8
uint8  Resetall()
{
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
	Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
     e84:	8e 17       	cp	r24, r30
     e86:	9f 07       	cpc	r25, r31
     e88:	a1 f7       	brne	.-24     	; 0xe72 <Resetall+0x18>
     e8a:	ec e8       	ldi	r30, 0x8C	; 140
     e8c:	f1 e0       	ldi	r31, 0x01	; 1
     e8e:	87 e9       	ldi	r24, 0x97	; 151
     e90:	91 e0       	ldi	r25, 0x01	; 1
	Operands[index]=0;
	for(index=0;index<MaxNumberOfOperations;index++)
	Operations[index]=0;
     e92:	11 92       	st	Z+, r1
	uint8 index=0;
	for(index=0;index<MaxNumberOfDigits;index++)
	Digits[index]=0;
	for(index=0;index<MaxNumberOfOperands;index++)
	Operands[index]=0;
	for(index=0;index<MaxNumberOfOperations;index++)
     e94:	8e 17       	cp	r24, r30
     e96:	9f 07       	cpc	r25, r31
     e98:	e1 f7       	brne	.-8      	; 0xe92 <Resetall+0x38>
	Operations[index]=0;
	OperandsCounter=0;
     e9a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <OperandsCounter>
	OperationsCounter=0;
     e9e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <OperationsCounter>
	DigitsCounter=0;
     ea2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <DigitsCounter>
	Result=0;
     ea6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <Result>
     eaa:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Result+0x1>
     eae:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Result+0x2>
     eb2:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Result+0x3>
     eb6:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Result+0x4>
     eba:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Result+0x5>
     ebe:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Result+0x6>
     ec2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Result+0x7>
	while(keypad_scan()==0){}
     ec6:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <keypad_scan>
     eca:	88 23       	and	r24, r24
     ecc:	e1 f3       	breq	.-8      	; 0xec6 <Resetall+0x6c>
	lcd_clearDisplay();
     ece:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
	return StartPoint;
}
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	08 95       	ret

00000ed6 <main>:
#include "calculator.h"


int main(void)
{
    keypad_init();
     ed6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <keypad_init>
	lcd_init();
     eda:	0e 94 25 09 	call	0x124a	; 0x124a <lcd_init>
	lcd_write_string("University of Moratuwa");
     ede:	8a e7       	ldi	r24, 0x7A	; 122
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     ee6:	2f ed       	ldi	r18, 0xDF	; 223
     ee8:	83 e9       	ldi	r24, 0x93	; 147
     eea:	94 e0       	ldi	r25, 0x04	; 4
     eec:	21 50       	subi	r18, 0x01	; 1
     eee:	80 40       	sbci	r24, 0x00	; 0
     ef0:	90 40       	sbci	r25, 0x00	; 0
     ef2:	e1 f7       	brne	.-8      	; 0xeec <main+0x16>
     ef4:	00 c0       	rjmp	.+0      	; 0xef6 <main+0x20>
     ef6:	00 00       	nop
	_delay_ms(1500);
	lcd_clearDisplay();
     ef8:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
	lcd_write_string("Group 30 Project");
     efc:	81 e9       	ldi	r24, 0x91	; 145
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     f04:	2f ed       	ldi	r18, 0xDF	; 223
     f06:	83 e9       	ldi	r24, 0x93	; 147
     f08:	94 e0       	ldi	r25, 0x04	; 4
     f0a:	21 50       	subi	r18, 0x01	; 1
     f0c:	80 40       	sbci	r24, 0x00	; 0
     f0e:	90 40       	sbci	r25, 0x00	; 0
     f10:	e1 f7       	brne	.-8      	; 0xf0a <main+0x34>
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <main+0x3e>
     f14:	00 00       	nop
	_delay_ms(1500);
	lcd_clearDisplay();
     f16:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
	lcd_write_string("Automated latex mixer");
     f1a:	82 ea       	ldi	r24, 0xA2	; 162
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     f22:	2f ed       	ldi	r18, 0xDF	; 223
     f24:	83 e9       	ldi	r24, 0x93	; 147
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	80 40       	sbci	r24, 0x00	; 0
     f2c:	90 40       	sbci	r25, 0x00	; 0
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <main+0x52>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <main+0x5c>
     f32:	00 00       	nop
	_delay_ms(1500);
	lcd_clearDisplay();
     f34:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
	lcd_write_string("Keypad and PH sensor by Nimash");
     f38:	88 eb       	ldi	r24, 0xB8	; 184
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     f40:	2f ed       	ldi	r18, 0xDF	; 223
     f42:	83 e9       	ldi	r24, 0x93	; 147
     f44:	94 e0       	ldi	r25, 0x04	; 4
     f46:	21 50       	subi	r18, 0x01	; 1
     f48:	80 40       	sbci	r24, 0x00	; 0
     f4a:	90 40       	sbci	r25, 0x00	; 0
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <main+0x70>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <main+0x7a>
     f50:	00 00       	nop
	_delay_ms(1500);
	lcd_clearDisplay();
     f52:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
	lcd_write_string("Enter the Number of Trays");
     f56:	87 ed       	ldi	r24, 0xD7	; 215
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     f5e:	2f ed       	ldi	r18, 0xDF	; 223
     f60:	83 e9       	ldi	r24, 0x93	; 147
     f62:	94 e0       	ldi	r25, 0x04	; 4
     f64:	21 50       	subi	r18, 0x01	; 1
     f66:	80 40       	sbci	r24, 0x00	; 0
     f68:	90 40       	sbci	r25, 0x00	; 0
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <main+0x8e>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <main+0x98>
     f6e:	00 00       	nop
	_delay_ms(1500);
	lcd_clearDisplay();
     f70:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
	lcd_write_string("Enter the Volume of the tray");
     f74:	81 ef       	ldi	r24, 0xF1	; 241
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 fe 08 	call	0x11fc	; 0x11fc <lcd_write_string>
     f7c:	2f ed       	ldi	r18, 0xDF	; 223
     f7e:	83 e9       	ldi	r24, 0x93	; 147
     f80:	94 e0       	ldi	r25, 0x04	; 4
     f82:	21 50       	subi	r18, 0x01	; 1
     f84:	80 40       	sbci	r24, 0x00	; 0
     f86:	90 40       	sbci	r25, 0x00	; 0
     f88:	e1 f7       	brne	.-8      	; 0xf82 <main+0xac>
     f8a:	00 c0       	rjmp	.+0      	; 0xf8c <main+0xb6>
     f8c:	00 00       	nop
	_delay_ms(1500);
	lcd_clearDisplay();
     f8e:	0e 94 85 09 	call	0x130a	; 0x130a <lcd_clearDisplay>
    uint8 Flag;
 
    while (1) 
    {
		Flag=StartPoint;
		while(Flag==StartPoint)		{   Flag=getdata();	  }
     f92:	0e 94 49 00 	call	0x92	; 0x92 <getdata>
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	e1 f3       	breq	.-8      	; 0xf92 <main+0xbc>
		while(Flag==AnalyzePoint)	{   Flag=analyze();	  }
     f9a:	82 30       	cpi	r24, 0x02	; 2
     f9c:	21 f4       	brne	.+8      	; 0xfa6 <main+0xd0>
     f9e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <analyze>
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	e1 f3       	breq	.-8      	; 0xf9e <main+0xc8>
		while(Flag==CalculatePoint)	{   Flag=calculate(); }
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	21 f4       	brne	.+8      	; 0xfb2 <main+0xdc>
     faa:	0e 94 54 02 	call	0x4a8	; 0x4a8 <calculate>
     fae:	83 30       	cpi	r24, 0x03	; 3
     fb0:	e1 f3       	breq	.-8      	; 0xfaa <main+0xd4>
		while(Flag==DisplayPoint)	{   Flag=display();	  }
     fb2:	84 30       	cpi	r24, 0x04	; 4
     fb4:	21 f4       	brne	.+8      	; 0xfbe <main+0xe8>
     fb6:	0e 94 54 06 	call	0xca8	; 0xca8 <display>
     fba:	84 30       	cpi	r24, 0x04	; 4
     fbc:	e1 f3       	breq	.-8      	; 0xfb6 <main+0xe0>
		while(Flag==Reset)			{   Flag=Resetall();  }
     fbe:	81 11       	cpse	r24, r1
     fc0:	e8 cf       	rjmp	.-48     	; 0xf92 <main+0xbc>
     fc2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <Resetall>
     fc6:	88 23       	and	r24, r24
     fc8:	e1 f3       	breq	.-8      	; 0xfc2 <main+0xec>
     fca:	e3 cf       	rjmp	.-58     	; 0xf92 <main+0xbc>

00000fcc <keypad_init>:
 #include "keypad.h"

 void keypad_init(void)
 {
 //setting ROWs as outputs
	ROW0_DDR |=(1U<<ROW0);  
     fcc:	88 9a       	sbi	0x11, 0	; 17
	ROW1_DDR |=(1U<<ROW1);
     fce:	89 9a       	sbi	0x11, 1	; 17
	ROW2_DDR |=(1U<<ROW2);
     fd0:	8a 9a       	sbi	0x11, 2	; 17
	ROW3_DDR |=(1U<<ROW3);
     fd2:	8b 9a       	sbi	0x11, 3	; 17
//setting pins as input
	LINE0_DDR&=~(1U<<LINE0);
     fd4:	8c 98       	cbi	0x11, 4	; 17
	LINE1_DDR&=~(1U<<LINE1);
     fd6:	8d 98       	cbi	0x11, 5	; 17
	LINE2_DDR&=~(1U<<LINE2);
     fd8:	8e 98       	cbi	0x11, 6	; 17
	LINE3_DDR&=~(1U<<LINE3);
     fda:	8f 98       	cbi	0x11, 7	; 17
//enabling lines pull up
	LINE0_PULLUP|=(1U<<LINE0);
     fdc:	94 9a       	sbi	0x12, 4	; 18
	LINE1_PULLUP|=(1U<<LINE1);
     fde:	95 9a       	sbi	0x12, 5	; 18
	LINE2_PULLUP|=(1U<<LINE2);
     fe0:	96 9a       	sbi	0x12, 6	; 18
	LINE3_PULLUP|=(1U<<LINE3);
     fe2:	97 9a       	sbi	0x12, 7	; 18
     fe4:	08 95       	ret

00000fe6 <keypad_scan>:
 }
 uint8_t keypad_scan(void)
 {
     fe6:	4f 92       	push	r4
     fe8:	5f 92       	push	r5
     fea:	6f 92       	push	r6
     fec:	7f 92       	push	r7
     fee:	8f 92       	push	r8
     ff0:	9f 92       	push	r9
     ff2:	af 92       	push	r10
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
 uint8_t row,key,shift;
 //loop on rows
	 for(row=0;row<4;row++)
    1002:	10 e0       	ldi	r17, 0x00	; 0
	 {
	 //put 1's on all rows
	 ROW0_PORT|=(1U<<ROW0);
    1004:	90 9a       	sbi	0x12, 0	; 18
	 ROW1_PORT|=(1U<<ROW1);
    1006:	91 9a       	sbi	0x12, 1	; 18
	 ROW2_PORT|=(1U<<ROW2);
    1008:	92 9a       	sbi	0x12, 2	; 18
	 ROW3_PORT|=(1U<<ROW3);
    100a:	93 9a       	sbi	0x12, 3	; 18
	 //put zero on the selected row
		 if(row==0)
    100c:	11 11       	cpse	r17, r1
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <keypad_scan+0x2e>
		 {
			ROW0_PORT&=~(1U<<ROW0);
    1010:	90 98       	cbi	0x12, 0	; 18
    1012:	09 c0       	rjmp	.+18     	; 0x1026 <keypad_scan+0x40>
		 }
		 else if(row==1)
    1014:	11 30       	cpi	r17, 0x01	; 1
    1016:	11 f4       	brne	.+4      	; 0x101c <keypad_scan+0x36>
		 {
			ROW1_PORT&=~(1U<<ROW1);
    1018:	91 98       	cbi	0x12, 1	; 18
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <keypad_scan+0x40>
		 }
		 else if(row==2)
    101c:	12 30       	cpi	r17, 0x02	; 2
    101e:	11 f4       	brne	.+4      	; 0x1024 <keypad_scan+0x3e>
		 {
			 ROW2_PORT&=~(1U<<ROW2);
    1020:	92 98       	cbi	0x12, 2	; 18
    1022:	01 c0       	rjmp	.+2      	; 0x1026 <keypad_scan+0x40>
		 }
		 else 
		 {
			ROW3_PORT&=~(1U<<ROW3);	 
    1024:	93 98       	cbi	0x12, 3	; 18
		 }
	 //take snapshot from the input
	 shift  = (LINE0_PIN&(1U<<LINE0))>>LINE0;
    1026:	a0 b2       	in	r10, 0x10	; 16
	 key  = (shift<<0);
	 shift  = (LINE1_PIN&(1U<<LINE1))>>LINE1;
    1028:	70 b2       	in	r7, 0x10	; 16
	 key  |= (shift<<1);
	 shift  = (LINE2_PIN&(1U<<LINE2))>>LINE2;
    102a:	80 b2       	in	r8, 0x10	; 16
	 key  |= (shift<<2);
	 shift  = (LINE3_PIN&(1U<<LINE3))>>LINE3;
    102c:	90 b2       	in	r9, 0x10	; 16
	 key=key<<4; //0x0000xxxx
	 //if there is input
	 //0xF0&LINE0|LINE1|LINE2|LINE3
	 //PIND&0x0f !=0x0f
		
		if(ALL_LINES != 1)
    102e:	c0 b3       	in	r28, 0x10	; 16
    1030:	90 b3       	in	r25, 0x10	; 16
    1032:	60 b2       	in	r6, 0x10	; 16
    1034:	80 b3       	in	r24, 0x10	; 16
    1036:	c4 fb       	bst	r28, 4
    1038:	44 27       	eor	r20, r20
    103a:	40 f9       	bld	r20, 0
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	95 fb       	bst	r25, 5
    1040:	66 27       	eor	r22, r22
    1042:	60 f9       	bld	r22, 0
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	ea 01       	movw	r28, r20
    1048:	c6 23       	and	r28, r22
    104a:	d7 23       	and	r29, r23
    104c:	88 1f       	adc	r24, r24
    104e:	88 27       	eor	r24, r24
    1050:	88 1f       	adc	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	8c 23       	and	r24, r28
    1056:	9d 23       	and	r25, r29
    1058:	66 fa       	bst	r6, 6
    105a:	ee 27       	eor	r30, r30
    105c:	e0 f9       	bld	r30, 0
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	8e 23       	and	r24, r30
    1062:	9f 23       	and	r25, r31
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	f1 f0       	breq	.+60     	; 0x10a4 <keypad_scan+0xbe>
		{
		//delay for the input to be cleared
		while(ALL_LINES != 1);
    1068:	40 b3       	in	r20, 0x10	; 16
    106a:	90 b3       	in	r25, 0x10	; 16
    106c:	60 b3       	in	r22, 0x10	; 16
    106e:	80 b3       	in	r24, 0x10	; 16
    1070:	44 fb       	bst	r20, 4
    1072:	44 24       	eor	r4, r4
    1074:	40 f8       	bld	r4, 0
    1076:	51 2c       	mov	r5, r1
    1078:	95 fb       	bst	r25, 5
    107a:	ee 24       	eor	r14, r14
    107c:	e0 f8       	bld	r14, 0
    107e:	f1 2c       	mov	r15, r1
    1080:	a2 01       	movw	r20, r4
    1082:	4e 21       	and	r20, r14
    1084:	5f 21       	and	r21, r15
    1086:	88 1f       	adc	r24, r24
    1088:	88 27       	eor	r24, r24
    108a:	88 1f       	adc	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	84 23       	and	r24, r20
    1090:	95 23       	and	r25, r21
    1092:	66 fb       	bst	r22, 6
    1094:	cc 24       	eor	r12, r12
    1096:	c0 f8       	bld	r12, 0
    1098:	d1 2c       	mov	r13, r1
    109a:	8c 21       	and	r24, r12
    109c:	9d 21       	and	r25, r13
    109e:	01 97       	sbiw	r24, 0x01	; 1
    10a0:	19 f7       	brne	.-58     	; 0x1068 <keypad_scan+0x82>
    10a2:	04 c0       	rjmp	.+8      	; 0x10ac <keypad_scan+0xc6>
 }
 uint8_t keypad_scan(void)
 {
 uint8_t row,key,shift;
 //loop on rows
	 for(row=0;row<4;row++)
    10a4:	1f 5f       	subi	r17, 0xFF	; 255
    10a6:	14 30       	cpi	r17, 0x04	; 4
    10a8:	09 f0       	breq	.+2      	; 0x10ac <keypad_scan+0xc6>
    10aa:	ac cf       	rjmp	.-168    	; 0x1004 <keypad_scan+0x1e>
	 shift  = (LINE1_PIN&(1U<<LINE1))>>LINE1;
	 key  |= (shift<<1);
	 shift  = (LINE2_PIN&(1U<<LINE2))>>LINE2;
	 key  |= (shift<<2);
	 shift  = (LINE3_PIN&(1U<<LINE3))>>LINE3;
	 key  |= (shift<<3);
    10ac:	a4 fa       	bst	r10, 4
    10ae:	aa 24       	eor	r10, r10
    10b0:	a0 f8       	bld	r10, 0
    10b2:	99 1c       	adc	r9, r9
    10b4:	99 24       	eor	r9, r9
    10b6:	99 1c       	adc	r9, r9
    10b8:	99 0c       	add	r9, r9
    10ba:	99 0c       	add	r9, r9
    10bc:	99 0c       	add	r9, r9
    10be:	a9 28       	or	r10, r9
    10c0:	75 fa       	bst	r7, 5
    10c2:	aa 27       	eor	r26, r26
    10c4:	a0 f9       	bld	r26, 0
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	aa 0f       	add	r26, r26
    10ca:	bb 1f       	adc	r27, r27
    10cc:	aa 29       	or	r26, r10
    10ce:	86 fa       	bst	r8, 6
    10d0:	22 27       	eor	r18, r18
    10d2:	20 f9       	bld	r18, 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	22 0f       	add	r18, r18
    10d8:	33 1f       	adc	r19, r19
    10da:	22 0f       	add	r18, r18
    10dc:	33 1f       	adc	r19, r19
    10de:	2a 2b       	or	r18, r26
	 key=key<<4; //0x0000xxxx
    10e0:	22 95       	swap	r18
    10e2:	20 7f       	andi	r18, 0xF0	; 240
		break;
		}
 
	 }
 //when break switch rows
	switch(row)
    10e4:	11 30       	cpi	r17, 0x01	; 1
    10e6:	d1 f0       	breq	.+52     	; 0x111c <keypad_scan+0x136>
    10e8:	28 f0       	brcs	.+10     	; 0x10f4 <keypad_scan+0x10e>
    10ea:	12 30       	cpi	r17, 0x02	; 2
    10ec:	51 f1       	breq	.+84     	; 0x1142 <keypad_scan+0x15c>
    10ee:	13 30       	cpi	r17, 0x03	; 3
    10f0:	d9 f1       	breq	.+118    	; 0x1168 <keypad_scan+0x182>
    10f2:	4d c0       	rjmp	.+154    	; 0x118e <keypad_scan+0x1a8>
	{
		case 0:
		//inside the row switching switch the key
		switch(key)
    10f4:	20 3b       	cpi	r18, 0xB0	; 176
    10f6:	51 f0       	breq	.+20     	; 0x110c <keypad_scan+0x126>
    10f8:	20 f4       	brcc	.+8      	; 0x1102 <keypad_scan+0x11c>
    10fa:	20 37       	cpi	r18, 0x70	; 112
    10fc:	09 f4       	brne	.+2      	; 0x1100 <keypad_scan+0x11a>
    10fe:	49 c0       	rjmp	.+146    	; 0x1192 <keypad_scan+0x1ac>
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <keypad_scan+0x12a>
    1102:	20 3d       	cpi	r18, 0xD0	; 208
    1104:	39 f0       	breq	.+14     	; 0x1114 <keypad_scan+0x12e>
    1106:	20 3e       	cpi	r18, 0xE0	; 224
    1108:	39 f0       	breq	.+14     	; 0x1118 <keypad_scan+0x132>
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <keypad_scan+0x12a>
		{
			case 0x70: return 'E';
			case 0xB0: return '9';
    110c:	89 e3       	ldi	r24, 0x39	; 57
    110e:	48 c0       	rjmp	.+144    	; 0x11a0 <keypad_scan+0x1ba>
			case 0xE0: return 'C';
		}
		break;
	}
	//return the value
	return 0;
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	46 c0       	rjmp	.+140    	; 0x11a0 <keypad_scan+0x1ba>
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return 'E';
			case 0xB0: return '9';
			case 0xD0: return '8';
    1114:	88 e3       	ldi	r24, 0x38	; 56
    1116:	44 c0       	rjmp	.+136    	; 0x11a0 <keypad_scan+0x1ba>
			case 0xE0: return '7';
    1118:	87 e3       	ldi	r24, 0x37	; 55
    111a:	42 c0       	rjmp	.+132    	; 0x11a0 <keypad_scan+0x1ba>
		}
		break;
		case 1:
		//inside the row switching switch the key
		switch(key)
    111c:	20 3b       	cpi	r18, 0xB0	; 176
    111e:	49 f0       	breq	.+18     	; 0x1132 <keypad_scan+0x14c>
    1120:	18 f4       	brcc	.+6      	; 0x1128 <keypad_scan+0x142>
    1122:	20 37       	cpi	r18, 0x70	; 112
    1124:	c1 f1       	breq	.+112    	; 0x1196 <keypad_scan+0x1b0>
    1126:	07 c0       	rjmp	.+14     	; 0x1136 <keypad_scan+0x150>
    1128:	20 3d       	cpi	r18, 0xD0	; 208
    112a:	39 f0       	breq	.+14     	; 0x113a <keypad_scan+0x154>
    112c:	20 3e       	cpi	r18, 0xE0	; 224
    112e:	39 f0       	breq	.+14     	; 0x113e <keypad_scan+0x158>
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <keypad_scan+0x150>
		{
			case 0x70: return 'A';
			case 0xB0: return '6';
    1132:	86 e3       	ldi	r24, 0x36	; 54
    1134:	35 c0       	rjmp	.+106    	; 0x11a0 <keypad_scan+0x1ba>
			case 0xE0: return 'C';
		}
		break;
	}
	//return the value
	return 0;
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	33 c0       	rjmp	.+102    	; 0x11a0 <keypad_scan+0x1ba>
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return 'A';
			case 0xB0: return '6';
			case 0xD0: return '5';
    113a:	85 e3       	ldi	r24, 0x35	; 53
    113c:	31 c0       	rjmp	.+98     	; 0x11a0 <keypad_scan+0x1ba>
			case 0xE0: return '4';
    113e:	84 e3       	ldi	r24, 0x34	; 52
    1140:	2f c0       	rjmp	.+94     	; 0x11a0 <keypad_scan+0x1ba>
		}
		break;
		case 2:
		//inside the row switching switch the key
		switch(key)
    1142:	20 3b       	cpi	r18, 0xB0	; 176
    1144:	49 f0       	breq	.+18     	; 0x1158 <keypad_scan+0x172>
    1146:	18 f4       	brcc	.+6      	; 0x114e <keypad_scan+0x168>
    1148:	20 37       	cpi	r18, 0x70	; 112
    114a:	39 f1       	breq	.+78     	; 0x119a <keypad_scan+0x1b4>
    114c:	07 c0       	rjmp	.+14     	; 0x115c <keypad_scan+0x176>
    114e:	20 3d       	cpi	r18, 0xD0	; 208
    1150:	39 f0       	breq	.+14     	; 0x1160 <keypad_scan+0x17a>
    1152:	20 3e       	cpi	r18, 0xE0	; 224
    1154:	39 f0       	breq	.+14     	; 0x1164 <keypad_scan+0x17e>
    1156:	02 c0       	rjmp	.+4      	; 0x115c <keypad_scan+0x176>
		{
			case 0x70: return 'B';
			case 0xB0: return '3';
    1158:	83 e3       	ldi	r24, 0x33	; 51
    115a:	22 c0       	rjmp	.+68     	; 0x11a0 <keypad_scan+0x1ba>
			case 0xE0: return 'C';
		}
		break;
	}
	//return the value
	return 0;
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	20 c0       	rjmp	.+64     	; 0x11a0 <keypad_scan+0x1ba>
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return 'B';
			case 0xB0: return '3';
			case 0xD0: return '2';
    1160:	82 e3       	ldi	r24, 0x32	; 50
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <keypad_scan+0x1ba>
			case 0xE0: return '1';
    1164:	81 e3       	ldi	r24, 0x31	; 49
    1166:	1c c0       	rjmp	.+56     	; 0x11a0 <keypad_scan+0x1ba>
			
		}
		break;
		case 3:
		//inside the row switching switch the key
		switch(key)
    1168:	20 3b       	cpi	r18, 0xB0	; 176
    116a:	49 f0       	breq	.+18     	; 0x117e <keypad_scan+0x198>
    116c:	18 f4       	brcc	.+6      	; 0x1174 <keypad_scan+0x18e>
    116e:	20 37       	cpi	r18, 0x70	; 112
    1170:	b1 f0       	breq	.+44     	; 0x119e <keypad_scan+0x1b8>
    1172:	07 c0       	rjmp	.+14     	; 0x1182 <keypad_scan+0x19c>
    1174:	20 3d       	cpi	r18, 0xD0	; 208
    1176:	39 f0       	breq	.+14     	; 0x1186 <keypad_scan+0x1a0>
    1178:	20 3e       	cpi	r18, 0xE0	; 224
    117a:	39 f0       	breq	.+14     	; 0x118a <keypad_scan+0x1a4>
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <keypad_scan+0x19c>
		{
			case 0x70: return '+';
			case 0xB0: return '=';
    117e:	8d e3       	ldi	r24, 0x3D	; 61
    1180:	0f c0       	rjmp	.+30     	; 0x11a0 <keypad_scan+0x1ba>
			case 0xE0: return 'C';
		}
		break;
	}
	//return the value
	return 0;
    1182:	80 e0       	ldi	r24, 0x00	; 0
    1184:	0d c0       	rjmp	.+26     	; 0x11a0 <keypad_scan+0x1ba>
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
			case 0xD0: return '0';
    1186:	80 e3       	ldi	r24, 0x30	; 48
    1188:	0b c0       	rjmp	.+22     	; 0x11a0 <keypad_scan+0x1ba>
			case 0xE0: return 'C';
    118a:	83 e4       	ldi	r24, 0x43	; 67
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <keypad_scan+0x1ba>
		}
		break;
	}
	//return the value
	return 0;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <keypad_scan+0x1ba>
	{
		case 0:
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return 'E';
    1192:	85 e4       	ldi	r24, 0x45	; 69
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <keypad_scan+0x1ba>
		break;
		case 1:
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return 'A';
    1196:	81 e4       	ldi	r24, 0x41	; 65
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <keypad_scan+0x1ba>
		break;
		case 2:
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return 'B';
    119a:	82 e4       	ldi	r24, 0x42	; 66
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <keypad_scan+0x1ba>
		break;
		case 3:
		//inside the row switching switch the key
		switch(key)
		{
			case 0x70: return '+';
    119e:	8b e2       	ldi	r24, 0x2B	; 43
		}
		break;
	}
	//return the value
	return 0;
  }
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	ff 90       	pop	r15
    11a8:	ef 90       	pop	r14
    11aa:	df 90       	pop	r13
    11ac:	cf 90       	pop	r12
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	5f 90       	pop	r5
    11ba:	4f 90       	pop	r4
    11bc:	08 95       	ret

000011be <lcd_write>:
    lcd_write(command << 4);                  // write the lower 4-bits of the data
}

void lcd_write(char Byte)
{
	LCD_PORT_D7 &= ~(1<<D7_BIT);                        // assume that data is '0'
    11be:	c7 98       	cbi	0x18, 7	; 24
    
	if (Byte & (1U<<D7_BIT))
    11c0:	88 23       	and	r24, r24
    11c2:	0c f4       	brge	.+2      	; 0x11c6 <lcd_write+0x8>
	{
		LCD_PORT_D7 |= (1<<D7_BIT);					 // make data = '1' if necessary
    11c4:	c7 9a       	sbi	0x18, 7	; 24
	}
	LCD_PORT_D6 &= ~(1<<D6_BIT);                        // repeat for each data bit
    11c6:	c6 98       	cbi	0x18, 6	; 24
    
	if (Byte & (1U<<D6_BIT))
    11c8:	86 fd       	sbrc	r24, 6
	{
		 LCD_PORT_D6 |= (1U<<D6_BIT);
    11ca:	c6 9a       	sbi	0x18, 6	; 24
	}
    LCD_PORT_D5 &= ~(1U<<D5_BIT);
    11cc:	c5 98       	cbi	0x18, 5	; 24
    
	if (Byte & (1U<<D5_BIT))
    11ce:	85 fd       	sbrc	r24, 5
	{ 
		LCD_PORT_D5 |= (1U<<D5_BIT);
    11d0:	c5 9a       	sbi	0x18, 5	; 24
	}
    LCD_PORT_D4 &= ~(1U<<D4_BIT);
    11d2:	c4 98       	cbi	0x18, 4	; 24
    
	if (Byte & (1U<<D4_BIT))
    11d4:	84 fd       	sbrc	r24, 4
	{ 
		LCD_PORT_D4 |= (1U<<D4_BIT);
    11d6:	c4 9a       	sbi	0x18, 4	; 24
	}
// write the data
                                                    // 'Address set-up time' (40 nS)
    E_PORT |= (1U<<E_BIT);							// Enable pin high
    11d8:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11da:	00 00       	nop
    _delay_us(1);                                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    E_PORT &= ~(1U<<E_BIT);							// Enable pin low
    11dc:	c1 98       	cbi	0x18, 1	; 24
    11de:	00 00       	nop
    11e0:	08 95       	ret

000011e2 <lcd_write_character>:
    }
}


void lcd_write_character(char Data)
{
    11e2:	cf 93       	push	r28
    11e4:	c8 2f       	mov	r28, r24
	RS_PORT |= (1U<<RS_BIT);                  // select the Data Register (RS high)
    11e6:	c0 9a       	sbi	0x18, 0	; 24
    E_PORT  &= ~(1U<<E_BIT);                  // make sure E is initially low
    11e8:	c1 98       	cbi	0x18, 1	; 24
    lcd_write(Data);						  // write the upper 4-bits of the data
    11ea:	0e 94 df 08 	call	0x11be	; 0x11be <lcd_write>
    lcd_write(Data << 4);					  // write the lower 4-bits of the data
    11ee:	8c 2f       	mov	r24, r28
    11f0:	82 95       	swap	r24
    11f2:	80 7f       	andi	r24, 0xF0	; 240
    11f4:	0e 94 df 08 	call	0x11be	; 0x11be <lcd_write>
}
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <lcd_write_string>:
    _delay_us(80);                                // 40uS delay (min)
}


void lcd_write_string(char *string)
{
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	fc 01       	movw	r30, r24
	char i = 0;									  // character counter*/
    while (string[i] != '\0')
    1204:	80 81       	ld	r24, Z
    1206:	88 23       	and	r24, r24
    1208:	79 f0       	breq	.+30     	; 0x1228 <lcd_write_string+0x2c>
    120a:	8f 01       	movw	r16, r30
    120c:	c0 e0       	ldi	r28, 0x00	; 0
    {
        lcd_write_character(string[i]);
    120e:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <lcd_write_character>
        i++;
    1212:	cf 5f       	subi	r28, 0xFF	; 255
    1214:	8a e1       	ldi	r24, 0x1A	; 26
    1216:	8a 95       	dec	r24
    1218:	f1 f7       	brne	.-4      	; 0x1216 <lcd_write_string+0x1a>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <lcd_write_string+0x20>


void lcd_write_string(char *string)
{
	char i = 0;									  // character counter*/
    while (string[i] != '\0')
    121c:	f8 01       	movw	r30, r16
    121e:	ec 0f       	add	r30, r28
    1220:	f1 1d       	adc	r31, r1
    1222:	80 81       	ld	r24, Z
    1224:	81 11       	cpse	r24, r1
    1226:	f3 cf       	rjmp	.-26     	; 0x120e <lcd_write_string+0x12>
    {
        lcd_write_character(string[i]);
        i++;
        _delay_us(80);							  // 40 uS delay (min)
    }
}
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	08 95       	ret

00001230 <lcd_write_instruction>:
    lcd_write(Data);						  // write the upper 4-bits of the data
    lcd_write(Data << 4);					  // write the lower 4-bits of the data
}

void lcd_write_instruction(char command)
{
    1230:	cf 93       	push	r28
    1232:	c8 2f       	mov	r28, r24
	RS_PORT &= ~(1U<<RS_BIT);                 // select the Instruction Register (RS low)
    1234:	c0 98       	cbi	0x18, 0	; 24
    E_PORT  &= ~(1U<<E_BIT);                  // make sure E is initially low
    1236:	c1 98       	cbi	0x18, 1	; 24
    lcd_write(command);						  // write the upper 4-bits of the data
    1238:	0e 94 df 08 	call	0x11be	; 0x11be <lcd_write>
    lcd_write(command << 4);                  // write the lower 4-bits of the data
    123c:	8c 2f       	mov	r24, r28
    123e:	82 95       	swap	r24
    1240:	80 7f       	andi	r24, 0xF0	; 240
    1242:	0e 94 df 08 	call	0x11be	; 0x11be <lcd_write>
}
    1246:	cf 91       	pop	r28
    1248:	08 95       	ret

0000124a <lcd_init>:

void lcd_init(void)
{
	
	// configure the microprocessor pins for the data lines
    LCD_DDR_D7 |= (1U<<D7_BIT);                  // 4 data lines - output
    124a:	bf 9a       	sbi	0x17, 7	; 23
    LCD_DDR_D6 |= (1U<<D6_BIT);
    124c:	be 9a       	sbi	0x17, 6	; 23
    LCD_DDR_D5 |= (1U<<D5_BIT);
    124e:	bd 9a       	sbi	0x17, 5	; 23
    LCD_DDR_D4 |= (1U<<D4_BIT);
    1250:	bc 9a       	sbi	0x17, 4	; 23

// configure the microprocessor pins for the control lines
    E_DDR  |= (1U<<E_BIT);                    // E line - output
    1252:	b9 9a       	sbi	0x17, 1	; 23
    RS_DDR |= (1U<<RS_BIT);                   // RS line - output
    1254:	b8 9a       	sbi	0x17, 0	; 23
	RW_DDR |= (1U<<RW_BIT);					  // RW line - output
    1256:	ba 9a       	sbi	0x17, 2	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1258:	87 ea       	ldi	r24, 0xA7	; 167
    125a:	91 e6       	ldi	r25, 0x61	; 97
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	f1 f7       	brne	.-4      	; 0x125c <lcd_init+0x12>
    1260:	00 c0       	rjmp	.+0      	; 0x1262 <lcd_init+0x18>
    1262:	00 00       	nop
   this instruction can be sent on just the four available data lines and it will be interpreted 
   properly by the LCD controller.  The 'lcd_write' subroutine will accomplish this if the 
   control lines have previously been configured properly.
*/
// Set up the RS and E lines for the 'lcd_write' subroutine.
    RS_PORT &= ~(1U<<RS_BIT);					  // select the Instruction Register (RS low)
    1264:	c0 98       	cbi	0x18, 0	; 24
    E_PORT  &= ~(1U<<E_BIT);					  // make sure E is initially low
    1266:	c1 98       	cbi	0x18, 1	; 24

// Reset the LCD controller
    lcd_write(lcd_FunctionReset);                 // first part of reset sequence
    1268:	80 e3       	ldi	r24, 0x30	; 48
    126a:	0e 94 df 08 	call	0x11be	; 0x11be <lcd_write>
    126e:	83 ec       	ldi	r24, 0xC3	; 195
    1270:	99 e0       	ldi	r25, 0x09	; 9
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <lcd_init+0x28>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <lcd_init+0x2e>
    1278:	00 00       	nop
    _delay_ms(10);                                // 4.1 mS delay (min)

    lcd_write(lcd_FunctionReset);                 // second part of reset sequence
    127a:	80 e3       	ldi	r24, 0x30	; 48
    127c:	0e 94 df 08 	call	0x11be	; 0x11be <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1280:	92 e4       	ldi	r25, 0x42	; 66
    1282:	9a 95       	dec	r25
    1284:	f1 f7       	brne	.-4      	; 0x1282 <lcd_init+0x38>
    1286:	00 c0       	rjmp	.+0      	; 0x1288 <lcd_init+0x3e>
    _delay_us(200);                               // 100uS delay (min)

    lcd_write(lcd_FunctionReset);                 // third part of reset sequence
    1288:	80 e3       	ldi	r24, 0x30	; 48
    128a:	0e 94 df 08 	call	0x11be	; 0x11be <lcd_write>
    128e:	82 e4       	ldi	r24, 0x42	; 66
    1290:	8a 95       	dec	r24
    1292:	f1 f7       	brne	.-4      	; 0x1290 <lcd_init+0x46>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <lcd_init+0x4c>
/* Preliminary Function Set instruction - used only to set the 4-bit mode.
 The number of lines or the font cannot be set at this time since the controller is still in the
  8-bit mode, but the data transfer mode can be changed since this parameter is determined by one 
  of the upper four bits of the instruction.
 */
    lcd_write(lcd_FunctionSet4bit);               // set 4-bit mode
    1296:	88 e2       	ldi	r24, 0x28	; 40
    1298:	0e 94 df 08 	call	0x11be	; 0x11be <lcd_write>
    129c:	9a e1       	ldi	r25, 0x1A	; 26
    129e:	9a 95       	dec	r25
    12a0:	f1 f7       	brne	.-4      	; 0x129e <lcd_init+0x54>
    12a2:	00 c0       	rjmp	.+0      	; 0x12a4 <lcd_init+0x5a>
    _delay_us(80);                                // 40uS delay (min)

// Function Set instruction
    lcd_write_instruction(lcd_FunctionSet4bit);   // set mode, lines, and font
    12a4:	88 e2       	ldi	r24, 0x28	; 40
    12a6:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_write_instruction>
    12aa:	8a e1       	ldi	r24, 0x1A	; 26
    12ac:	8a 95       	dec	r24
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <lcd_init+0x62>
    12b0:	00 c0       	rjmp	.+0      	; 0x12b2 <lcd_init+0x68>
  so it is a good idea (but probably not necessary) to do them just as specified and then redo them 
  later if the application requires a different configuration.
*/

// Display On/Off Control instruction
    lcd_write_instruction(lcd_DisplayOff);        // turn display OFF
    12b2:	88 e0       	ldi	r24, 0x08	; 8
    12b4:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_write_instruction>
    12b8:	9a e1       	ldi	r25, 0x1A	; 26
    12ba:	9a 95       	dec	r25
    12bc:	f1 f7       	brne	.-4      	; 0x12ba <lcd_init+0x70>
    12be:	00 c0       	rjmp	.+0      	; 0x12c0 <lcd_init+0x76>
    _delay_us(80);                                // 40uS delay (min)

// Clear Display instruction
    lcd_write_instruction(clearDisplay);          // clear display RAM
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12c6:	87 ee       	ldi	r24, 0xE7	; 231
    12c8:	93 e0       	ldi	r25, 0x03	; 3
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <lcd_init+0x80>
    12ce:	00 c0       	rjmp	.+0      	; 0x12d0 <lcd_init+0x86>
    12d0:	00 00       	nop
    _delay_ms(4);                                 // 1.64 mS delay (min)

//  Entry Mode Set instruction
    lcd_write_instruction(lcd_EntryMode);         // set desired shift characteristics
    12d2:	86 e0       	ldi	r24, 0x06	; 6
    12d4:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12d8:	9a e1       	ldi	r25, 0x1A	; 26
    12da:	9a 95       	dec	r25
    12dc:	f1 f7       	brne	.-4      	; 0x12da <lcd_init+0x90>
    12de:	00 c0       	rjmp	.+0      	; 0x12e0 <lcd_init+0x96>

/* This is the end of the LCD controller initialization as specified in the data sheet, but the display
  has been left in the OFF condition.  This is a good time to turn the display back ON.
 */
// Display On/Off Control instruction
    lcd_write_instruction(lcd_DisplayOn);         // turn the display ON
    12e0:	8c e0       	ldi	r24, 0x0C	; 12
    12e2:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_write_instruction>
    12e6:	8a e1       	ldi	r24, 0x1A	; 26
    12e8:	8a 95       	dec	r24
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <lcd_init+0x9e>
    12ec:	00 c0       	rjmp	.+0      	; 0x12ee <lcd_init+0xa4>
    12ee:	08 95       	ret

000012f0 <lcd_gotoxy>:
}


void lcd_gotoxy (char pos, char line)				//line = 0 or 1	
{
	 lcd_write_instruction((0x80|(line<<6))+pos);
    12f0:	90 e4       	ldi	r25, 0x40	; 64
    12f2:	69 9f       	mul	r22, r25
    12f4:	b0 01       	movw	r22, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	60 68       	ori	r22, 0x80	; 128
    12fa:	86 0f       	add	r24, r22
    12fc:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_write_instruction>
    1300:	80 e1       	ldi	r24, 0x10	; 16
    1302:	8a 95       	dec	r24
    1304:	f1 f7       	brne	.-4      	; 0x1302 <lcd_gotoxy+0x12>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <lcd_gotoxy+0x18>
    1308:	08 95       	ret

0000130a <lcd_clearDisplay>:
	_delay_us (50);
}

void lcd_clearDisplay(void)	 
{
	lcd_write_instruction(clearDisplay);
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	0e 94 18 09 	call	0x1230	; 0x1230 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1310:	83 ef       	ldi	r24, 0xF3	; 243
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <lcd_clearDisplay+0xa>
    1318:	00 c0       	rjmp	.+0      	; 0x131a <lcd_clearDisplay+0x10>
    131a:	00 00       	nop
    131c:	08 95       	ret

0000131e <__mulsi3>:
    131e:	db 01       	movw	r26, r22
    1320:	8f 93       	push	r24
    1322:	9f 93       	push	r25
    1324:	0e 94 9f 09 	call	0x133e	; 0x133e <__muluhisi3>
    1328:	bf 91       	pop	r27
    132a:	af 91       	pop	r26
    132c:	a2 9f       	mul	r26, r18
    132e:	80 0d       	add	r24, r0
    1330:	91 1d       	adc	r25, r1
    1332:	a3 9f       	mul	r26, r19
    1334:	90 0d       	add	r25, r0
    1336:	b2 9f       	mul	r27, r18
    1338:	90 0d       	add	r25, r0
    133a:	11 24       	eor	r1, r1
    133c:	08 95       	ret

0000133e <__muluhisi3>:
    133e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
    1342:	a5 9f       	mul	r26, r21
    1344:	90 0d       	add	r25, r0
    1346:	b4 9f       	mul	r27, r20
    1348:	90 0d       	add	r25, r0
    134a:	a4 9f       	mul	r26, r20
    134c:	80 0d       	add	r24, r0
    134e:	91 1d       	adc	r25, r1
    1350:	11 24       	eor	r1, r1
    1352:	08 95       	ret

00001354 <__muldi3>:
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	1f 93       	push	r17
    135a:	0f 93       	push	r16
    135c:	9a 9d       	mul	r25, r10
    135e:	f0 2d       	mov	r31, r0
    1360:	21 9f       	mul	r18, r17
    1362:	f0 0d       	add	r31, r0
    1364:	8b 9d       	mul	r24, r11
    1366:	f0 0d       	add	r31, r0
    1368:	8a 9d       	mul	r24, r10
    136a:	e0 2d       	mov	r30, r0
    136c:	f1 0d       	add	r31, r1
    136e:	03 9f       	mul	r16, r19
    1370:	f0 0d       	add	r31, r0
    1372:	02 9f       	mul	r16, r18
    1374:	e0 0d       	add	r30, r0
    1376:	f1 1d       	adc	r31, r1
    1378:	4e 9d       	mul	r20, r14
    137a:	e0 0d       	add	r30, r0
    137c:	f1 1d       	adc	r31, r1
    137e:	5e 9d       	mul	r21, r14
    1380:	f0 0d       	add	r31, r0
    1382:	4f 9d       	mul	r20, r15
    1384:	f0 0d       	add	r31, r0
    1386:	7f 93       	push	r23
    1388:	6f 93       	push	r22
    138a:	bf 92       	push	r11
    138c:	af 92       	push	r10
    138e:	5f 93       	push	r21
    1390:	4f 93       	push	r20
    1392:	d5 01       	movw	r26, r10
    1394:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
    1398:	8b 01       	movw	r16, r22
    139a:	ac 01       	movw	r20, r24
    139c:	d7 01       	movw	r26, r14
    139e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
    13a2:	eb 01       	movw	r28, r22
    13a4:	e8 0f       	add	r30, r24
    13a6:	f9 1f       	adc	r31, r25
    13a8:	d6 01       	movw	r26, r12
    13aa:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__muldi3_6>
    13ae:	2f 91       	pop	r18
    13b0:	3f 91       	pop	r19
    13b2:	d6 01       	movw	r26, r12
    13b4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
    13b8:	c6 0f       	add	r28, r22
    13ba:	d7 1f       	adc	r29, r23
    13bc:	e8 1f       	adc	r30, r24
    13be:	f9 1f       	adc	r31, r25
    13c0:	af 91       	pop	r26
    13c2:	bf 91       	pop	r27
    13c4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__muldi3_6>
    13c8:	2f 91       	pop	r18
    13ca:	3f 91       	pop	r19
    13cc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
    13d0:	c6 0f       	add	r28, r22
    13d2:	d7 1f       	adc	r29, r23
    13d4:	e8 1f       	adc	r30, r24
    13d6:	f9 1f       	adc	r31, r25
    13d8:	d6 01       	movw	r26, r12
    13da:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
    13de:	e6 0f       	add	r30, r22
    13e0:	f7 1f       	adc	r31, r23
    13e2:	98 01       	movw	r18, r16
    13e4:	be 01       	movw	r22, r28
    13e6:	cf 01       	movw	r24, r30
    13e8:	11 24       	eor	r1, r1
    13ea:	0f 91       	pop	r16
    13ec:	1f 91       	pop	r17
    13ee:	cf 91       	pop	r28
    13f0:	df 91       	pop	r29
    13f2:	08 95       	ret

000013f4 <__muldi3_6>:
    13f4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <__umulhisi3>
    13f8:	46 0f       	add	r20, r22
    13fa:	57 1f       	adc	r21, r23
    13fc:	c8 1f       	adc	r28, r24
    13fe:	d9 1f       	adc	r29, r25
    1400:	08 f4       	brcc	.+2      	; 0x1404 <__muldi3_6+0x10>
    1402:	31 96       	adiw	r30, 0x01	; 1
    1404:	08 95       	ret

00001406 <__moddi3>:
    1406:	68 94       	set
    1408:	01 c0       	rjmp	.+2      	; 0x140c <__divdi3_moddi3>

0000140a <__divdi3>:
    140a:	e8 94       	clt

0000140c <__divdi3_moddi3>:
    140c:	f9 2f       	mov	r31, r25
    140e:	f1 2b       	or	r31, r17
    1410:	12 f0       	brmi	.+4      	; 0x1416 <__divdi3_moddi3+0xa>
    1412:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__udivdi3_umoddi3>
    1416:	a0 e0       	ldi	r26, 0x00	; 0
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e1 e1       	ldi	r30, 0x11	; 17
    141c:	fa e0       	ldi	r31, 0x0A	; 10
    141e:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__prologue_saves__+0xc>
    1422:	09 2e       	mov	r0, r25
    1424:	05 94       	asr	r0
    1426:	22 f4       	brpl	.+8      	; 0x1430 <__divdi3_moddi3+0x24>
    1428:	0e 94 93 0a 	call	0x1526	; 0x1526 <__negdi2>
    142c:	11 23       	and	r17, r17
    142e:	92 f4       	brpl	.+36     	; 0x1454 <__divdi3_moddi3+0x48>
    1430:	f0 e8       	ldi	r31, 0x80	; 128
    1432:	0f 26       	eor	r0, r31
    1434:	ff ef       	ldi	r31, 0xFF	; 255
    1436:	e0 94       	com	r14
    1438:	f0 94       	com	r15
    143a:	00 95       	com	r16
    143c:	10 95       	com	r17
    143e:	b0 94       	com	r11
    1440:	c0 94       	com	r12
    1442:	d0 94       	com	r13
    1444:	a1 94       	neg	r10
    1446:	bf 0a       	sbc	r11, r31
    1448:	cf 0a       	sbc	r12, r31
    144a:	df 0a       	sbc	r13, r31
    144c:	ef 0a       	sbc	r14, r31
    144e:	ff 0a       	sbc	r15, r31
    1450:	0f 0b       	sbc	r16, r31
    1452:	1f 0b       	sbc	r17, r31
    1454:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmod64>
    1458:	07 fc       	sbrc	r0, 7
    145a:	0e 94 93 0a 	call	0x1526	; 0x1526 <__negdi2>
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	ec e0       	ldi	r30, 0x0C	; 12
    1464:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__epilogue_restores__+0xc>

00001468 <__umoddi3>:
    1468:	68 94       	set
    146a:	01 c0       	rjmp	.+2      	; 0x146e <__udivdi3_umoddi3>

0000146c <__udivdi3>:
    146c:	e8 94       	clt

0000146e <__udivdi3_umoddi3>:
    146e:	8f 92       	push	r8
    1470:	9f 92       	push	r9
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	0e 94 42 0a 	call	0x1484	; 0x1484 <__udivmod64>
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	9f 90       	pop	r9
    1480:	8f 90       	pop	r8
    1482:	08 95       	ret

00001484 <__udivmod64>:
    1484:	88 24       	eor	r8, r8
    1486:	99 24       	eor	r9, r9
    1488:	f4 01       	movw	r30, r8
    148a:	e4 01       	movw	r28, r8
    148c:	b0 e4       	ldi	r27, 0x40	; 64
    148e:	9f 93       	push	r25
    1490:	aa 27       	eor	r26, r26
    1492:	9a 15       	cp	r25, r10
    1494:	8b 04       	cpc	r8, r11
    1496:	9c 04       	cpc	r9, r12
    1498:	ed 05       	cpc	r30, r13
    149a:	fe 05       	cpc	r31, r14
    149c:	cf 05       	cpc	r28, r15
    149e:	d0 07       	cpc	r29, r16
    14a0:	a1 07       	cpc	r26, r17
    14a2:	98 f4       	brcc	.+38     	; 0x14ca <__udivmod64+0x46>
    14a4:	ad 2f       	mov	r26, r29
    14a6:	dc 2f       	mov	r29, r28
    14a8:	cf 2f       	mov	r28, r31
    14aa:	fe 2f       	mov	r31, r30
    14ac:	e9 2d       	mov	r30, r9
    14ae:	98 2c       	mov	r9, r8
    14b0:	89 2e       	mov	r8, r25
    14b2:	98 2f       	mov	r25, r24
    14b4:	87 2f       	mov	r24, r23
    14b6:	76 2f       	mov	r23, r22
    14b8:	65 2f       	mov	r22, r21
    14ba:	54 2f       	mov	r21, r20
    14bc:	43 2f       	mov	r20, r19
    14be:	32 2f       	mov	r19, r18
    14c0:	22 27       	eor	r18, r18
    14c2:	b8 50       	subi	r27, 0x08	; 8
    14c4:	31 f7       	brne	.-52     	; 0x1492 <__udivmod64+0xe>
    14c6:	bf 91       	pop	r27
    14c8:	27 c0       	rjmp	.+78     	; 0x1518 <__udivmod64+0x94>
    14ca:	1b 2e       	mov	r1, r27
    14cc:	bf 91       	pop	r27
    14ce:	bb 27       	eor	r27, r27
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	66 1f       	adc	r22, r22
    14da:	77 1f       	adc	r23, r23
    14dc:	88 1f       	adc	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	88 1c       	adc	r8, r8
    14e2:	99 1c       	adc	r9, r9
    14e4:	ee 1f       	adc	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	cc 1f       	adc	r28, r28
    14ea:	dd 1f       	adc	r29, r29
    14ec:	aa 1f       	adc	r26, r26
    14ee:	bb 1f       	adc	r27, r27
    14f0:	8a 14       	cp	r8, r10
    14f2:	9b 04       	cpc	r9, r11
    14f4:	ec 05       	cpc	r30, r12
    14f6:	fd 05       	cpc	r31, r13
    14f8:	ce 05       	cpc	r28, r14
    14fa:	df 05       	cpc	r29, r15
    14fc:	a0 07       	cpc	r26, r16
    14fe:	b1 07       	cpc	r27, r17
    1500:	48 f0       	brcs	.+18     	; 0x1514 <__udivmod64+0x90>
    1502:	8a 18       	sub	r8, r10
    1504:	9b 08       	sbc	r9, r11
    1506:	ec 09       	sbc	r30, r12
    1508:	fd 09       	sbc	r31, r13
    150a:	ce 09       	sbc	r28, r14
    150c:	df 09       	sbc	r29, r15
    150e:	a0 0b       	sbc	r26, r16
    1510:	b1 0b       	sbc	r27, r17
    1512:	21 60       	ori	r18, 0x01	; 1
    1514:	1a 94       	dec	r1
    1516:	e1 f6       	brne	.-72     	; 0x14d0 <__udivmod64+0x4c>
    1518:	2e f4       	brtc	.+10     	; 0x1524 <__udivmod64+0xa0>
    151a:	94 01       	movw	r18, r8
    151c:	af 01       	movw	r20, r30
    151e:	be 01       	movw	r22, r28
    1520:	cd 01       	movw	r24, r26
    1522:	00 0c       	add	r0, r0
    1524:	08 95       	ret

00001526 <__negdi2>:
    1526:	60 95       	com	r22
    1528:	70 95       	com	r23
    152a:	80 95       	com	r24
    152c:	90 95       	com	r25
    152e:	30 95       	com	r19
    1530:	40 95       	com	r20
    1532:	50 95       	com	r21
    1534:	21 95       	neg	r18
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	4f 4f       	sbci	r20, 0xFF	; 255
    153a:	5f 4f       	sbci	r21, 0xFF	; 255
    153c:	6f 4f       	sbci	r22, 0xFF	; 255
    153e:	7f 4f       	sbci	r23, 0xFF	; 255
    1540:	8f 4f       	sbci	r24, 0xFF	; 255
    1542:	9f 4f       	sbci	r25, 0xFF	; 255
    1544:	08 95       	ret

00001546 <__prologue_saves__>:
    1546:	2f 92       	push	r2
    1548:	3f 92       	push	r3
    154a:	4f 92       	push	r4
    154c:	5f 92       	push	r5
    154e:	6f 92       	push	r6
    1550:	7f 92       	push	r7
    1552:	8f 92       	push	r8
    1554:	9f 92       	push	r9
    1556:	af 92       	push	r10
    1558:	bf 92       	push	r11
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	ca 1b       	sub	r28, r26
    1570:	db 0b       	sbc	r29, r27
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	09 94       	ijmp

0000157e <__epilogue_restores__>:
    157e:	2a 88       	ldd	r2, Y+18	; 0x12
    1580:	39 88       	ldd	r3, Y+17	; 0x11
    1582:	48 88       	ldd	r4, Y+16	; 0x10
    1584:	5f 84       	ldd	r5, Y+15	; 0x0f
    1586:	6e 84       	ldd	r6, Y+14	; 0x0e
    1588:	7d 84       	ldd	r7, Y+13	; 0x0d
    158a:	8c 84       	ldd	r8, Y+12	; 0x0c
    158c:	9b 84       	ldd	r9, Y+11	; 0x0b
    158e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1590:	b9 84       	ldd	r11, Y+9	; 0x09
    1592:	c8 84       	ldd	r12, Y+8	; 0x08
    1594:	df 80       	ldd	r13, Y+7	; 0x07
    1596:	ee 80       	ldd	r14, Y+6	; 0x06
    1598:	fd 80       	ldd	r15, Y+5	; 0x05
    159a:	0c 81       	ldd	r16, Y+4	; 0x04
    159c:	1b 81       	ldd	r17, Y+3	; 0x03
    159e:	aa 81       	ldd	r26, Y+2	; 0x02
    15a0:	b9 81       	ldd	r27, Y+1	; 0x01
    15a2:	ce 0f       	add	r28, r30
    15a4:	d1 1d       	adc	r29, r1
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	de bf       	out	0x3e, r29	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	cd bf       	out	0x3d, r28	; 61
    15b0:	ed 01       	movw	r28, r26
    15b2:	08 95       	ret

000015b4 <__adddi3>:
    15b4:	2a 0d       	add	r18, r10
    15b6:	3b 1d       	adc	r19, r11
    15b8:	4c 1d       	adc	r20, r12
    15ba:	5d 1d       	adc	r21, r13
    15bc:	6e 1d       	adc	r22, r14
    15be:	7f 1d       	adc	r23, r15
    15c0:	80 1f       	adc	r24, r16
    15c2:	91 1f       	adc	r25, r17
    15c4:	08 95       	ret

000015c6 <__subdi3>:
    15c6:	2a 19       	sub	r18, r10
    15c8:	3b 09       	sbc	r19, r11
    15ca:	4c 09       	sbc	r20, r12
    15cc:	5d 09       	sbc	r21, r13
    15ce:	6e 09       	sbc	r22, r14
    15d0:	7f 09       	sbc	r23, r15
    15d2:	80 0b       	sbc	r24, r16
    15d4:	91 0b       	sbc	r25, r17
    15d6:	08 95       	ret

000015d8 <__cmpdi2_s8>:
    15d8:	00 24       	eor	r0, r0
    15da:	a7 fd       	sbrc	r26, 7
    15dc:	00 94       	com	r0
    15de:	2a 17       	cp	r18, r26
    15e0:	30 05       	cpc	r19, r0
    15e2:	40 05       	cpc	r20, r0
    15e4:	50 05       	cpc	r21, r0
    15e6:	60 05       	cpc	r22, r0
    15e8:	70 05       	cpc	r23, r0
    15ea:	80 05       	cpc	r24, r0
    15ec:	90 05       	cpc	r25, r0
    15ee:	08 95       	ret

000015f0 <__umulhisi3>:
    15f0:	a2 9f       	mul	r26, r18
    15f2:	b0 01       	movw	r22, r0
    15f4:	b3 9f       	mul	r27, r19
    15f6:	c0 01       	movw	r24, r0
    15f8:	a3 9f       	mul	r26, r19
    15fa:	70 0d       	add	r23, r0
    15fc:	81 1d       	adc	r24, r1
    15fe:	11 24       	eor	r1, r1
    1600:	91 1d       	adc	r25, r1
    1602:	b2 9f       	mul	r27, r18
    1604:	70 0d       	add	r23, r0
    1606:	81 1d       	adc	r24, r1
    1608:	11 24       	eor	r1, r1
    160a:	91 1d       	adc	r25, r1
    160c:	08 95       	ret

0000160e <strrev>:
    160e:	dc 01       	movw	r26, r24
    1610:	fc 01       	movw	r30, r24
    1612:	67 2f       	mov	r22, r23
    1614:	71 91       	ld	r23, Z+
    1616:	77 23       	and	r23, r23
    1618:	e1 f7       	brne	.-8      	; 0x1612 <strrev+0x4>
    161a:	32 97       	sbiw	r30, 0x02	; 2
    161c:	04 c0       	rjmp	.+8      	; 0x1626 <strrev+0x18>
    161e:	7c 91       	ld	r23, X
    1620:	6d 93       	st	X+, r22
    1622:	70 83       	st	Z, r23
    1624:	62 91       	ld	r22, -Z
    1626:	ae 17       	cp	r26, r30
    1628:	bf 07       	cpc	r27, r31
    162a:	c8 f3       	brcs	.-14     	; 0x161e <strrev+0x10>
    162c:	08 95       	ret

0000162e <_exit>:
    162e:	f8 94       	cli

00001630 <__stop_program>:
    1630:	ff cf       	rjmp	.-2      	; 0x1630 <__stop_program>
