
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000192c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  0000192c  000019c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000032  008001fc  008001fc  00001b5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000025fa  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a45  00000000  00000000  000043a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000165f  00000000  00000000  00004de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c4  00000000  00000000  00006448  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  0000690c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001293  00000000  00000000  00006f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000081f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7b 01 	jmp	0x2f6	; 0x2f6 <__vector_1>
       8:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_2>
       c:	0c 94 9f 04 	jmp	0x93e	; 0x93e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 09 	call	0x12fa	; 0x12fa <main>
      8a:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timer_1>:
int v_acid ;


void timer_1(){

	TCCR1A =(0 << WGM11)| (0 << WGM10 );// CTC
      92:	1f bc       	out	0x2f, r1	; 47
	TIMSK |= (1 << OCIE1A);//Set interrupt on compare match
      94:	89 b7       	in	r24, 0x39	; 57
      96:	80 61       	ori	r24, 0x10	; 16
      98:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1 << CS12) | (1 << CS10);// set pre scaler to 1024 and start the timer
      9a:	8e b5       	in	r24, 0x2e	; 46
      9c:	85 60       	ori	r24, 0x05	; 5
      9e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x07;
      a0:	87 e0       	ldi	r24, 0x07	; 7
      a2:	90 e0       	ldi	r25, 0x00	; 0
      a4:	9b bd       	out	0x2b, r25	; 43
      a6:	8a bd       	out	0x2a, r24	; 42
      a8:	08 95       	ret

000000aa <pump_w>:
}

void pump_w(){
      aa:	cf 92       	push	r12
      ac:	df 92       	push	r13
      ae:	ef 92       	push	r14
      b0:	ff 92       	push	r15
      b2:	0f 93       	push	r16
      b4:	1f 93       	push	r17
	
	PORTB = PORTB | (1<<5);    /* Turn on the Relay and motor ON*/
      b6:	88 b3       	in	r24, 0x18	; 24
      b8:	80 62       	ori	r24, 0x20	; 32
      ba:	88 bb       	out	0x18, r24	; 24
	timer_1();
      bc:	0e 94 49 00 	call	0x92	; 0x92 <timer_1>
	DDRD &= ~(1 << DDD2);     /*Clear the PD2 pin*/
      c0:	81 b3       	in	r24, 0x11	; 17
      c2:	8b 7f       	andi	r24, 0xFB	; 251
      c4:	81 bb       	out	0x11, r24	; 17
	PORTD =	 0xFF;             /* turn On the Pull-up */
      c6:	8f ef       	ldi	r24, 0xFF	; 255
      c8:	82 bb       	out	0x12, r24	; 18
	DDRD &= ~(1<<PD2);        /* Make INT0 pin as Input */
      ca:	81 b3       	in	r24, 0x11	; 17
      cc:	8b 7f       	andi	r24, 0xFB	; 251
      ce:	81 bb       	out	0x11, r24	; 17
	GICR = (1<<INT0);         /* Enable INT0*/
      d0:	80 e4       	ldi	r24, 0x40	; 64
      d2:	8b bf       	out	0x3b, r24	; 59
	MCUCR = ((1<<ISC00)|(1<<ISC01));/* Trigger INT0 on Rising Edge triggered */
      d4:	83 e0       	ldi	r24, 0x03	; 3
      d6:	85 bf       	out	0x35, r24	; 53
	
	sei();                   /*enable interrupts*/
      d8:	78 94       	sei
	while (totalMilliLitres!=v_water)   {
      da:	c8 c0       	rjmp	.+400    	; 0x26c <pump_w+0x1c2>
		if((millisec-oldTime)>=1000)
      dc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millisec>
      e0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millisec+0x1>
      e4:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millisec+0x2>
      e8:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millisec+0x3>
      ec:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <oldTime>
      f0:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <oldTime+0x1>
      f4:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <oldTime+0x2>
      f8:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <oldTime+0x3>
      fc:	84 1b       	sub	r24, r20
      fe:	95 0b       	sbc	r25, r21
     100:	a6 0b       	sbc	r26, r22
     102:	b7 0b       	sbc	r27, r23
     104:	88 3e       	cpi	r24, 0xE8	; 232
     106:	93 40       	sbci	r25, 0x03	; 3
     108:	a1 05       	cpc	r26, r1
     10a:	b1 05       	cpc	r27, r1
     10c:	08 f4       	brcc	.+2      	; 0x110 <pump_w+0x66>
     10e:	ae c0       	rjmp	.+348    	; 0x26c <pump_w+0x1c2>
		{
			sec++;
     110:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sec>
     114:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sec+0x1>
     118:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <sec+0x2>
     11c:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <sec+0x3>
     120:	01 96       	adiw	r24, 0x01	; 1
     122:	a1 1d       	adc	r26, r1
     124:	b1 1d       	adc	r27, r1
     126:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sec>
     12a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sec+0x1>
     12e:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <sec+0x2>
     132:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <sec+0x3>
			if(sec==1)
     136:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sec>
     13a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sec+0x1>
     13e:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <sec+0x2>
     142:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <sec+0x3>
     146:	01 97       	sbiw	r24, 0x01	; 1
     148:	a1 05       	cpc	r26, r1
     14a:	b1 05       	cpc	r27, r1
     14c:	09 f0       	breq	.+2      	; 0x150 <pump_w+0xa6>
     14e:	8e c0       	rjmp	.+284    	; 0x26c <pump_w+0x1c2>
			{
				cli();
     150:	f8 94       	cli
				
				flowRate = ((1000.0 / (millisec - oldTime)) * pulseCount1) / calibrationFactor;
     152:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millisec>
     156:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millisec+0x1>
     15a:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millisec+0x2>
     15e:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millisec+0x3>
     162:	00 91 12 02 	lds	r16, 0x0212	; 0x800212 <oldTime>
     166:	10 91 13 02 	lds	r17, 0x0213	; 0x800213 <oldTime+0x1>
     16a:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <oldTime+0x2>
     16e:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <oldTime+0x3>
     172:	bc 01       	movw	r22, r24
     174:	cd 01       	movw	r24, r26
     176:	60 1b       	sub	r22, r16
     178:	71 0b       	sbc	r23, r17
     17a:	82 0b       	sbc	r24, r18
     17c:	93 0b       	sbc	r25, r19
     17e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     182:	9b 01       	movw	r18, r22
     184:	ac 01       	movw	r20, r24
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	8a e7       	ldi	r24, 0x7A	; 122
     18c:	94 e4       	ldi	r25, 0x44	; 68
     18e:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     192:	6b 01       	movw	r12, r22
     194:	7c 01       	movw	r14, r24
     196:	60 91 1a 02 	lds	r22, 0x021A	; 0x80021a <pulseCount1>
     19a:	70 91 1b 02 	lds	r23, 0x021B	; 0x80021b <pulseCount1+0x1>
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     1a6:	a7 01       	movw	r20, r14
     1a8:	96 01       	movw	r18, r12
     1aa:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     1ae:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1b2:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     1b6:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     1ba:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     1be:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     1c2:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <flowRate>
     1c6:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <flowRate+0x1>
     1ca:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <flowRate+0x2>
     1ce:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <flowRate+0x3>
				oldTime = millisec;
     1d2:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <millisec>
     1d6:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <millisec+0x1>
     1da:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <millisec+0x2>
     1de:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <millisec+0x3>
     1e2:	00 93 12 02 	sts	0x0212, r16	; 0x800212 <oldTime>
     1e6:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <oldTime+0x1>
     1ea:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <oldTime+0x2>
     1ee:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <oldTime+0x3>
				flowMilliLitres = (flowRate / 60) * 1000;
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 e7       	ldi	r20, 0x70	; 112
     1f8:	52 e4       	ldi	r21, 0x42	; 66
     1fa:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	4a e7       	ldi	r20, 0x7A	; 122
     204:	54 e4       	ldi	r21, 0x44	; 68
     206:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     20a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fixunssfsi>
     20e:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <flowMilliLitres+0x1>
     212:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <flowMilliLitres>
				totalMilliLitres += flowMilliLitres;
     216:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <totalMilliLitres>
     21a:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <totalMilliLitres+0x1>
     21e:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <totalMilliLitres+0x2>
     222:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <totalMilliLitres+0x3>
     226:	da 01       	movw	r26, r20
     228:	c9 01       	movw	r24, r18
     22a:	86 0f       	add	r24, r22
     22c:	97 1f       	adc	r25, r23
     22e:	a1 1d       	adc	r26, r1
     230:	b1 1d       	adc	r27, r1
     232:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <totalMilliLitres>
     236:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <totalMilliLitres+0x1>
     23a:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <totalMilliLitres+0x2>
     23e:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <totalMilliLitres+0x3>
				
				millisec=0;
     242:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <millisec>
     246:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <millisec+0x1>
     24a:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <millisec+0x2>
     24e:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <millisec+0x3>
				sec=0;
     252:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <sec>
     256:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <sec+0x1>
     25a:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <sec+0x2>
     25e:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sec+0x3>
				pulseCount1 = 0;
     262:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <pulseCount1+0x1>
     266:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <pulseCount1>

				sei();
     26a:	78 94       	sei
	DDRD &= ~(1<<PD2);        /* Make INT0 pin as Input */
	GICR = (1<<INT0);         /* Enable INT0*/
	MCUCR = ((1<<ISC00)|(1<<ISC01));/* Trigger INT0 on Rising Edge triggered */
	
	sei();                   /*enable interrupts*/
	while (totalMilliLitres!=v_water)   {
     26c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <v_water>
     270:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <v_water+0x1>
     274:	09 2e       	mov	r0, r25
     276:	00 0c       	add	r0, r0
     278:	aa 0b       	sbc	r26, r26
     27a:	bb 0b       	sbc	r27, r27
     27c:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <totalMilliLitres>
     280:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <totalMilliLitres+0x1>
     284:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <totalMilliLitres+0x2>
     288:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <totalMilliLitres+0x3>
     28c:	84 17       	cp	r24, r20
     28e:	95 07       	cpc	r25, r21
     290:	a6 07       	cpc	r26, r22
     292:	b7 07       	cpc	r27, r23
     294:	09 f0       	breq	.+2      	; 0x298 <pump_w+0x1ee>
     296:	22 cf       	rjmp	.-444    	; 0xdc <pump_w+0x32>

				sei();
			}
		}
	}
	PORTB = PORTB & (~(1<<5)); /*Turn off the relay*/
     298:	88 b3       	in	r24, 0x18	; 24
     29a:	8f 7d       	andi	r24, 0xDF	; 223
     29c:	88 bb       	out	0x18, r24	; 24
	
}
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	ef 90       	pop	r14
     2a6:	df 90       	pop	r13
     2a8:	cf 90       	pop	r12
     2aa:	08 95       	ret

000002ac <__vector_7>:
ISR (TIMER1_COMPA_vect){
     2ac:	1f 92       	push	r1
     2ae:	0f 92       	push	r0
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	0f 92       	push	r0
     2b4:	11 24       	eor	r1, r1
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	af 93       	push	r26
     2bc:	bf 93       	push	r27
	millisec++;
     2be:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millisec>
     2c2:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millisec+0x1>
     2c6:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millisec+0x2>
     2ca:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millisec+0x3>
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	a1 1d       	adc	r26, r1
     2d2:	b1 1d       	adc	r27, r1
     2d4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <millisec>
     2d8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <millisec+0x1>
     2dc:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <millisec+0x2>
     2e0:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <millisec+0x3>
}
     2e4:	bf 91       	pop	r27
     2e6:	af 91       	pop	r26
     2e8:	9f 91       	pop	r25
     2ea:	8f 91       	pop	r24
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <__vector_1>:
ISR (INT0_vect){
     2f6:	1f 92       	push	r1
     2f8:	0f 92       	push	r0
     2fa:	0f b6       	in	r0, 0x3f	; 63
     2fc:	0f 92       	push	r0
     2fe:	11 24       	eor	r1, r1
     300:	8f 93       	push	r24
     302:	9f 93       	push	r25
	pulseCount1++;
     304:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <pulseCount1>
     308:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <pulseCount1+0x1>
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	90 93 1b 02 	sts	0x021B, r25	; 0x80021b <pulseCount1+0x1>
     312:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <pulseCount1>
}
     316:	9f 91       	pop	r25
     318:	8f 91       	pop	r24
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <pump_l>:

void pump_l(){
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
	PORTB = PORTB | (1<<6); /* Turn on the Relay and motor ON*/
     330:	88 b3       	in	r24, 0x18	; 24
     332:	80 64       	ori	r24, 0x40	; 64
     334:	88 bb       	out	0x18, r24	; 24
	timer_1();
     336:	0e 94 49 00 	call	0x92	; 0x92 <timer_1>
	DDRD &= ~(1 << DDD2);     // Clear the PD2 pin
     33a:	81 b3       	in	r24, 0x11	; 17
     33c:	8b 7f       	andi	r24, 0xFB	; 251
     33e:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xFF;   // turn On the Pull-up
     340:	8f ef       	ldi	r24, 0xFF	; 255
     342:	82 bb       	out	0x12, r24	; 18
	DDRD &= ~(1<<PD3);		/* Make INT1 pin as Input */
     344:	81 b3       	in	r24, 0x11	; 17
     346:	87 7f       	andi	r24, 0xF7	; 247
     348:	81 bb       	out	0x11, r24	; 17
	GICR = (1<<INT1);		/* Enable INT1*/
     34a:	80 e8       	ldi	r24, 0x80	; 128
     34c:	8b bf       	out	0x3b, r24	; 59
	MCUCR = ((1<<ISC10)|(1<<ISC11));/* Trigger INT1 on Rising Edge triggered */
     34e:	8c e0       	ldi	r24, 0x0C	; 12
     350:	85 bf       	out	0x35, r24	; 53

	sei();// enable interrupts
     352:	78 94       	sei
	
	while (totalMilliLitres!=v_latex)   {
     354:	c8 c0       	rjmp	.+400    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		if((millisec-oldTime)>=1000)
     356:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millisec>
     35a:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millisec+0x1>
     35e:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millisec+0x2>
     362:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millisec+0x3>
     366:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <oldTime>
     36a:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <oldTime+0x1>
     36e:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <oldTime+0x2>
     372:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <oldTime+0x3>
     376:	84 1b       	sub	r24, r20
     378:	95 0b       	sbc	r25, r21
     37a:	a6 0b       	sbc	r26, r22
     37c:	b7 0b       	sbc	r27, r23
     37e:	88 3e       	cpi	r24, 0xE8	; 232
     380:	93 40       	sbci	r25, 0x03	; 3
     382:	a1 05       	cpc	r26, r1
     384:	b1 05       	cpc	r27, r1
     386:	08 f4       	brcc	.+2      	; 0x38a <pump_l+0x66>
     388:	ae c0       	rjmp	.+348    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
		{
			sec++;
     38a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sec>
     38e:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sec+0x1>
     392:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <sec+0x2>
     396:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <sec+0x3>
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	a1 1d       	adc	r26, r1
     39e:	b1 1d       	adc	r27, r1
     3a0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sec>
     3a4:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sec+0x1>
     3a8:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <sec+0x2>
     3ac:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <sec+0x3>
			if(sec==1)
     3b0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sec>
     3b4:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sec+0x1>
     3b8:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <sec+0x2>
     3bc:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <sec+0x3>
     3c0:	01 97       	sbiw	r24, 0x01	; 1
     3c2:	a1 05       	cpc	r26, r1
     3c4:	b1 05       	cpc	r27, r1
     3c6:	09 f0       	breq	.+2      	; 0x3ca <pump_l+0xa6>
     3c8:	8e c0       	rjmp	.+284    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
			{
				cli();
     3ca:	f8 94       	cli
				
				flowRate = ((1000.0 / (millisec - oldTime)) * pulseCount2) / calibrationFactor;
     3cc:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millisec>
     3d0:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millisec+0x1>
     3d4:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millisec+0x2>
     3d8:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millisec+0x3>
     3dc:	00 91 12 02 	lds	r16, 0x0212	; 0x800212 <oldTime>
     3e0:	10 91 13 02 	lds	r17, 0x0213	; 0x800213 <oldTime+0x1>
     3e4:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <oldTime+0x2>
     3e8:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <oldTime+0x3>
     3ec:	bc 01       	movw	r22, r24
     3ee:	cd 01       	movw	r24, r26
     3f0:	60 1b       	sub	r22, r16
     3f2:	71 0b       	sbc	r23, r17
     3f4:	82 0b       	sbc	r24, r18
     3f6:	93 0b       	sbc	r25, r19
     3f8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     3fc:	9b 01       	movw	r18, r22
     3fe:	ac 01       	movw	r20, r24
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	8a e7       	ldi	r24, 0x7A	; 122
     406:	94 e4       	ldi	r25, 0x44	; 68
     408:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     40c:	6b 01       	movw	r12, r22
     40e:	7c 01       	movw	r14, r24
     410:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <pulseCount2>
     414:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <pulseCount2+0x1>
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     420:	a7 01       	movw	r20, r14
     422:	96 01       	movw	r18, r12
     424:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     428:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     42c:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     430:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     434:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     438:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     43c:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <flowRate>
     440:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <flowRate+0x1>
     444:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <flowRate+0x2>
     448:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <flowRate+0x3>
				oldTime = millisec;
     44c:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <millisec>
     450:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <millisec+0x1>
     454:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <millisec+0x2>
     458:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <millisec+0x3>
     45c:	00 93 12 02 	sts	0x0212, r16	; 0x800212 <oldTime>
     460:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <oldTime+0x1>
     464:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <oldTime+0x2>
     468:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <oldTime+0x3>
				flowMilliLitres = (flowRate / 60) * 1000;
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e7       	ldi	r20, 0x70	; 112
     472:	52 e4       	ldi	r21, 0x42	; 66
     474:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	4a e7       	ldi	r20, 0x7A	; 122
     47e:	54 e4       	ldi	r21, 0x44	; 68
     480:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     484:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fixunssfsi>
     488:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <flowMilliLitres+0x1>
     48c:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <flowMilliLitres>
				totalMilliLitres += flowMilliLitres;
     490:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <totalMilliLitres>
     494:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <totalMilliLitres+0x1>
     498:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <totalMilliLitres+0x2>
     49c:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <totalMilliLitres+0x3>
     4a0:	da 01       	movw	r26, r20
     4a2:	c9 01       	movw	r24, r18
     4a4:	86 0f       	add	r24, r22
     4a6:	97 1f       	adc	r25, r23
     4a8:	a1 1d       	adc	r26, r1
     4aa:	b1 1d       	adc	r27, r1
     4ac:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <totalMilliLitres>
     4b0:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <totalMilliLitres+0x1>
     4b4:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <totalMilliLitres+0x2>
     4b8:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <totalMilliLitres+0x3>

				millisec=0;
     4bc:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <millisec>
     4c0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <millisec+0x1>
     4c4:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <millisec+0x2>
     4c8:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <millisec+0x3>
				sec=0;
     4cc:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <sec>
     4d0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <sec+0x1>
     4d4:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <sec+0x2>
     4d8:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sec+0x3>
				pulseCount2 = 0;
     4dc:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <pulseCount2+0x1>
     4e0:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <pulseCount2>

				sei();
     4e4:	78 94       	sei
	GICR = (1<<INT1);		/* Enable INT1*/
	MCUCR = ((1<<ISC10)|(1<<ISC11));/* Trigger INT1 on Rising Edge triggered */

	sei();// enable interrupts
	
	while (totalMilliLitres!=v_latex)   {
     4e6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <v_latex>
     4ea:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <v_latex+0x1>
     4ee:	09 2e       	mov	r0, r25
     4f0:	00 0c       	add	r0, r0
     4f2:	aa 0b       	sbc	r26, r26
     4f4:	bb 0b       	sbc	r27, r27
     4f6:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <totalMilliLitres>
     4fa:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <totalMilliLitres+0x1>
     4fe:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <totalMilliLitres+0x2>
     502:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <totalMilliLitres+0x3>
     506:	84 17       	cp	r24, r20
     508:	95 07       	cpc	r25, r21
     50a:	a6 07       	cpc	r26, r22
     50c:	b7 07       	cpc	r27, r23
     50e:	09 f0       	breq	.+2      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     510:	22 cf       	rjmp	.-444    	; 0x356 <pump_l+0x32>

				sei();
			}
		}
	}
	PORTB = PORTB & (~(1<<6)); /*Turn off the relay*/
     512:	88 b3       	in	r24, 0x18	; 24
     514:	8f 7b       	andi	r24, 0xBF	; 191
     516:	88 bb       	out	0x18, r24	; 24
	
}
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	df 90       	pop	r13
     522:	cf 90       	pop	r12
     524:	08 95       	ret

00000526 <__vector_2>:


ISR (INT1_vect){
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	8f 93       	push	r24
     532:	9f 93       	push	r25
	pulseCount2++;
     534:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <pulseCount2>
     538:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <pulseCount2+0x1>
     53c:	01 96       	adiw	r24, 0x01	; 1
     53e:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <pulseCount2+0x1>
     542:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <pulseCount2>
}
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	0f 90       	pop	r0
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	0f 90       	pop	r0
     550:	1f 90       	pop	r1
     552:	18 95       	reti

00000554 <pump_a>:

void pump_a(){
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
	PORTB = PORTB | (0<<4);
     560:	88 b3       	in	r24, 0x18	; 24
     562:	88 bb       	out	0x18, r24	; 24
	PORTB = PORTB | (0<<3);    /*multiplexer input*/
     564:	88 b3       	in	r24, 0x18	; 24
     566:	88 bb       	out	0x18, r24	; 24
	PORTB = PORTB | (1<<7); /* Turn OFF the Relay and motor ON*/
     568:	88 b3       	in	r24, 0x18	; 24
     56a:	80 68       	ori	r24, 0x80	; 128
     56c:	88 bb       	out	0x18, r24	; 24
	timer_1();
     56e:	0e 94 49 00 	call	0x92	; 0x92 <timer_1>
	DDRB &= ~(1 << DDB2);     // Clear the PD2 pin
     572:	87 b3       	in	r24, 0x17	; 23
     574:	8b 7f       	andi	r24, 0xFB	; 251
     576:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;   // turn On the Pull-up
     578:	8f ef       	ldi	r24, 0xFF	; 255
     57a:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~(1<<PB2);		/* Make INT2 pin as Input */
     57c:	87 b3       	in	r24, 0x17	; 23
     57e:	8b 7f       	andi	r24, 0xFB	; 251
     580:	87 bb       	out	0x17, r24	; 23
	GICR = (1<<INT2);		/* Enable INT2*/
     582:	80 e2       	ldi	r24, 0x20	; 32
     584:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<<ISC2);/* Trigger INT2 on Rising Edge triggered */
     586:	80 e4       	ldi	r24, 0x40	; 64
     588:	85 bf       	out	0x35, r24	; 53


	sei();// enable interrupts
     58a:	78 94       	sei
	
	while (totalMilliLitres!=v_acid)   {
     58c:	c8 c0       	rjmp	.+400    	; 0x71e <pump_a+0x1ca>
		if((millisec-oldTime)>=1000)
     58e:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millisec>
     592:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millisec+0x1>
     596:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millisec+0x2>
     59a:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millisec+0x3>
     59e:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <oldTime>
     5a2:	50 91 13 02 	lds	r21, 0x0213	; 0x800213 <oldTime+0x1>
     5a6:	60 91 14 02 	lds	r22, 0x0214	; 0x800214 <oldTime+0x2>
     5aa:	70 91 15 02 	lds	r23, 0x0215	; 0x800215 <oldTime+0x3>
     5ae:	84 1b       	sub	r24, r20
     5b0:	95 0b       	sbc	r25, r21
     5b2:	a6 0b       	sbc	r26, r22
     5b4:	b7 0b       	sbc	r27, r23
     5b6:	88 3e       	cpi	r24, 0xE8	; 232
     5b8:	93 40       	sbci	r25, 0x03	; 3
     5ba:	a1 05       	cpc	r26, r1
     5bc:	b1 05       	cpc	r27, r1
     5be:	08 f4       	brcc	.+2      	; 0x5c2 <pump_a+0x6e>
     5c0:	ae c0       	rjmp	.+348    	; 0x71e <pump_a+0x1ca>
		{
			sec++;
     5c2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sec>
     5c6:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sec+0x1>
     5ca:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <sec+0x2>
     5ce:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <sec+0x3>
     5d2:	01 96       	adiw	r24, 0x01	; 1
     5d4:	a1 1d       	adc	r26, r1
     5d6:	b1 1d       	adc	r27, r1
     5d8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <sec>
     5dc:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <sec+0x1>
     5e0:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <sec+0x2>
     5e4:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <sec+0x3>
			if(sec==1)
     5e8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <sec>
     5ec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <sec+0x1>
     5f0:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <sec+0x2>
     5f4:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <sec+0x3>
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	a1 05       	cpc	r26, r1
     5fc:	b1 05       	cpc	r27, r1
     5fe:	09 f0       	breq	.+2      	; 0x602 <pump_a+0xae>
     600:	8e c0       	rjmp	.+284    	; 0x71e <pump_a+0x1ca>
			{
				cli();
     602:	f8 94       	cli
				
				flowRate = ((1000.0 / (millisec - oldTime)) * pulseCount3) / calibrationFactor;
     604:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <millisec>
     608:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <millisec+0x1>
     60c:	a0 91 0a 02 	lds	r26, 0x020A	; 0x80020a <millisec+0x2>
     610:	b0 91 0b 02 	lds	r27, 0x020B	; 0x80020b <millisec+0x3>
     614:	00 91 12 02 	lds	r16, 0x0212	; 0x800212 <oldTime>
     618:	10 91 13 02 	lds	r17, 0x0213	; 0x800213 <oldTime+0x1>
     61c:	20 91 14 02 	lds	r18, 0x0214	; 0x800214 <oldTime+0x2>
     620:	30 91 15 02 	lds	r19, 0x0215	; 0x800215 <oldTime+0x3>
     624:	bc 01       	movw	r22, r24
     626:	cd 01       	movw	r24, r26
     628:	60 1b       	sub	r22, r16
     62a:	71 0b       	sbc	r23, r17
     62c:	82 0b       	sbc	r24, r18
     62e:	93 0b       	sbc	r25, r19
     630:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	8a e7       	ldi	r24, 0x7A	; 122
     63e:	94 e4       	ldi	r25, 0x44	; 68
     640:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     644:	6b 01       	movw	r12, r22
     646:	7c 01       	movw	r14, r24
     648:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <pulseCount3>
     64c:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <pulseCount3+0x1>
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     658:	a7 01       	movw	r20, r14
     65a:	96 01       	movw	r18, r12
     65c:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     660:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     664:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     668:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     66c:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
     670:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     674:	60 93 1c 02 	sts	0x021C, r22	; 0x80021c <flowRate>
     678:	70 93 1d 02 	sts	0x021D, r23	; 0x80021d <flowRate+0x1>
     67c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <flowRate+0x2>
     680:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <flowRate+0x3>
				oldTime = millisec;
     684:	00 91 08 02 	lds	r16, 0x0208	; 0x800208 <millisec>
     688:	10 91 09 02 	lds	r17, 0x0209	; 0x800209 <millisec+0x1>
     68c:	20 91 0a 02 	lds	r18, 0x020A	; 0x80020a <millisec+0x2>
     690:	30 91 0b 02 	lds	r19, 0x020B	; 0x80020b <millisec+0x3>
     694:	00 93 12 02 	sts	0x0212, r16	; 0x800212 <oldTime>
     698:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <oldTime+0x1>
     69c:	20 93 14 02 	sts	0x0214, r18	; 0x800214 <oldTime+0x2>
     6a0:	30 93 15 02 	sts	0x0215, r19	; 0x800215 <oldTime+0x3>
				flowMilliLitres = (flowRate / 60) * 1000;
     6a4:	20 e0       	ldi	r18, 0x00	; 0
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	40 e7       	ldi	r20, 0x70	; 112
     6aa:	52 e4       	ldi	r21, 0x42	; 66
     6ac:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	4a e7       	ldi	r20, 0x7A	; 122
     6b6:	54 e4       	ldi	r21, 0x44	; 68
     6b8:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     6bc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fixunssfsi>
     6c0:	70 93 11 02 	sts	0x0211, r23	; 0x800211 <flowMilliLitres+0x1>
     6c4:	60 93 10 02 	sts	0x0210, r22	; 0x800210 <flowMilliLitres>
				totalMilliLitres += flowMilliLitres;
     6c8:	20 91 0c 02 	lds	r18, 0x020C	; 0x80020c <totalMilliLitres>
     6cc:	30 91 0d 02 	lds	r19, 0x020D	; 0x80020d <totalMilliLitres+0x1>
     6d0:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <totalMilliLitres+0x2>
     6d4:	50 91 0f 02 	lds	r21, 0x020F	; 0x80020f <totalMilliLitres+0x3>
     6d8:	da 01       	movw	r26, r20
     6da:	c9 01       	movw	r24, r18
     6dc:	86 0f       	add	r24, r22
     6de:	97 1f       	adc	r25, r23
     6e0:	a1 1d       	adc	r26, r1
     6e2:	b1 1d       	adc	r27, r1
     6e4:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <totalMilliLitres>
     6e8:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <totalMilliLitres+0x1>
     6ec:	a0 93 0e 02 	sts	0x020E, r26	; 0x80020e <totalMilliLitres+0x2>
     6f0:	b0 93 0f 02 	sts	0x020F, r27	; 0x80020f <totalMilliLitres+0x3>
				
				millisec=0;
     6f4:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <millisec>
     6f8:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <millisec+0x1>
     6fc:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <millisec+0x2>
     700:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <millisec+0x3>
				sec=0;
     704:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <sec>
     708:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <sec+0x1>
     70c:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <sec+0x2>
     710:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <sec+0x3>
				pulseCount3 = 0;
     714:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <pulseCount3+0x1>
     718:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <pulseCount3>

				sei();
     71c:	78 94       	sei
	MCUCR = (1<<ISC2);/* Trigger INT2 on Rising Edge triggered */


	sei();// enable interrupts
	
	while (totalMilliLitres!=v_acid)   {
     71e:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <v_acid>
     722:	90 91 29 02 	lds	r25, 0x0229	; 0x800229 <v_acid+0x1>
     726:	09 2e       	mov	r0, r25
     728:	00 0c       	add	r0, r0
     72a:	aa 0b       	sbc	r26, r26
     72c:	bb 0b       	sbc	r27, r27
     72e:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <totalMilliLitres>
     732:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <totalMilliLitres+0x1>
     736:	60 91 0e 02 	lds	r22, 0x020E	; 0x80020e <totalMilliLitres+0x2>
     73a:	70 91 0f 02 	lds	r23, 0x020F	; 0x80020f <totalMilliLitres+0x3>
     73e:	84 17       	cp	r24, r20
     740:	95 07       	cpc	r25, r21
     742:	a6 07       	cpc	r26, r22
     744:	b7 07       	cpc	r27, r23
     746:	09 f0       	breq	.+2      	; 0x74a <pump_a+0x1f6>
     748:	22 cf       	rjmp	.-444    	; 0x58e <pump_a+0x3a>
				sei();
				
			}
		}
	}
	PORTB = PORTB & (~(1<<7)); /*Turn off the relay*/
     74a:	88 b3       	in	r24, 0x18	; 24
     74c:	8f 77       	andi	r24, 0x7F	; 127
     74e:	88 bb       	out	0x18, r24	; 24
	
}
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	08 95       	ret

0000075e <initUS>:
double distance = 0;


void initUS(){
	
	DDRB = DDRB | 1 << DDB1;
     75e:	87 b3       	in	r24, 0x17	; 23
     760:	82 60       	ori	r24, 0x02	; 2
     762:	87 bb       	out	0x17, r24	; 23
	//DDRD = DDRD & ~(1 << DDD2) ;
	//PORTD = PORTD & ~(1 << PD2);
	DDRB = DDRB & ~(1 << DDB2) ;
     764:	87 b3       	in	r24, 0x17	; 23
     766:	8b 7f       	andi	r24, 0xFB	; 251
     768:	87 bb       	out	0x17, r24	; 23
	PORTB = PORTB & ~(1 << PB2);
     76a:	88 b3       	in	r24, 0x18	; 24
     76c:	8b 7f       	andi	r24, 0xFB	; 251
     76e:	88 bb       	out	0x18, r24	; 24
	DDRB= DDRB | 1 << DDB3;
     770:	87 b3       	in	r24, 0x17	; 23
     772:	88 60       	ori	r24, 0x08	; 8
     774:	87 bb       	out	0x17, r24	; 23
	DDRB= DDRB | 1 << DDB4;
     776:	87 b3       	in	r24, 0x17	; 23
     778:	80 61       	ori	r24, 0x10	; 16
     77a:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77c:	83 ed       	ldi	r24, 0xD3	; 211
     77e:	90 e3       	ldi	r25, 0x30	; 48
     780:	01 97       	sbiw	r24, 0x01	; 1
     782:	f1 f7       	brne	.-4      	; 0x780 <initUS+0x22>
     784:	00 c0       	rjmp	.+0      	; 0x786 <initUS+0x28>
     786:	00 00       	nop
	_delay_ms(50);
	MCUCSR |= 1 << ISC2;
     788:	84 b7       	in	r24, 0x34	; 52
     78a:	80 64       	ori	r24, 0x40	; 64
     78c:	84 bf       	out	0x34, r24	; 52
	GIFR &= ~(1<< INTF2);
     78e:	8a b7       	in	r24, 0x3a	; 58
     790:	8f 7d       	andi	r24, 0xDF	; 223
     792:	8a bf       	out	0x3a, r24	; 58
	GICR |= 1<<INT2;
     794:	8b b7       	in	r24, 0x3b	; 59
     796:	80 62       	ori	r24, 0x20	; 32
     798:	8b bf       	out	0x3b, r24	; 59
	//MCUCR |= 1<<ISC00;
	TIMSK |= 1 << TOIE1;
     79a:	89 b7       	in	r24, 0x39	; 57
     79c:	84 60       	ori	r24, 0x04	; 4
     79e:	89 bf       	out	0x39, r24	; 57
	sei();
     7a0:	78 94       	sei
     7a2:	08 95       	ret

000007a4 <trigPulse>:
}


void trigPulse()
{
	PORTB = PORTB | 1<<PB1;
     7a4:	88 b3       	in	r24, 0x18	; 24
     7a6:	82 60       	ori	r24, 0x02	; 2
     7a8:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7aa:	85 e0       	ldi	r24, 0x05	; 5
     7ac:	8a 95       	dec	r24
     7ae:	f1 f7       	brne	.-4      	; 0x7ac <trigPulse+0x8>
	_delay_us(15);
	PORTB = PORTB & ~(1<<PB1);
     7b0:	88 b3       	in	r24, 0x18	; 24
     7b2:	8d 7f       	andi	r24, 0xFD	; 253
     7b4:	88 bb       	out	0x18, r24	; 24
     7b6:	85 e0       	ldi	r24, 0x05	; 5
     7b8:	8a 95       	dec	r24
     7ba:	f1 f7       	brne	.-4      	; 0x7b8 <trigPulse+0x14>
     7bc:	08 95       	ret

000007be <retDistance>:
	
}

uint8_t retDistance(double distance)
{
	v_acid =15;
     7be:	2f e0       	ldi	r18, 0x0F	; 15
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <v_acid+0x1>
     7c6:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <v_acid>
	if (distance >50)
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	48 e4       	ldi	r20, 0x48	; 72
     7d0:	52 e4       	ldi	r21, 0x42	; 66
     7d2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__gesf2>
     7d6:	18 16       	cp	r1, r24
     7d8:	14 f4       	brge	.+4      	; 0x7de <retDistance+0x20>
	{
		return 1;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	08 95       	ret
	}
	else
	{
		return 0;
     7de:	80 e0       	ldi	r24, 0x00	; 0
	}
	_delay_ms(200);
	
}
     7e0:	08 95       	ret

000007e2 <ultrasonic1>:
	sei();
}

uint8_t ultrasonic1()
{
	v_water=12;
     7e2:	8c e0       	ldi	r24, 0x0C	; 12
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <v_water+0x1>
     7ea:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <v_water>
	PORTB=PORTB & ~(1 << PB3);
     7ee:	88 b3       	in	r24, 0x18	; 24
     7f0:	87 7f       	andi	r24, 0xF7	; 247
     7f2:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1 << PB4);
     7f4:	88 b3       	in	r24, 0x18	; 24
     7f6:	8f 7e       	andi	r24, 0xEF	; 239
     7f8:	88 bb       	out	0x18, r24	; 24
	trigPulse();
     7fa:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <trigPulse>
	distance = tCount*1000000.0/F_CPU/58;
     7fe:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <tCount>
     802:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <tCount+0x1>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	34 e2       	ldi	r19, 0x24	; 36
     812:	44 e7       	ldi	r20, 0x74	; 116
     814:	59 e4       	ldi	r21, 0x49	; 73
     816:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	34 e2       	ldi	r19, 0x24	; 36
     81e:	44 e7       	ldi	r20, 0x74	; 116
     820:	59 e4       	ldi	r21, 0x49	; 73
     822:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	48 e6       	ldi	r20, 0x68	; 104
     82c:	52 e4       	ldi	r21, 0x42	; 66
     82e:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     832:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <__data_end>
     836:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <__data_end+0x1>
     83a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end+0x2>
     83e:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__data_end+0x3>
	v_water=13;
     842:	2d e0       	ldi	r18, 0x0D	; 13
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	30 93 2b 02 	sts	0x022B, r19	; 0x80022b <v_water+0x1>
     84a:	20 93 2a 02 	sts	0x022A, r18	; 0x80022a <v_water>
	return retDistance(distance);
     84e:	0e 94 df 03 	call	0x7be	; 0x7be <retDistance>

}
     852:	08 95       	ret

00000854 <ultrasonic2>:


uint8_t ultrasonic2()
{
	PORTB=PORTB | 1 << PB3;
     854:	88 b3       	in	r24, 0x18	; 24
     856:	88 60       	ori	r24, 0x08	; 8
     858:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1 << PB4);
     85a:	88 b3       	in	r24, 0x18	; 24
     85c:	8f 7e       	andi	r24, 0xEF	; 239
     85e:	88 bb       	out	0x18, r24	; 24
	trigPulse();
     860:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <trigPulse>
	distance = tCount*1000000.0/F_CPU/58;
     864:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <tCount>
     868:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <tCount+0x1>
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	34 e2       	ldi	r19, 0x24	; 36
     878:	44 e7       	ldi	r20, 0x74	; 116
     87a:	59 e4       	ldi	r21, 0x49	; 73
     87c:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	34 e2       	ldi	r19, 0x24	; 36
     884:	44 e7       	ldi	r20, 0x74	; 116
     886:	59 e4       	ldi	r21, 0x49	; 73
     888:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     88c:	20 e0       	ldi	r18, 0x00	; 0
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	48 e6       	ldi	r20, 0x68	; 104
     892:	52 e4       	ldi	r21, 0x42	; 66
     894:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     898:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <__data_end>
     89c:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <__data_end+0x1>
     8a0:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end+0x2>
     8a4:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__data_end+0x3>
	return retDistance(distance);
     8a8:	0e 94 df 03 	call	0x7be	; 0x7be <retDistance>

}
     8ac:	08 95       	ret

000008ae <ultrasonic3>:

uint8_t ultrasonic3()
{
	PORTB=PORTB & ~(1 << PB3);
     8ae:	88 b3       	in	r24, 0x18	; 24
     8b0:	87 7f       	andi	r24, 0xF7	; 247
     8b2:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB | 1 << PB4;
     8b4:	88 b3       	in	r24, 0x18	; 24
     8b6:	80 61       	ori	r24, 0x10	; 16
     8b8:	88 bb       	out	0x18, r24	; 24
	trigPulse();
     8ba:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <trigPulse>
	distance = tCount*1000000.0/F_CPU/58;
     8be:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <tCount>
     8c2:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <tCount+0x1>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__floatunsisf>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	34 e2       	ldi	r19, 0x24	; 36
     8d2:	44 e7       	ldi	r20, 0x74	; 116
     8d4:	59 e4       	ldi	r21, 0x49	; 73
     8d6:	0e 94 cd 0b 	call	0x179a	; 0x179a <__mulsf3>
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	34 e2       	ldi	r19, 0x24	; 36
     8de:	44 e7       	ldi	r20, 0x74	; 116
     8e0:	59 e4       	ldi	r21, 0x49	; 73
     8e2:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	48 e6       	ldi	r20, 0x68	; 104
     8ec:	52 e4       	ldi	r21, 0x42	; 66
     8ee:	0e 94 92 0a 	call	0x1524	; 0x1524 <__divsf3>
     8f2:	60 93 fc 01 	sts	0x01FC, r22	; 0x8001fc <__data_end>
     8f6:	70 93 fd 01 	sts	0x01FD, r23	; 0x8001fd <__data_end+0x1>
     8fa:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <__data_end+0x2>
     8fe:	90 93 ff 01 	sts	0x01FF, r25	; 0x8001ff <__data_end+0x3>
	return retDistance(distance);
     902:	0e 94 df 03 	call	0x7be	; 0x7be <retDistance>

}
     906:	08 95       	ret

00000908 <__vector_9>:
	}
	_delay_ms(200);
	
}

ISR(TIMER1_OVF_vect){
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	0f 92       	push	r0
     910:	11 24       	eor	r1, r1
     912:	8f 93       	push	r24
     914:	9f 93       	push	r25
	TCCR1B = 0;
     916:	1e bc       	out	0x2e, r1	; 46
	tCount = 200;
     918:	88 ec       	ldi	r24, 0xC8	; 200
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <tCount+0x1>
     920:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <tCount>
	TCNT1 = 0;
     924:	1d bc       	out	0x2d, r1	; 45
     926:	1c bc       	out	0x2c, r1	; 44
	i = 0;
     928:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <i+0x1>
     92c:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <i>
}
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <__vector_3>:

ISR(INT2_vect)
{
     93e:	1f 92       	push	r1
     940:	0f 92       	push	r0
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	0f 92       	push	r0
     946:	11 24       	eor	r1, r1
     948:	8f 93       	push	r24
     94a:	9f 93       	push	r25
	GICR &= ~(1<<INT2);
     94c:	8b b7       	in	r24, 0x3b	; 59
     94e:	8f 7d       	andi	r24, 0xDF	; 223
     950:	8b bf       	out	0x3b, r24	; 59
	MCUCSR ^= 1 << ISC2;
     952:	94 b7       	in	r25, 0x34	; 52
     954:	80 e4       	ldi	r24, 0x40	; 64
     956:	89 27       	eor	r24, r25
     958:	84 bf       	out	0x34, r24	; 52
	GIFR &= ~(1<< INTF2);
     95a:	8a b7       	in	r24, 0x3a	; 58
     95c:	8f 7d       	andi	r24, 0xDF	; 223
     95e:	8a bf       	out	0x3a, r24	; 58
	GICR |= 1<<INT2;
     960:	8b b7       	in	r24, 0x3b	; 59
     962:	80 62       	ori	r24, 0x20	; 32
     964:	8b bf       	out	0x3b, r24	; 59
	pulseCount3++;
     966:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <pulseCount3>
     96a:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <pulseCount3+0x1>
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <pulseCount3+0x1>
     974:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <pulseCount3>

	if(i == 0)
     978:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <i>
     97c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <i+0x1>
     980:	89 2b       	or	r24, r25
     982:	51 f4       	brne	.+20     	; 0x998 <__vector_3+0x5a>
	{
		TCCR1B |= 1<<CS10;
     984:	8e b5       	in	r24, 0x2e	; 46
     986:	81 60       	ori	r24, 0x01	; 1
     988:	8e bd       	out	0x2e, r24	; 46
		i = 1;
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <i+0x1>
     992:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <i>
     996:	0d c0       	rjmp	.+26     	; 0x9b2 <__vector_3+0x74>
	}
	else
	{
		TCCR1B = 0;
     998:	1e bc       	out	0x2e, r1	; 46
		tCount = TCNT1;
     99a:	8c b5       	in	r24, 0x2c	; 44
     99c:	9d b5       	in	r25, 0x2d	; 45
     99e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <tCount+0x1>
     9a2:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <tCount>
		TCNT1 = 0;
     9a6:	1d bc       	out	0x2d, r1	; 45
     9a8:	1c bc       	out	0x2c, r1	; 44
		i = 0;
     9aa:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <i+0x1>
     9ae:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <i>
	}
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <keyfind>:

char *keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;           /* set port direction as input-output */
     9c0:	80 ef       	ldi	r24, 0xF0	; 240
     9c2:	8a bb       	out	0x1a, r24	; 26
		KEY_PRT = 0xFF;
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	8b bb       	out	0x1b, r24	; 27

		do
		{
			KEY_PRT &= 0x0F;      /* mask PORT for column read only */
     9c8:	8b b3       	in	r24, 0x1b	; 27
     9ca:	8f 70       	andi	r24, 0x0F	; 15
     9cc:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     9ce:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
     9d0:	89 b3       	in	r24, 0x19	; 25
     9d2:	8f 70       	andi	r24, 0x0F	; 15
     9d4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <colloc>
		}while(colloc != 0x0F);
     9d8:	8f 30       	cpi	r24, 0x0F	; 15
     9da:	b1 f7       	brne	.-20     	; 0x9c8 <keyfind+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9dc:	87 e8       	ldi	r24, 0x87	; 135
     9de:	93 e1       	ldi	r25, 0x13	; 19
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <keyfind+0x20>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <keyfind+0x26>
     9e6:	00 00       	nop
			do
			{
				do
				{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
     9e8:	89 b3       	in	r24, 0x19	; 25
     9ea:	8f 70       	andi	r24, 0x0F	; 15
     9ec:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <colloc>
				}while(colloc == 0x0F);        /* check for any key press */
     9f0:	8f 30       	cpi	r24, 0x0F	; 15
     9f2:	a1 f3       	breq	.-24     	; 0x9dc <keyfind+0x1c>
     9f4:	8f e0       	ldi	r24, 0x0F	; 15
     9f6:	97 e2       	ldi	r25, 0x27	; 39
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <keyfind+0x38>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <keyfind+0x3e>
     9fe:	00 00       	nop
				
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
     a00:	89 b3       	in	r24, 0x19	; 25
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <colloc>
			}while(colloc == 0x0F);
     a08:	8f 30       	cpi	r24, 0x0F	; 15
     a0a:	41 f3       	breq	.-48     	; 0x9dc <keyfind+0x1c>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
     a0c:	8f ee       	ldi	r24, 0xEF	; 239
     a0e:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     a10:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     a12:	89 b3       	in	r24, 0x19	; 25
     a14:	8f 70       	andi	r24, 0x0F	; 15
     a16:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <colloc>
			if(colloc != 0x0F)
     a1a:	8f 30       	cpi	r24, 0x0F	; 15
     a1c:	19 f0       	breq	.+6      	; 0xa24 <keyfind+0x64>
			{
				rowloc = 0;
     a1e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <rowloc>
				break;
     a22:	27 c0       	rjmp	.+78     	; 0xa72 <keyfind+0xb2>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
     a24:	8f ed       	ldi	r24, 0xDF	; 223
     a26:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     a28:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     a2a:	89 b3       	in	r24, 0x19	; 25
     a2c:	8f 70       	andi	r24, 0x0F	; 15
     a2e:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <colloc>
			if(colloc != 0x0F)
     a32:	8f 30       	cpi	r24, 0x0F	; 15
     a34:	21 f0       	breq	.+8      	; 0xa3e <keyfind+0x7e>
			{
				rowloc = 1;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <rowloc>
				break;
     a3c:	1a c0       	rjmp	.+52     	; 0xa72 <keyfind+0xb2>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
     a3e:	8f eb       	ldi	r24, 0xBF	; 191
     a40:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     a42:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     a44:	89 b3       	in	r24, 0x19	; 25
     a46:	8f 70       	andi	r24, 0x0F	; 15
     a48:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <colloc>
			if(colloc != 0x0F)
     a4c:	8f 30       	cpi	r24, 0x0F	; 15
     a4e:	21 f0       	breq	.+8      	; 0xa58 <keyfind+0x98>
			{
				rowloc = 2;
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <rowloc>
				break;
     a56:	0d c0       	rjmp	.+26     	; 0xa72 <keyfind+0xb2>
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
     a58:	8f e7       	ldi	r24, 0x7F	; 127
     a5a:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     a5c:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     a5e:	89 b3       	in	r24, 0x19	; 25
     a60:	8f 70       	andi	r24, 0x0F	; 15
     a62:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <colloc>
			if(colloc != 0x0F)
     a66:	8f 30       	cpi	r24, 0x0F	; 15
     a68:	09 f4       	brne	.+2      	; 0xa6c <keyfind+0xac>
     a6a:	aa cf       	rjmp	.-172    	; 0x9c0 <keyfind>
			{
				rowloc = 3;
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <rowloc>
				break;
			}
		}

		if(colloc == 0x0E)
     a72:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <colloc>
     a76:	8e 30       	cpi	r24, 0x0E	; 14
     a78:	71 f4       	brne	.+28     	; 0xa96 <keyfind+0xd6>
		return(keypad[rowloc][0]);
     a7a:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <rowloc>
     a7e:	f0 e0       	ldi	r31, 0x00	; 0
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	ec 59       	subi	r30, 0x9C	; 156
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	80 81       	ld	r24, Z
     a92:	91 81       	ldd	r25, Z+1	; 0x01
     a94:	08 95       	ret
		else if(colloc == 0x0D)
     a96:	8d 30       	cpi	r24, 0x0D	; 13
     a98:	71 f4       	brne	.+28     	; 0xab6 <keyfind+0xf6>
		return(keypad[rowloc][1]);
     a9a:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <rowloc>
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	ee 0f       	add	r30, r30
     aa2:	ff 1f       	adc	r31, r31
     aa4:	ee 0f       	add	r30, r30
     aa6:	ff 1f       	adc	r31, r31
     aa8:	ee 0f       	add	r30, r30
     aaa:	ff 1f       	adc	r31, r31
     aac:	ec 59       	subi	r30, 0x9C	; 156
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	82 81       	ldd	r24, Z+2	; 0x02
     ab2:	93 81       	ldd	r25, Z+3	; 0x03
     ab4:	08 95       	ret
		else if(colloc == 0x0B)
     ab6:	8b 30       	cpi	r24, 0x0B	; 11
     ab8:	71 f4       	brne	.+28     	; 0xad6 <keyfind+0x116>
		return(keypad[rowloc][2]);
     aba:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <rowloc>
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	ec 59       	subi	r30, 0x9C	; 156
     ace:	ff 4f       	sbci	r31, 0xFF	; 255
     ad0:	84 81       	ldd	r24, Z+4	; 0x04
     ad2:	95 81       	ldd	r25, Z+5	; 0x05
     ad4:	08 95       	ret
		else
		return(keypad[rowloc][3]);
     ad6:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <rowloc>
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ec 59       	subi	r30, 0x9C	; 156
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	86 81       	ldd	r24, Z+6	; 0x06
     aee:	97 81       	ldd	r25, Z+7	; 0x07
     af0:	08 95       	ret

00000af2 <stprTrayPsh_init>:
}
void disp_l_low()
{
	lcd_cmd(0x01);
	lcd_cmd(0x80);
	lcd_msg("Latex Level Low!");
     af2:	84 b3       	in	r24, 0x14	; 20
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	84 bb       	out	0x14, r24	; 20
     af8:	85 b3       	in	r24, 0x15	; 21
     afa:	8f 70       	andi	r24, 0x0F	; 15
     afc:	85 bb       	out	0x15, r24	; 21
     afe:	08 95       	ret

00000b00 <stprMix_init>:
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	81 bb       	out	0x11, r24	; 17
     b04:	12 ba       	out	0x12, r1	; 18
     b06:	08 95       	ret

00000b08 <stprTrayPsh_clk>:
     b08:	ac 01       	movw	r20, r24
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	2a c0       	rjmp	.+84     	; 0xb64 <stprTrayPsh_clk+0x5c>
     b10:	95 b3       	in	r25, 0x15	; 21
     b12:	9f 70       	andi	r25, 0x0F	; 15
     b14:	90 69       	ori	r25, 0x90	; 144
     b16:	95 bb       	out	0x15, r25	; 21
     b18:	8b ed       	ldi	r24, 0xDB	; 219
     b1a:	95 e0       	ldi	r25, 0x05	; 5
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	f1 f7       	brne	.-4      	; 0xb1c <stprTrayPsh_clk+0x14>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <stprTrayPsh_clk+0x1a>
     b22:	00 00       	nop
     b24:	95 b3       	in	r25, 0x15	; 21
     b26:	9f 70       	andi	r25, 0x0F	; 15
     b28:	90 6c       	ori	r25, 0xC0	; 192
     b2a:	95 bb       	out	0x15, r25	; 21
     b2c:	8b ed       	ldi	r24, 0xDB	; 219
     b2e:	95 e0       	ldi	r25, 0x05	; 5
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <stprTrayPsh_clk+0x28>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <stprTrayPsh_clk+0x2e>
     b36:	00 00       	nop
     b38:	95 b3       	in	r25, 0x15	; 21
     b3a:	9f 70       	andi	r25, 0x0F	; 15
     b3c:	90 66       	ori	r25, 0x60	; 96
     b3e:	95 bb       	out	0x15, r25	; 21
     b40:	8b ed       	ldi	r24, 0xDB	; 219
     b42:	95 e0       	ldi	r25, 0x05	; 5
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <stprTrayPsh_clk+0x3c>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <stprTrayPsh_clk+0x42>
     b4a:	00 00       	nop
     b4c:	95 b3       	in	r25, 0x15	; 21
     b4e:	9f 70       	andi	r25, 0x0F	; 15
     b50:	90 63       	ori	r25, 0x30	; 48
     b52:	95 bb       	out	0x15, r25	; 21
     b54:	8b ed       	ldi	r24, 0xDB	; 219
     b56:	95 e0       	ldi	r25, 0x05	; 5
     b58:	01 97       	sbiw	r24, 0x01	; 1
     b5a:	f1 f7       	brne	.-4      	; 0xb58 <stprTrayPsh_clk+0x50>
     b5c:	00 c0       	rjmp	.+0      	; 0xb5e <stprTrayPsh_clk+0x56>
     b5e:	00 00       	nop
     b60:	2f 5f       	subi	r18, 0xFF	; 255
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	24 17       	cp	r18, r20
     b66:	35 07       	cpc	r19, r21
     b68:	9c f2       	brlt	.-90     	; 0xb10 <stprTrayPsh_clk+0x8>
     b6a:	85 b3       	in	r24, 0x15	; 21
     b6c:	8f 70       	andi	r24, 0x0F	; 15
     b6e:	80 69       	ori	r24, 0x90	; 144
     b70:	85 bb       	out	0x15, r24	; 21
     b72:	8b ed       	ldi	r24, 0xDB	; 219
     b74:	95 e0       	ldi	r25, 0x05	; 5
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <stprTrayPsh_clk+0x6e>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <stprTrayPsh_clk+0x74>
     b7c:	00 00       	nop
     b7e:	08 95       	ret

00000b80 <stprTrayPsh_aclk>:
     b80:	ac 01       	movw	r20, r24
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	2a c0       	rjmp	.+84     	; 0xbdc <stprTrayPsh_aclk+0x5c>
     b88:	95 b3       	in	r25, 0x15	; 21
     b8a:	9f 70       	andi	r25, 0x0F	; 15
     b8c:	90 63       	ori	r25, 0x30	; 48
     b8e:	95 bb       	out	0x15, r25	; 21
     b90:	8b ed       	ldi	r24, 0xDB	; 219
     b92:	95 e0       	ldi	r25, 0x05	; 5
     b94:	01 97       	sbiw	r24, 0x01	; 1
     b96:	f1 f7       	brne	.-4      	; 0xb94 <stprTrayPsh_aclk+0x14>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <stprTrayPsh_aclk+0x1a>
     b9a:	00 00       	nop
     b9c:	95 b3       	in	r25, 0x15	; 21
     b9e:	9f 70       	andi	r25, 0x0F	; 15
     ba0:	90 66       	ori	r25, 0x60	; 96
     ba2:	95 bb       	out	0x15, r25	; 21
     ba4:	8b ed       	ldi	r24, 0xDB	; 219
     ba6:	95 e0       	ldi	r25, 0x05	; 5
     ba8:	01 97       	sbiw	r24, 0x01	; 1
     baa:	f1 f7       	brne	.-4      	; 0xba8 <stprTrayPsh_aclk+0x28>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <stprTrayPsh_aclk+0x2e>
     bae:	00 00       	nop
     bb0:	95 b3       	in	r25, 0x15	; 21
     bb2:	9f 70       	andi	r25, 0x0F	; 15
     bb4:	90 6c       	ori	r25, 0xC0	; 192
     bb6:	95 bb       	out	0x15, r25	; 21
     bb8:	8b ed       	ldi	r24, 0xDB	; 219
     bba:	95 e0       	ldi	r25, 0x05	; 5
     bbc:	01 97       	sbiw	r24, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <stprTrayPsh_aclk+0x3c>
     bc0:	00 c0       	rjmp	.+0      	; 0xbc2 <stprTrayPsh_aclk+0x42>
     bc2:	00 00       	nop
     bc4:	95 b3       	in	r25, 0x15	; 21
     bc6:	9f 70       	andi	r25, 0x0F	; 15
     bc8:	90 69       	ori	r25, 0x90	; 144
     bca:	95 bb       	out	0x15, r25	; 21
     bcc:	8b ed       	ldi	r24, 0xDB	; 219
     bce:	95 e0       	ldi	r25, 0x05	; 5
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <stprTrayPsh_aclk+0x50>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <stprTrayPsh_aclk+0x56>
     bd6:	00 00       	nop
     bd8:	2f 5f       	subi	r18, 0xFF	; 255
     bda:	3f 4f       	sbci	r19, 0xFF	; 255
     bdc:	24 17       	cp	r18, r20
     bde:	35 07       	cpc	r19, r21
     be0:	9c f2       	brlt	.-90     	; 0xb88 <stprTrayPsh_aclk+0x8>
     be2:	85 b3       	in	r24, 0x15	; 21
     be4:	8f 70       	andi	r24, 0x0F	; 15
     be6:	80 69       	ori	r24, 0x90	; 144
     be8:	85 bb       	out	0x15, r24	; 21
     bea:	8b ed       	ldi	r24, 0xDB	; 219
     bec:	95 e0       	ldi	r25, 0x05	; 5
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <stprTrayPsh_aclk+0x6e>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <stprTrayPsh_aclk+0x74>
     bf4:	00 00       	nop
     bf6:	08 95       	ret

00000bf8 <stprMix_clk>:
     bf8:	ac 01       	movw	r20, r24
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	2a c0       	rjmp	.+84     	; 0xc54 <stprMix_clk+0x5c>
     c00:	92 b3       	in	r25, 0x12	; 18
     c02:	9f 70       	andi	r25, 0x0F	; 15
     c04:	90 69       	ori	r25, 0x90	; 144
     c06:	92 bb       	out	0x12, r25	; 18
     c08:	8b ed       	ldi	r24, 0xDB	; 219
     c0a:	95 e0       	ldi	r25, 0x05	; 5
     c0c:	01 97       	sbiw	r24, 0x01	; 1
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <stprMix_clk+0x14>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <stprMix_clk+0x1a>
     c12:	00 00       	nop
     c14:	92 b3       	in	r25, 0x12	; 18
     c16:	9f 70       	andi	r25, 0x0F	; 15
     c18:	90 6c       	ori	r25, 0xC0	; 192
     c1a:	92 bb       	out	0x12, r25	; 18
     c1c:	8b ed       	ldi	r24, 0xDB	; 219
     c1e:	95 e0       	ldi	r25, 0x05	; 5
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <stprMix_clk+0x28>
     c24:	00 c0       	rjmp	.+0      	; 0xc26 <stprMix_clk+0x2e>
     c26:	00 00       	nop
     c28:	92 b3       	in	r25, 0x12	; 18
     c2a:	9f 70       	andi	r25, 0x0F	; 15
     c2c:	90 66       	ori	r25, 0x60	; 96
     c2e:	92 bb       	out	0x12, r25	; 18
     c30:	8b ed       	ldi	r24, 0xDB	; 219
     c32:	95 e0       	ldi	r25, 0x05	; 5
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <stprMix_clk+0x3c>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <stprMix_clk+0x42>
     c3a:	00 00       	nop
     c3c:	92 b3       	in	r25, 0x12	; 18
     c3e:	9f 70       	andi	r25, 0x0F	; 15
     c40:	90 63       	ori	r25, 0x30	; 48
     c42:	92 bb       	out	0x12, r25	; 18
     c44:	8b ed       	ldi	r24, 0xDB	; 219
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <stprMix_clk+0x50>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <stprMix_clk+0x56>
     c4e:	00 00       	nop
     c50:	2f 5f       	subi	r18, 0xFF	; 255
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	24 17       	cp	r18, r20
     c56:	35 07       	cpc	r19, r21
     c58:	9c f2       	brlt	.-90     	; 0xc00 <stprMix_clk+0x8>
     c5a:	82 b3       	in	r24, 0x12	; 18
     c5c:	8f 70       	andi	r24, 0x0F	; 15
     c5e:	80 69       	ori	r24, 0x90	; 144
     c60:	82 bb       	out	0x12, r24	; 18
     c62:	8b ed       	ldi	r24, 0xDB	; 219
     c64:	95 e0       	ldi	r25, 0x05	; 5
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <stprMix_clk+0x6e>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <stprMix_clk+0x74>
     c6c:	00 00       	nop
     c6e:	08 95       	ret

00000c70 <stprMix_aclk>:
     c70:	ac 01       	movw	r20, r24
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	2a c0       	rjmp	.+84     	; 0xccc <stprMix_aclk+0x5c>
     c78:	92 b3       	in	r25, 0x12	; 18
     c7a:	9f 70       	andi	r25, 0x0F	; 15
     c7c:	90 63       	ori	r25, 0x30	; 48
     c7e:	92 bb       	out	0x12, r25	; 18
     c80:	8b ed       	ldi	r24, 0xDB	; 219
     c82:	95 e0       	ldi	r25, 0x05	; 5
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <stprMix_aclk+0x14>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <stprMix_aclk+0x1a>
     c8a:	00 00       	nop
     c8c:	92 b3       	in	r25, 0x12	; 18
     c8e:	9f 70       	andi	r25, 0x0F	; 15
     c90:	90 66       	ori	r25, 0x60	; 96
     c92:	92 bb       	out	0x12, r25	; 18
     c94:	8b ed       	ldi	r24, 0xDB	; 219
     c96:	95 e0       	ldi	r25, 0x05	; 5
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <stprMix_aclk+0x28>
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <stprMix_aclk+0x2e>
     c9e:	00 00       	nop
     ca0:	92 b3       	in	r25, 0x12	; 18
     ca2:	9f 70       	andi	r25, 0x0F	; 15
     ca4:	90 6c       	ori	r25, 0xC0	; 192
     ca6:	92 bb       	out	0x12, r25	; 18
     ca8:	8b ed       	ldi	r24, 0xDB	; 219
     caa:	95 e0       	ldi	r25, 0x05	; 5
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	f1 f7       	brne	.-4      	; 0xcac <stprMix_aclk+0x3c>
     cb0:	00 c0       	rjmp	.+0      	; 0xcb2 <stprMix_aclk+0x42>
     cb2:	00 00       	nop
     cb4:	92 b3       	in	r25, 0x12	; 18
     cb6:	9f 70       	andi	r25, 0x0F	; 15
     cb8:	90 69       	ori	r25, 0x90	; 144
     cba:	92 bb       	out	0x12, r25	; 18
     cbc:	8b ed       	ldi	r24, 0xDB	; 219
     cbe:	95 e0       	ldi	r25, 0x05	; 5
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <stprMix_aclk+0x50>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <stprMix_aclk+0x56>
     cc6:	00 00       	nop
     cc8:	2f 5f       	subi	r18, 0xFF	; 255
     cca:	3f 4f       	sbci	r19, 0xFF	; 255
     ccc:	24 17       	cp	r18, r20
     cce:	35 07       	cpc	r19, r21
     cd0:	9c f2       	brlt	.-90     	; 0xc78 <stprMix_aclk+0x8>
     cd2:	82 b3       	in	r24, 0x12	; 18
     cd4:	8f 70       	andi	r24, 0x0F	; 15
     cd6:	80 69       	ori	r24, 0x90	; 144
     cd8:	82 bb       	out	0x12, r24	; 18
     cda:	8b ed       	ldi	r24, 0xDB	; 219
     cdc:	95 e0       	ldi	r25, 0x05	; 5
     cde:	01 97       	sbiw	r24, 0x01	; 1
     ce0:	f1 f7       	brne	.-4      	; 0xcde <stprMix_aclk+0x6e>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <stprMix_aclk+0x74>
     ce4:	00 00       	nop
     ce6:	08 95       	ret

00000ce8 <dc_init>:
     ce8:	81 b3       	in	r24, 0x11	; 17
     cea:	83 60       	ori	r24, 0x03	; 3
     cec:	81 bb       	out	0x11, r24	; 17
     cee:	82 b3       	in	r24, 0x12	; 18
     cf0:	82 bb       	out	0x12, r24	; 18
     cf2:	82 b3       	in	r24, 0x12	; 18
     cf4:	82 bb       	out	0x12, r24	; 18
     cf6:	08 95       	ret

00000cf8 <dc_stp>:
     cf8:	82 b3       	in	r24, 0x12	; 18
     cfa:	8c 7f       	andi	r24, 0xFC	; 252
     cfc:	82 bb       	out	0x12, r24	; 18
     cfe:	08 95       	ret

00000d00 <dc_aclk>:
     d00:	22 b3       	in	r18, 0x12	; 18
     d02:	21 60       	ori	r18, 0x01	; 1
     d04:	22 bb       	out	0x12, r18	; 18
     d06:	07 c0       	rjmp	.+14     	; 0xd16 <dc_aclk+0x16>
     d08:	89 ef       	ldi	r24, 0xF9	; 249
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <dc_aclk+0xc>
     d10:	00 c0       	rjmp	.+0      	; 0xd12 <dc_aclk+0x12>
     d12:	00 00       	nop
     d14:	c9 01       	movw	r24, r18
     d16:	9c 01       	movw	r18, r24
     d18:	21 50       	subi	r18, 0x01	; 1
     d1a:	31 09       	sbc	r19, r1
     d1c:	89 2b       	or	r24, r25
     d1e:	a1 f7       	brne	.-24     	; 0xd08 <dc_aclk+0x8>
     d20:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <dc_stp>
     d24:	08 95       	ret

00000d26 <dc_clk>:
     d26:	22 b3       	in	r18, 0x12	; 18
     d28:	22 60       	ori	r18, 0x02	; 2
     d2a:	22 bb       	out	0x12, r18	; 18
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <dc_clk+0x16>
     d2e:	89 ef       	ldi	r24, 0xF9	; 249
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <dc_clk+0xc>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <dc_clk+0x12>
     d38:	00 00       	nop
     d3a:	c9 01       	movw	r24, r18
     d3c:	9c 01       	movw	r18, r24
     d3e:	21 50       	subi	r18, 0x01	; 1
     d40:	31 09       	sbc	r19, r1
     d42:	89 2b       	or	r24, r25
     d44:	a1 f7       	brne	.-24     	; 0xd2e <dc_clk+0x8>
     d46:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <dc_stp>
     d4a:	08 95       	ret

00000d4c <acvt_mixer>:
     d4c:	0e 94 74 06 	call	0xce8	; 0xce8 <dc_init>
     d50:	84 ec       	ldi	r24, 0xC4	; 196
     d52:	99 e0       	ldi	r25, 0x09	; 9
     d54:	0e 94 93 06 	call	0xd26	; 0xd26 <dc_clk>
     d58:	84 ec       	ldi	r24, 0xC4	; 196
     d5a:	99 e0       	ldi	r25, 0x09	; 9
     d5c:	0e 94 80 06 	call	0xd00	; 0xd00 <dc_aclk>
     d60:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <dc_stp>
     d64:	08 95       	ret

00000d66 <switchon>:
     d66:	84 b3       	in	r24, 0x14	; 20
     d68:	88 60       	ori	r24, 0x08	; 8
     d6a:	84 bb       	out	0x14, r24	; 20
     d6c:	85 b3       	in	r24, 0x15	; 21
     d6e:	87 7f       	andi	r24, 0xF7	; 247
     d70:	85 bb       	out	0x15, r24	; 21
     d72:	85 b3       	in	r24, 0x15	; 21
     d74:	88 60       	ori	r24, 0x08	; 8
     d76:	85 bb       	out	0x15, r24	; 21
     d78:	08 95       	ret

00000d7a <switchoff>:
     d7a:	84 b3       	in	r24, 0x14	; 20
     d7c:	88 60       	ori	r24, 0x08	; 8
     d7e:	84 bb       	out	0x14, r24	; 20
     d80:	85 b3       	in	r24, 0x15	; 21
     d82:	87 7f       	andi	r24, 0xF7	; 247
     d84:	85 bb       	out	0x15, r24	; 21
     d86:	85 b3       	in	r24, 0x15	; 21
     d88:	87 7f       	andi	r24, 0xF7	; 247
     d8a:	85 bb       	out	0x15, r24	; 21
     d8c:	08 95       	ret

00000d8e <ir_init>:
     d8e:	80 ef       	ldi	r24, 0xF0	; 240
     d90:	84 bb       	out	0x14, r24	; 20
     d92:	8f e0       	ldi	r24, 0x0F	; 15
     d94:	85 bb       	out	0x15, r24	; 21
     d96:	08 95       	ret

00000d98 <act_IR>:
     d98:	0e 94 c7 06 	call	0xd8e	; 0xd8e <ir_init>
     d9c:	9a 9b       	sbis	0x13, 2	; 19
     d9e:	fe cf       	rjmp	.-4      	; 0xd9c <act_IR+0x4>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	08 95       	ret

00000da6 <i2c_init>:
     da6:	82 e6       	ldi	r24, 0x62	; 98
     da8:	80 b9       	out	0x00, r24	; 0
     daa:	84 e0       	ldi	r24, 0x04	; 4
     dac:	86 bf       	out	0x36, r24	; 54
     dae:	11 b8       	out	0x01, r1	; 1
     db0:	08 95       	ret

00000db2 <i2c_start>:
     db2:	84 ea       	ldi	r24, 0xA4	; 164
     db4:	86 bf       	out	0x36, r24	; 54
     db6:	06 b6       	in	r0, 0x36	; 54
     db8:	07 fe       	sbrs	r0, 7
     dba:	fd cf       	rjmp	.-6      	; 0xdb6 <i2c_start+0x4>
     dbc:	08 95       	ret

00000dbe <i2c_write>:
     dbe:	83 b9       	out	0x03, r24	; 3
     dc0:	84 e8       	ldi	r24, 0x84	; 132
     dc2:	86 bf       	out	0x36, r24	; 54
     dc4:	06 b6       	in	r0, 0x36	; 54
     dc6:	07 fe       	sbrs	r0, 7
     dc8:	fd cf       	rjmp	.-6      	; 0xdc4 <i2c_write+0x6>
     dca:	08 95       	ret

00000dcc <delay>:
     dcc:	40 e0       	ldi	r20, 0x00	; 0
     dce:	50 e0       	ldi	r21, 0x00	; 0
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <delay+0x1a>
     dd2:	2f 5f       	subi	r18, 0xFF	; 255
     dd4:	3f 4f       	sbci	r19, 0xFF	; 255
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <delay+0x10>
     dd8:	20 e0       	ldi	r18, 0x00	; 0
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	29 37       	cpi	r18, 0x79	; 121
     dde:	31 05       	cpc	r19, r1
     de0:	c4 f3       	brlt	.-16     	; 0xdd2 <delay+0x6>
     de2:	4f 5f       	subi	r20, 0xFF	; 255
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	84 17       	cp	r24, r20
     de8:	95 07       	cpc	r25, r21
     dea:	b4 f7       	brge	.-20     	; 0xdd8 <delay+0xc>
     dec:	08 95       	ret

00000dee <toggle>:
     dee:	83 b1       	in	r24, 0x03	; 3
     df0:	82 60       	ori	r24, 0x02	; 2
     df2:	83 b9       	out	0x03, r24	; 3
     df4:	84 e8       	ldi	r24, 0x84	; 132
     df6:	86 bf       	out	0x36, r24	; 54
     df8:	06 b6       	in	r0, 0x36	; 54
     dfa:	07 fe       	sbrs	r0, 7
     dfc:	fd cf       	rjmp	.-6      	; 0xdf8 <toggle+0xa>
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 e6 06 	call	0xdcc	; 0xdcc <delay>
     e06:	83 b1       	in	r24, 0x03	; 3
     e08:	8d 7f       	andi	r24, 0xFD	; 253
     e0a:	83 b9       	out	0x03, r24	; 3
     e0c:	84 e8       	ldi	r24, 0x84	; 132
     e0e:	86 bf       	out	0x36, r24	; 54
     e10:	06 b6       	in	r0, 0x36	; 54
     e12:	07 fe       	sbrs	r0, 7
     e14:	fd cf       	rjmp	.-6      	; 0xe10 <toggle+0x22>
     e16:	08 95       	ret

00000e18 <lcd_cmd_hf>:
     e18:	93 b1       	in	r25, 0x03	; 3
     e1a:	9e 7f       	andi	r25, 0xFE	; 254
     e1c:	93 b9       	out	0x03, r25	; 3
     e1e:	94 e8       	ldi	r25, 0x84	; 132
     e20:	96 bf       	out	0x36, r25	; 54
     e22:	06 b6       	in	r0, 0x36	; 54
     e24:	07 fe       	sbrs	r0, 7
     e26:	fd cf       	rjmp	.-6      	; 0xe22 <lcd_cmd_hf+0xa>
     e28:	93 b1       	in	r25, 0x03	; 3
     e2a:	9f 70       	andi	r25, 0x0F	; 15
     e2c:	93 b9       	out	0x03, r25	; 3
     e2e:	94 e8       	ldi	r25, 0x84	; 132
     e30:	96 bf       	out	0x36, r25	; 54
     e32:	06 b6       	in	r0, 0x36	; 54
     e34:	07 fe       	sbrs	r0, 7
     e36:	fd cf       	rjmp	.-6      	; 0xe32 <lcd_cmd_hf+0x1a>
     e38:	93 b1       	in	r25, 0x03	; 3
     e3a:	80 7f       	andi	r24, 0xF0	; 240
     e3c:	89 2b       	or	r24, r25
     e3e:	83 b9       	out	0x03, r24	; 3
     e40:	84 e8       	ldi	r24, 0x84	; 132
     e42:	86 bf       	out	0x36, r24	; 54
     e44:	06 b6       	in	r0, 0x36	; 54
     e46:	07 fe       	sbrs	r0, 7
     e48:	fd cf       	rjmp	.-6      	; 0xe44 <lcd_cmd_hf+0x2c>
     e4a:	0e 94 f7 06 	call	0xdee	; 0xdee <toggle>
     e4e:	08 95       	ret

00000e50 <lcd_cmd>:
     e50:	cf 93       	push	r28
     e52:	c8 2f       	mov	r28, r24
     e54:	83 b1       	in	r24, 0x03	; 3
     e56:	8e 7f       	andi	r24, 0xFE	; 254
     e58:	83 b9       	out	0x03, r24	; 3
     e5a:	84 e8       	ldi	r24, 0x84	; 132
     e5c:	86 bf       	out	0x36, r24	; 54
     e5e:	06 b6       	in	r0, 0x36	; 54
     e60:	07 fe       	sbrs	r0, 7
     e62:	fd cf       	rjmp	.-6      	; 0xe5e <lcd_cmd+0xe>
     e64:	83 b1       	in	r24, 0x03	; 3
     e66:	8f 70       	andi	r24, 0x0F	; 15
     e68:	83 b9       	out	0x03, r24	; 3
     e6a:	84 e8       	ldi	r24, 0x84	; 132
     e6c:	86 bf       	out	0x36, r24	; 54
     e6e:	06 b6       	in	r0, 0x36	; 54
     e70:	07 fe       	sbrs	r0, 7
     e72:	fd cf       	rjmp	.-6      	; 0xe6e <lcd_cmd+0x1e>
     e74:	83 b1       	in	r24, 0x03	; 3
     e76:	9c 2f       	mov	r25, r28
     e78:	90 7f       	andi	r25, 0xF0	; 240
     e7a:	89 2b       	or	r24, r25
     e7c:	83 b9       	out	0x03, r24	; 3
     e7e:	84 e8       	ldi	r24, 0x84	; 132
     e80:	86 bf       	out	0x36, r24	; 54
     e82:	06 b6       	in	r0, 0x36	; 54
     e84:	07 fe       	sbrs	r0, 7
     e86:	fd cf       	rjmp	.-6      	; 0xe82 <lcd_cmd+0x32>
     e88:	0e 94 f7 06 	call	0xdee	; 0xdee <toggle>
     e8c:	83 b1       	in	r24, 0x03	; 3
     e8e:	8f 70       	andi	r24, 0x0F	; 15
     e90:	83 b9       	out	0x03, r24	; 3
     e92:	84 e8       	ldi	r24, 0x84	; 132
     e94:	86 bf       	out	0x36, r24	; 54
     e96:	06 b6       	in	r0, 0x36	; 54
     e98:	07 fe       	sbrs	r0, 7
     e9a:	fd cf       	rjmp	.-6      	; 0xe96 <lcd_cmd+0x46>
     e9c:	23 b1       	in	r18, 0x03	; 3
     e9e:	30 e1       	ldi	r19, 0x10	; 16
     ea0:	c3 9f       	mul	r28, r19
     ea2:	c0 01       	movw	r24, r0
     ea4:	11 24       	eor	r1, r1
     ea6:	82 2b       	or	r24, r18
     ea8:	83 b9       	out	0x03, r24	; 3
     eaa:	84 e8       	ldi	r24, 0x84	; 132
     eac:	86 bf       	out	0x36, r24	; 54
     eae:	06 b6       	in	r0, 0x36	; 54
     eb0:	07 fe       	sbrs	r0, 7
     eb2:	fd cf       	rjmp	.-6      	; 0xeae <lcd_cmd+0x5e>
     eb4:	0e 94 f7 06 	call	0xdee	; 0xdee <toggle>
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <lcd_init>:
     ebc:	80 e3       	ldi	r24, 0x30	; 48
     ebe:	0e 94 0c 07 	call	0xe18	; 0xe18 <lcd_cmd_hf>
     ec2:	80 e3       	ldi	r24, 0x30	; 48
     ec4:	0e 94 0c 07 	call	0xe18	; 0xe18 <lcd_cmd_hf>
     ec8:	80 e2       	ldi	r24, 0x20	; 32
     eca:	0e 94 0c 07 	call	0xe18	; 0xe18 <lcd_cmd_hf>
     ece:	88 e2       	ldi	r24, 0x28	; 40
     ed0:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     ed4:	8c e0       	ldi	r24, 0x0C	; 12
     ed6:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     ee0:	86 e0       	ldi	r24, 0x06	; 6
     ee2:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     ee6:	80 e8       	ldi	r24, 0x80	; 128
     ee8:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     eec:	08 95       	ret

00000eee <lcd_dwr>:
     eee:	cf 93       	push	r28
     ef0:	c8 2f       	mov	r28, r24
     ef2:	83 b1       	in	r24, 0x03	; 3
     ef4:	81 60       	ori	r24, 0x01	; 1
     ef6:	83 b9       	out	0x03, r24	; 3
     ef8:	84 e8       	ldi	r24, 0x84	; 132
     efa:	86 bf       	out	0x36, r24	; 54
     efc:	06 b6       	in	r0, 0x36	; 54
     efe:	07 fe       	sbrs	r0, 7
     f00:	fd cf       	rjmp	.-6      	; 0xefc <lcd_dwr+0xe>
     f02:	83 b1       	in	r24, 0x03	; 3
     f04:	8f 70       	andi	r24, 0x0F	; 15
     f06:	83 b9       	out	0x03, r24	; 3
     f08:	84 e8       	ldi	r24, 0x84	; 132
     f0a:	86 bf       	out	0x36, r24	; 54
     f0c:	06 b6       	in	r0, 0x36	; 54
     f0e:	07 fe       	sbrs	r0, 7
     f10:	fd cf       	rjmp	.-6      	; 0xf0c <lcd_dwr+0x1e>
     f12:	83 b1       	in	r24, 0x03	; 3
     f14:	9c 2f       	mov	r25, r28
     f16:	90 7f       	andi	r25, 0xF0	; 240
     f18:	89 2b       	or	r24, r25
     f1a:	83 b9       	out	0x03, r24	; 3
     f1c:	84 e8       	ldi	r24, 0x84	; 132
     f1e:	86 bf       	out	0x36, r24	; 54
     f20:	06 b6       	in	r0, 0x36	; 54
     f22:	07 fe       	sbrs	r0, 7
     f24:	fd cf       	rjmp	.-6      	; 0xf20 <lcd_dwr+0x32>
     f26:	0e 94 f7 06 	call	0xdee	; 0xdee <toggle>
     f2a:	83 b1       	in	r24, 0x03	; 3
     f2c:	8f 70       	andi	r24, 0x0F	; 15
     f2e:	83 b9       	out	0x03, r24	; 3
     f30:	84 e8       	ldi	r24, 0x84	; 132
     f32:	86 bf       	out	0x36, r24	; 54
     f34:	06 b6       	in	r0, 0x36	; 54
     f36:	07 fe       	sbrs	r0, 7
     f38:	fd cf       	rjmp	.-6      	; 0xf34 <lcd_dwr+0x46>
     f3a:	23 b1       	in	r18, 0x03	; 3
     f3c:	30 e1       	ldi	r19, 0x10	; 16
     f3e:	c3 9f       	mul	r28, r19
     f40:	c0 01       	movw	r24, r0
     f42:	11 24       	eor	r1, r1
     f44:	82 2b       	or	r24, r18
     f46:	83 b9       	out	0x03, r24	; 3
     f48:	84 e8       	ldi	r24, 0x84	; 132
     f4a:	86 bf       	out	0x36, r24	; 54
     f4c:	06 b6       	in	r0, 0x36	; 54
     f4e:	07 fe       	sbrs	r0, 7
     f50:	fd cf       	rjmp	.-6      	; 0xf4c <lcd_dwr+0x5e>
     f52:	0e 94 f7 06 	call	0xdee	; 0xdee <toggle>
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <lcd_msg>:
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	ec 01       	movw	r28, r24
     f60:	03 c0       	rjmp	.+6      	; 0xf68 <lcd_msg+0xe>
     f62:	21 96       	adiw	r28, 0x01	; 1
     f64:	0e 94 77 07 	call	0xeee	; 0xeee <lcd_dwr>
     f68:	88 81       	ld	r24, Y
     f6a:	81 11       	cpse	r24, r1
     f6c:	fa cf       	rjmp	.-12     	; 0xf62 <lcd_msg+0x8>
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	08 95       	ret

00000f74 <wlcm_msg>:
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	0e 94 d3 06 	call	0xda6	; 0xda6 <i2c_init>
     f7c:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <i2c_start>
     f80:	80 e7       	ldi	r24, 0x70	; 112
     f82:	0e 94 df 06 	call	0xdbe	; 0xdbe <i2c_write>
     f86:	0e 94 5e 07 	call	0xebc	; 0xebc <lcd_init>
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     f90:	8c e9       	ldi	r24, 0x9C	; 156
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
     f98:	80 ec       	ldi	r24, 0xC0	; 192
     f9a:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     f9e:	84 e1       	ldi	r24, 0x14	; 20
     fa0:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     fa4:	84 e1       	ldi	r24, 0x14	; 20
     fa6:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     faa:	84 e1       	ldi	r24, 0x14	; 20
     fac:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     fb0:	84 e1       	ldi	r24, 0x14	; 20
     fb2:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     fb6:	86 eb       	ldi	r24, 0xB6	; 182
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
     fbe:	2f e9       	ldi	r18, 0x9F	; 159
     fc0:	86 e8       	ldi	r24, 0x86	; 134
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	21 50       	subi	r18, 0x01	; 1
     fc6:	80 40       	sbci	r24, 0x00	; 0
     fc8:	90 40       	sbci	r25, 0x00	; 0
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <wlcm_msg+0x50>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <wlcm_msg+0x5a>
     fce:	00 00       	nop
     fd0:	c0 e0       	ldi	r28, 0x00	; 0
     fd2:	d0 e0       	ldi	r29, 0x00	; 0
     fd4:	0a c0       	rjmp	.+20     	; 0xfea <wlcm_msg+0x76>
     fd6:	88 e1       	ldi	r24, 0x18	; 24
     fd8:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
     fdc:	87 ea       	ldi	r24, 0xA7	; 167
     fde:	91 e6       	ldi	r25, 0x61	; 97
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <wlcm_msg+0x6c>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <wlcm_msg+0x72>
     fe6:	00 00       	nop
     fe8:	21 96       	adiw	r28, 0x01	; 1
     fea:	cb 31       	cpi	r28, 0x1B	; 27
     fec:	d1 05       	cpc	r29, r1
     fee:	9c f3       	brlt	.-26     	; 0xfd6 <wlcm_msg+0x62>
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <num_tray>:
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	64 97       	sbiw	r28, 0x14	; 20
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    1018:	80 e8       	ldi	r24, 0x80	; 128
    101a:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    101e:	8e eb       	ldi	r24, 0xBE	; 190
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    1026:	80 ec       	ldi	r24, 0xC0	; 192
    1028:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    102c:	8f e0       	ldi	r24, 0x0F	; 15
    102e:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	10 e0       	ldi	r17, 0x00	; 0
    1036:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <keyfind>
    103a:	bc 01       	movw	r22, r24
    103c:	ce 01       	movw	r24, r28
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	0e 94 85 0c 	call	0x190a	; 0x190a <strcpy>
    1044:	68 e9       	ldi	r22, 0x98	; 152
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <strcmp>
    1050:	89 2b       	or	r24, r25
    1052:	01 f5       	brne	.+64     	; 0x1094 <num_tray+0x9e>
    1054:	10 16       	cp	r1, r16
    1056:	11 06       	cpc	r1, r17
    1058:	74 f5       	brge	.+92     	; 0x10b6 <num_tray+0xc0>
    105a:	80 e1       	ldi	r24, 0x10	; 16
    105c:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    1060:	86 e9       	ldi	r24, 0x96	; 150
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    1068:	80 e1       	ldi	r24, 0x10	; 16
    106a:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    106e:	80 e1       	ldi	r24, 0x10	; 16
    1070:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    1074:	84 e1       	ldi	r24, 0x14	; 20
    1076:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    107a:	01 50       	subi	r16, 0x01	; 1
    107c:	11 09       	sbc	r17, r1
    107e:	eb e0       	ldi	r30, 0x0B	; 11
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	ec 0f       	add	r30, r28
    1084:	fd 1f       	adc	r31, r29
    1086:	e0 0f       	add	r30, r16
    1088:	f1 1f       	adc	r31, r17
    108a:	80 e2       	ldi	r24, 0x20	; 32
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
    1092:	11 c0       	rjmp	.+34     	; 0x10b6 <num_tray+0xc0>
    1094:	ce 01       	movw	r24, r28
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    109c:	be 01       	movw	r22, r28
    109e:	6f 5f       	subi	r22, 0xFF	; 255
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	8b e0       	ldi	r24, 0x0B	; 11
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	8c 0f       	add	r24, r28
    10a8:	9d 1f       	adc	r25, r29
    10aa:	80 0f       	add	r24, r16
    10ac:	91 1f       	adc	r25, r17
    10ae:	0e 94 85 0c 	call	0x190a	; 0x190a <strcpy>
    10b2:	0f 5f       	subi	r16, 0xFF	; 255
    10b4:	1f 4f       	sbci	r17, 0xFF	; 255
    10b6:	66 e9       	ldi	r22, 0x96	; 150
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	ce 01       	movw	r24, r28
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <strcmp>
    10c2:	7c 01       	movw	r14, r24
    10c4:	ce 01       	movw	r24, r28
    10c6:	0b 96       	adiw	r24, 0x0b	; 11
    10c8:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <atoi>
    10cc:	ac 01       	movw	r20, r24
    10ce:	21 e0       	ldi	r18, 0x01	; 1
    10d0:	ef 28       	or	r14, r15
    10d2:	09 f4       	brne	.+2      	; 0x10d6 <num_tray+0xe0>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	41 15       	cp	r20, r1
    10da:	51 05       	cpc	r21, r1
    10dc:	09 f0       	breq	.+2      	; 0x10e0 <num_tray+0xea>
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	92 2b       	or	r25, r18
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <num_tray+0xf0>
    10e4:	a8 cf       	rjmp	.-176    	; 0x1036 <num_tray+0x40>
    10e6:	50 93 25 02 	sts	0x0225, r21	; 0x800225 <num_trays+0x1>
    10ea:	40 93 24 02 	sts	0x0224, r20	; 0x800224 <num_trays>
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    10f4:	80 e8       	ldi	r24, 0x80	; 128
    10f6:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    10fa:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <num_trays>
    10fe:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <num_trays+0x1>
    1102:	84 31       	cpi	r24, 0x14	; 20
    1104:	91 05       	cpc	r25, r1
    1106:	fc f0       	brlt	.+62     	; 0x1146 <num_tray+0x150>
    1108:	8f ec       	ldi	r24, 0xCF	; 207
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    1110:	2f e9       	ldi	r18, 0x9F	; 159
    1112:	86 e8       	ldi	r24, 0x86	; 134
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	21 50       	subi	r18, 0x01	; 1
    1118:	80 40       	sbci	r24, 0x00	; 0
    111a:	90 40       	sbci	r25, 0x00	; 0
    111c:	e1 f7       	brne	.-8      	; 0x1116 <num_tray+0x120>
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <num_tray+0x12a>
    1120:	00 00       	nop
    1122:	00 e0       	ldi	r16, 0x00	; 0
    1124:	10 e0       	ldi	r17, 0x00	; 0
    1126:	0b c0       	rjmp	.+22     	; 0x113e <num_tray+0x148>
    1128:	88 e1       	ldi	r24, 0x18	; 24
    112a:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    112e:	87 ea       	ldi	r24, 0xA7	; 167
    1130:	91 e6       	ldi	r25, 0x61	; 97
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	f1 f7       	brne	.-4      	; 0x1132 <num_tray+0x13c>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <num_tray+0x142>
    1138:	00 00       	nop
    113a:	0f 5f       	subi	r16, 0xFF	; 255
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	0b 31       	cpi	r16, 0x1B	; 27
    1140:	11 05       	cpc	r17, r1
    1142:	94 f3       	brlt	.-28     	; 0x1128 <num_tray+0x132>
    1144:	66 cf       	rjmp	.-308    	; 0x1012 <num_tray+0x1c>
    1146:	64 96       	adiw	r28, 0x14	; 20
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	08 95       	ret

00001160 <tray_vol>:
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	64 97       	sbiw	r28, 0x14	; 20
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	8a ee       	ldi	r24, 0xEA	; 234
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    1188:	80 ec       	ldi	r24, 0xC0	; 192
    118a:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    118e:	8f e0       	ldi	r24, 0x0F	; 15
    1190:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    1194:	00 e0       	ldi	r16, 0x00	; 0
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <keyfind>
    119c:	bc 01       	movw	r22, r24
    119e:	ce 01       	movw	r24, r28
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	0e 94 85 0c 	call	0x190a	; 0x190a <strcpy>
    11a6:	68 e9       	ldi	r22, 0x98	; 152
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <strcmp>
    11b2:	89 2b       	or	r24, r25
    11b4:	01 f5       	brne	.+64     	; 0x11f6 <tray_vol+0x96>
    11b6:	10 16       	cp	r1, r16
    11b8:	11 06       	cpc	r1, r17
    11ba:	74 f5       	brge	.+92     	; 0x1218 <tray_vol+0xb8>
    11bc:	80 e1       	ldi	r24, 0x10	; 16
    11be:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    11c2:	86 e9       	ldi	r24, 0x96	; 150
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    11ca:	80 e1       	ldi	r24, 0x10	; 16
    11cc:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    11d0:	80 e1       	ldi	r24, 0x10	; 16
    11d2:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    11d6:	84 e1       	ldi	r24, 0x14	; 20
    11d8:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    11dc:	01 50       	subi	r16, 0x01	; 1
    11de:	11 09       	sbc	r17, r1
    11e0:	eb e0       	ldi	r30, 0x0B	; 11
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	ec 0f       	add	r30, r28
    11e6:	fd 1f       	adc	r31, r29
    11e8:	e0 0f       	add	r30, r16
    11ea:	f1 1f       	adc	r31, r17
    11ec:	80 e2       	ldi	r24, 0x20	; 32
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	91 83       	std	Z+1, r25	; 0x01
    11f2:	80 83       	st	Z, r24
    11f4:	11 c0       	rjmp	.+34     	; 0x1218 <tray_vol+0xb8>
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    11fe:	be 01       	movw	r22, r28
    1200:	6f 5f       	subi	r22, 0xFF	; 255
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8b e0       	ldi	r24, 0x0B	; 11
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	8c 0f       	add	r24, r28
    120a:	9d 1f       	adc	r25, r29
    120c:	80 0f       	add	r24, r16
    120e:	91 1f       	adc	r25, r17
    1210:	0e 94 85 0c 	call	0x190a	; 0x190a <strcpy>
    1214:	0f 5f       	subi	r16, 0xFF	; 255
    1216:	1f 4f       	sbci	r17, 0xFF	; 255
    1218:	66 e9       	ldi	r22, 0x96	; 150
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	ce 01       	movw	r24, r28
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <strcmp>
    1224:	7c 01       	movw	r14, r24
    1226:	ce 01       	movw	r24, r28
    1228:	0b 96       	adiw	r24, 0x0b	; 11
    122a:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <atoi>
    122e:	bc 01       	movw	r22, r24
    1230:	21 e0       	ldi	r18, 0x01	; 1
    1232:	ef 28       	or	r14, r15
    1234:	09 f4       	brne	.+2      	; 0x1238 <tray_vol+0xd8>
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	61 15       	cp	r22, r1
    123c:	71 05       	cpc	r23, r1
    123e:	09 f0       	breq	.+2      	; 0x1242 <tray_vol+0xe2>
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	92 2b       	or	r25, r18
    1244:	09 f0       	breq	.+2      	; 0x1248 <tray_vol+0xe8>
    1246:	a8 cf       	rjmp	.-176    	; 0x1198 <tray_vol+0x38>
    1248:	07 2e       	mov	r0, r23
    124a:	00 0c       	add	r0, r0
    124c:	88 0b       	sbc	r24, r24
    124e:	99 0b       	sbc	r25, r25
    1250:	0e 94 3c 0b 	call	0x1678	; 0x1678 <__floatsisf>
    1254:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <vol>
    1258:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <vol+0x1>
    125c:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <vol+0x2>
    1260:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <vol+0x3>
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    126a:	80 e8       	ldi	r24, 0x80	; 128
    126c:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    1270:	c0 90 20 02 	lds	r12, 0x0220	; 0x800220 <vol>
    1274:	d0 90 21 02 	lds	r13, 0x0221	; 0x800221 <vol+0x1>
    1278:	e0 90 22 02 	lds	r14, 0x0222	; 0x800222 <vol+0x2>
    127c:	f0 90 23 02 	lds	r15, 0x0223	; 0x800223 <vol+0x3>
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e4       	ldi	r19, 0x40	; 64
    1284:	4c e9       	ldi	r20, 0x9C	; 156
    1286:	55 e4       	ldi	r21, 0x45	; 69
    1288:	c7 01       	movw	r24, r14
    128a:	b6 01       	movw	r22, r12
    128c:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__gesf2>
    1290:	88 23       	and	r24, r24
    1292:	fc f0       	brlt	.+62     	; 0x12d2 <tray_vol+0x172>
    1294:	8c ef       	ldi	r24, 0xFC	; 252
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    129c:	2f e9       	ldi	r18, 0x9F	; 159
    129e:	86 e8       	ldi	r24, 0x86	; 134
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	21 50       	subi	r18, 0x01	; 1
    12a4:	80 40       	sbci	r24, 0x00	; 0
    12a6:	90 40       	sbci	r25, 0x00	; 0
    12a8:	e1 f7       	brne	.-8      	; 0x12a2 <tray_vol+0x142>
    12aa:	00 c0       	rjmp	.+0      	; 0x12ac <tray_vol+0x14c>
    12ac:	00 00       	nop
    12ae:	00 e0       	ldi	r16, 0x00	; 0
    12b0:	10 e0       	ldi	r17, 0x00	; 0
    12b2:	0b c0       	rjmp	.+22     	; 0x12ca <tray_vol+0x16a>
    12b4:	88 e1       	ldi	r24, 0x18	; 24
    12b6:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
    12ba:	87 ea       	ldi	r24, 0xA7	; 167
    12bc:	91 e6       	ldi	r25, 0x61	; 97
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <tray_vol+0x15e>
    12c2:	00 c0       	rjmp	.+0      	; 0x12c4 <tray_vol+0x164>
    12c4:	00 00       	nop
    12c6:	0f 5f       	subi	r16, 0xFF	; 255
    12c8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ca:	0c 31       	cpi	r16, 0x1C	; 28
    12cc:	11 05       	cpc	r17, r1
    12ce:	94 f3       	brlt	.-28     	; 0x12b4 <tray_vol+0x154>
    12d0:	57 cf       	rjmp	.-338    	; 0x1180 <tray_vol+0x20>
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	0e 94 04 0b 	call	0x1608	; 0x1608 <__fixsfsi>
    12da:	cb 01       	movw	r24, r22
    12dc:	64 96       	adiw	r28, 0x14	; 20
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	08 95       	ret

000012fa <main>:
float pH;
int adc_ph, var1;


int main(void)
{
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
	//------------------------------display on-----------------------------------
	wlcm_msg(); //display the welcome message 
    12fe:	0e 94 ba 07 	call	0xf74	; 0xf74 <wlcm_msg>
	int num_trays = num_tray(); // get the user input for the number of trays to be processed
    1302:	0e 94 fb 07 	call	0xff6	; 0xff6 <num_tray>
    1306:	ec 01       	movw	r28, r24
	int vol = tray_vol(); //get the user input for the volume of a tray
    1308:	0e 94 b0 08 	call	0x1160	; 0x1160 <tray_vol>
	initUS();
    130c:	0e 94 af 03 	call	0x75e	; 0x75e <initUS>
	
	//Main Program Loop
	while(num_trays>0){
    1310:	00 c1       	rjmp	.+512    	; 0x1512 <main+0x218>
		//------------------------------ultrasonic-----------------------(In progress)
		
		lcd_cmd(0x01);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    1318:	80 e8       	ldi	r24, 0x80	; 128
    131a:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Actvt us");
    131e:	8b e4       	ldi	r24, 0x4B	; 75
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    1326:	2f e3       	ldi	r18, 0x3F	; 63
    1328:	8d e0       	ldi	r24, 0x0D	; 13
    132a:	93 e0       	ldi	r25, 0x03	; 3
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	80 40       	sbci	r24, 0x00	; 0
    1330:	90 40       	sbci	r25, 0x00	; 0
    1332:	e1 f7       	brne	.-8      	; 0x132c <main+0x32>
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <main+0x3c>
    1336:	00 00       	nop
    1338:	0a c0       	rjmp	.+20     	; 0x134e <main+0x54>
		_delay_ms(1000);
		
		while (!ultrasonic1())	// Display a message if the liquid is empty
		{
			lcd_cmd(0x01);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
			lcd_cmd(0x80);
    1340:	80 e8       	ldi	r24, 0x80	; 128
    1342:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
			lcd_msg("liqd emt7");
    1346:	84 e5       	ldi	r24, 0x54	; 84
    1348:	91 e0       	ldi	r25, 0x01	; 1
    134a:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		lcd_cmd(0x01);
		lcd_cmd(0x80);
		lcd_msg("Actvt us");
		_delay_ms(1000);
		
		while (!ultrasonic1())	// Display a message if the liquid is empty
    134e:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <ultrasonic1>
    1352:	88 23       	and	r24, r24
    1354:	91 f3       	breq	.-28     	; 0x133a <main+0x40>
    1356:	0a c0       	rjmp	.+20     	; 0x136c <main+0x72>

		
		while (ultrasonic2())	// Display a message if the liquid is empty
		{
			
			lcd_cmd(0x01);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
			lcd_cmd(0x80);
    135e:	80 e8       	ldi	r24, 0x80	; 128
    1360:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
			lcd_msg("liqd emt8");
    1364:	8e e5       	ldi	r24, 0x5E	; 94
    1366:	91 e0       	ldi	r25, 0x01	; 1
    1368:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
			lcd_msg("liqd emt7");
		}
		

		
		while (ultrasonic2())	// Display a message if the liquid is empty
    136c:	0e 94 2a 04 	call	0x854	; 0x854 <ultrasonic2>
    1370:	81 11       	cpse	r24, r1
    1372:	f2 cf       	rjmp	.-28     	; 0x1358 <main+0x5e>
    1374:	0a c0       	rjmp	.+20     	; 0x138a <main+0x90>
		}
		

		while (ultrasonic3())	// Display a message if the liquid is empty
		{
			lcd_cmd(0x01);
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
			lcd_cmd(0x80);
    137c:	80 e8       	ldi	r24, 0x80	; 128
    137e:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
			lcd_msg("liqd emt9");
    1382:	88 e6       	ldi	r24, 0x68	; 104
    1384:	91 e0       	ldi	r25, 0x01	; 1
    1386:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
			lcd_cmd(0x80);
			lcd_msg("liqd emt8");
		}
		

		while (ultrasonic3())	// Display a message if the liquid is empty
    138a:	0e 94 57 04 	call	0x8ae	; 0x8ae <ultrasonic3>
    138e:	81 11       	cpse	r24, r1
    1390:	f2 cf       	rjmp	.-28     	; 0x1376 <main+0x7c>
		//calculate the volume of water,latex and acid needed
		
		
		
		//--------------------------------conveyor start------------------------------
		lcd_cmd(0x01);
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    1398:	80 e8       	ldi	r24, 0x80	; 128
    139a:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Acvt Conveyor");
    139e:	82 e7       	ldi	r24, 0x72	; 114
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		
		switchon();	//activate the relay switch to the AC motor
    13a6:	0e 94 b3 06 	call	0xd66	; 0xd66 <switchon>
		
		//---------------------------------stepper push-------------------------------
		lcd_cmd(0x01);
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    13b0:	80 e8       	ldi	r24, 0x80	; 128
    13b2:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Acvt tray push");
    13b6:	80 e8       	ldi	r24, 0x80	; 128
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		stprTrayPsh_init();	// initialize the stepper motors
    13be:	0e 94 79 05 	call	0xaf2	; 0xaf2 <stprTrayPsh_init>
		stprTrayPsh_clk(100);	// rotate the stepper motors to push the tray onto the conveyor
    13c2:	84 e6       	ldi	r24, 0x64	; 100
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 84 05 	call	0xb08	; 0xb08 <stprTrayPsh_clk>
		
		//--------------------------------Ir detector---------------------------------
		lcd_cmd(0x01);
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    13d0:	80 e8       	ldi	r24, 0x80	; 128
    13d2:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Acvt IR sensor");
    13d6:	8f e8       	ldi	r24, 0x8F	; 143
    13d8:	91 e0       	ldi	r25, 0x01	; 1
    13da:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		while(1){
			if (act_IR())		//if the IR function returns a true value the conveyor will stop
    13de:	0e 94 cc 06 	call	0xd98	; 0xd98 <act_IR>
    13e2:	89 2b       	or	r24, r25
    13e4:	e1 f3       	breq	.-8      	; 0x13de <main+0xe4>
			{
				lcd_cmd(0x80);
    13e6:	80 e8       	ldi	r24, 0x80	; 128
    13e8:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
				lcd_msg("Dactvt Conveyor");
    13ec:	8e e9       	ldi	r24, 0x9E	; 158
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
				lcd_cmd(0xC0);
    13f4:	80 ec       	ldi	r24, 0xC0	; 192
    13f6:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
				switchoff();
    13fa:	0e 94 bd 06 	call	0xd7a	; 0xd7a <switchoff>
				break;
			}
		}
		
		//--------------------------------stepper pull--------------------------------
		lcd_cmd(0x01);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    1404:	80 e8       	ldi	r24, 0x80	; 128
    1406:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("back try psh");
    140a:	8e ea       	ldi	r24, 0xAE	; 174
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		stprTrayPsh_init();	// initialize the stepper motors
    1412:	0e 94 79 05 	call	0xaf2	; 0xaf2 <stprTrayPsh_init>
		stprTrayPsh_aclk(100);// rotate the stepper motors to pull the handle
    1416:	84 e6       	ldi	r24, 0x64	; 100
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	0e 94 c0 05 	call	0xb80	; 0xb80 <stprTrayPsh_aclk>
		
		
		//----------------------------tray holder down (mixer)----------------------------
		lcd_cmd(0x01);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    1424:	80 e8       	ldi	r24, 0x80	; 128
    1426:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Acvt stpr mxr");
    142a:	8b eb       	ldi	r24, 0xBB	; 187
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		stprMix_init(); //initiate the stepper motor
    1432:	0e 94 80 05 	call	0xb00	; 0xb00 <stprMix_init>
		stprMix_clk(100);	// rotate the stepper motor to lower the mixer
    1436:	84 e6       	ldi	r24, 0x64	; 100
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <stprMix_clk>
		
		//----------------------------liquid pumps {flow sensor}--------------------------
		lcd_cmd(0x01);
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    1444:	80 e8       	ldi	r24, 0x80	; 128
    1446:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Acvt pumps");
    144a:	89 ec       	ldi	r24, 0xC9	; 201
    144c:	91 e0       	ldi	r25, 0x01	; 1
    144e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		pump_w();
    1452:	0e 94 55 00 	call	0xaa	; 0xaa <pump_w>
		pump_l();
    1456:	0e 94 92 01 	call	0x324	; 0x324 <pump_l>
		pump_a();
    145a:	0e 94 aa 02 	call	0x554	; 0x554 <pump_a>
		
		//---------------------------------DC motor (Mixer)-------------------------------
		lcd_cmd(0x01);
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    1464:	80 e8       	ldi	r24, 0x80	; 128
    1466:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Acvt mixer");
    146a:	84 ed       	ldi	r24, 0xD4	; 212
    146c:	91 e0       	ldi	r25, 0x01	; 1
    146e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		acvt_mixer();
    1472:	0e 94 a6 06 	call	0xd4c	; 0xd4c <acvt_mixer>
		
		//------------------------------tray holder up (mixer)----------------------------
		lcd_cmd(0x01);
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    147c:	80 e8       	ldi	r24, 0x80	; 128
    147e:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Acvt mixer Up");
    1482:	8f ed       	ldi	r24, 0xDF	; 223
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		stprMix_init();//initiate the stepper motor
    148a:	0e 94 80 05 	call	0xb00	; 0xb00 <stprMix_init>
		stprMix_aclk(100);// rotate the stepper motor to lower the mixer;
    148e:	84 e6       	ldi	r24, 0x64	; 100
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 38 06 	call	0xc70	; 0xc70 <stprMix_aclk>
		
		//------------------------------conveyor belt start-------------------------------
		lcd_cmd(0x01);
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    149c:	80 e8       	ldi	r24, 0x80	; 128
    149e:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Acvt Conveyor"); //deactivate the conveyor belt
    14a2:	82 e7       	ldi	r24, 0x72	; 114
    14a4:	91 e0       	ldi	r25, 0x01	; 1
    14a6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		switchon();
    14aa:	0e 94 b3 06 	call	0xd66	; 0xd66 <switchon>
		
		
		num_trays--; //reduce the number of trays by 1
    14ae:	21 97       	sbiw	r28, 0x01	; 1
    14b0:	2f e3       	ldi	r18, 0x3F	; 63
    14b2:	82 e4       	ldi	r24, 0x42	; 66
    14b4:	9f e0       	ldi	r25, 0x0F	; 15
    14b6:	21 50       	subi	r18, 0x01	; 1
    14b8:	80 40       	sbci	r24, 0x00	; 0
    14ba:	90 40       	sbci	r25, 0x00	; 0
    14bc:	e1 f7       	brne	.-8      	; 0x14b6 <main+0x1bc>
    14be:	00 c0       	rjmp	.+0      	; 0x14c0 <main+0x1c6>
    14c0:	00 00       	nop
		
		_delay_ms(5000);
		
		lcd_cmd(0x01);
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    14c8:	80 e8       	ldi	r24, 0x80	; 128
    14ca:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("Dactvt Conveyor");
    14ce:	8e e9       	ldi	r24, 0x9E	; 158
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
		
		switchoff(); //deactivate the conveyor belt
    14d6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <switchoff>
    14da:	2f e7       	ldi	r18, 0x7F	; 127
    14dc:	8a e1       	ldi	r24, 0x1A	; 26
    14de:	96 e0       	ldi	r25, 0x06	; 6
    14e0:	21 50       	subi	r18, 0x01	; 1
    14e2:	80 40       	sbci	r24, 0x00	; 0
    14e4:	90 40       	sbci	r25, 0x00	; 0
    14e6:	e1 f7       	brne	.-8      	; 0x14e0 <main+0x1e6>
    14e8:	00 c0       	rjmp	.+0      	; 0x14ea <main+0x1f0>
    14ea:	00 00       	nop
		
		_delay_ms(2000);
		
		lcd_cmd(0x01);
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_cmd(0x80);
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	0e 94 28 07 	call	0xe50	; 0xe50 <lcd_cmd>
		lcd_msg("End of program");
    14f8:	8d ee       	ldi	r24, 0xED	; 237
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <lcd_msg>
    1500:	2f e7       	ldi	r18, 0x7F	; 127
    1502:	8a e1       	ldi	r24, 0x1A	; 26
    1504:	96 e0       	ldi	r25, 0x06	; 6
    1506:	21 50       	subi	r18, 0x01	; 1
    1508:	80 40       	sbci	r24, 0x00	; 0
    150a:	90 40       	sbci	r25, 0x00	; 0
    150c:	e1 f7       	brne	.-8      	; 0x1506 <main+0x20c>
    150e:	00 c0       	rjmp	.+0      	; 0x1510 <main+0x216>
    1510:	00 00       	nop
	int num_trays = num_tray(); // get the user input for the number of trays to be processed
	int vol = tray_vol(); //get the user input for the volume of a tray
	initUS();
	
	//Main Program Loop
	while(num_trays>0){
    1512:	1c 16       	cp	r1, r28
    1514:	1d 06       	cpc	r1, r29
    1516:	0c f4       	brge	.+2      	; 0x151a <main+0x220>
    1518:	fc ce       	rjmp	.-520    	; 0x1312 <main+0x18>
		lcd_msg("End of program");
		
		_delay_ms(2000);
	}
	
}
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	08 95       	ret

00001524 <__divsf3>:
    1524:	0e 94 a6 0a 	call	0x154c	; 0x154c <__divsf3x>
    1528:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_round>
    152c:	0e 94 87 0b 	call	0x170e	; 0x170e <__fp_pscB>
    1530:	58 f0       	brcs	.+22     	; 0x1548 <__divsf3+0x24>
    1532:	0e 94 80 0b 	call	0x1700	; 0x1700 <__fp_pscA>
    1536:	40 f0       	brcs	.+16     	; 0x1548 <__divsf3+0x24>
    1538:	29 f4       	brne	.+10     	; 0x1544 <__divsf3+0x20>
    153a:	5f 3f       	cpi	r21, 0xFF	; 255
    153c:	29 f0       	breq	.+10     	; 0x1548 <__divsf3+0x24>
    153e:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__fp_inf>
    1542:	51 11       	cpse	r21, r1
    1544:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_szero>
    1548:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__fp_nan>

0000154c <__divsf3x>:
    154c:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fp_split3>
    1550:	68 f3       	brcs	.-38     	; 0x152c <__divsf3+0x8>

00001552 <__divsf3_pse>:
    1552:	99 23       	and	r25, r25
    1554:	b1 f3       	breq	.-20     	; 0x1542 <__divsf3+0x1e>
    1556:	55 23       	and	r21, r21
    1558:	91 f3       	breq	.-28     	; 0x153e <__divsf3+0x1a>
    155a:	95 1b       	sub	r25, r21
    155c:	55 0b       	sbc	r21, r21
    155e:	bb 27       	eor	r27, r27
    1560:	aa 27       	eor	r26, r26
    1562:	62 17       	cp	r22, r18
    1564:	73 07       	cpc	r23, r19
    1566:	84 07       	cpc	r24, r20
    1568:	38 f0       	brcs	.+14     	; 0x1578 <__divsf3_pse+0x26>
    156a:	9f 5f       	subi	r25, 0xFF	; 255
    156c:	5f 4f       	sbci	r21, 0xFF	; 255
    156e:	22 0f       	add	r18, r18
    1570:	33 1f       	adc	r19, r19
    1572:	44 1f       	adc	r20, r20
    1574:	aa 1f       	adc	r26, r26
    1576:	a9 f3       	breq	.-22     	; 0x1562 <__divsf3_pse+0x10>
    1578:	35 d0       	rcall	.+106    	; 0x15e4 <__divsf3_pse+0x92>
    157a:	0e 2e       	mov	r0, r30
    157c:	3a f0       	brmi	.+14     	; 0x158c <__divsf3_pse+0x3a>
    157e:	e0 e8       	ldi	r30, 0x80	; 128
    1580:	32 d0       	rcall	.+100    	; 0x15e6 <__divsf3_pse+0x94>
    1582:	91 50       	subi	r25, 0x01	; 1
    1584:	50 40       	sbci	r21, 0x00	; 0
    1586:	e6 95       	lsr	r30
    1588:	00 1c       	adc	r0, r0
    158a:	ca f7       	brpl	.-14     	; 0x157e <__divsf3_pse+0x2c>
    158c:	2b d0       	rcall	.+86     	; 0x15e4 <__divsf3_pse+0x92>
    158e:	fe 2f       	mov	r31, r30
    1590:	29 d0       	rcall	.+82     	; 0x15e4 <__divsf3_pse+0x92>
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	88 1f       	adc	r24, r24
    1598:	bb 1f       	adc	r27, r27
    159a:	26 17       	cp	r18, r22
    159c:	37 07       	cpc	r19, r23
    159e:	48 07       	cpc	r20, r24
    15a0:	ab 07       	cpc	r26, r27
    15a2:	b0 e8       	ldi	r27, 0x80	; 128
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <__divsf3_pse+0x56>
    15a6:	bb 0b       	sbc	r27, r27
    15a8:	80 2d       	mov	r24, r0
    15aa:	bf 01       	movw	r22, r30
    15ac:	ff 27       	eor	r31, r31
    15ae:	93 58       	subi	r25, 0x83	; 131
    15b0:	5f 4f       	sbci	r21, 0xFF	; 255
    15b2:	3a f0       	brmi	.+14     	; 0x15c2 <__divsf3_pse+0x70>
    15b4:	9e 3f       	cpi	r25, 0xFE	; 254
    15b6:	51 05       	cpc	r21, r1
    15b8:	78 f0       	brcs	.+30     	; 0x15d8 <__divsf3_pse+0x86>
    15ba:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__fp_inf>
    15be:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_szero>
    15c2:	5f 3f       	cpi	r21, 0xFF	; 255
    15c4:	e4 f3       	brlt	.-8      	; 0x15be <__divsf3_pse+0x6c>
    15c6:	98 3e       	cpi	r25, 0xE8	; 232
    15c8:	d4 f3       	brlt	.-12     	; 0x15be <__divsf3_pse+0x6c>
    15ca:	86 95       	lsr	r24
    15cc:	77 95       	ror	r23
    15ce:	67 95       	ror	r22
    15d0:	b7 95       	ror	r27
    15d2:	f7 95       	ror	r31
    15d4:	9f 5f       	subi	r25, 0xFF	; 255
    15d6:	c9 f7       	brne	.-14     	; 0x15ca <__divsf3_pse+0x78>
    15d8:	88 0f       	add	r24, r24
    15da:	91 1d       	adc	r25, r1
    15dc:	96 95       	lsr	r25
    15de:	87 95       	ror	r24
    15e0:	97 f9       	bld	r25, 7
    15e2:	08 95       	ret
    15e4:	e1 e0       	ldi	r30, 0x01	; 1
    15e6:	66 0f       	add	r22, r22
    15e8:	77 1f       	adc	r23, r23
    15ea:	88 1f       	adc	r24, r24
    15ec:	bb 1f       	adc	r27, r27
    15ee:	62 17       	cp	r22, r18
    15f0:	73 07       	cpc	r23, r19
    15f2:	84 07       	cpc	r24, r20
    15f4:	ba 07       	cpc	r27, r26
    15f6:	20 f0       	brcs	.+8      	; 0x1600 <__divsf3_pse+0xae>
    15f8:	62 1b       	sub	r22, r18
    15fa:	73 0b       	sbc	r23, r19
    15fc:	84 0b       	sbc	r24, r20
    15fe:	ba 0b       	sbc	r27, r26
    1600:	ee 1f       	adc	r30, r30
    1602:	88 f7       	brcc	.-30     	; 0x15e6 <__divsf3_pse+0x94>
    1604:	e0 95       	com	r30
    1606:	08 95       	ret

00001608 <__fixsfsi>:
    1608:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__fixunssfsi>
    160c:	68 94       	set
    160e:	b1 11       	cpse	r27, r1
    1610:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_szero>
    1614:	08 95       	ret

00001616 <__fixunssfsi>:
    1616:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fp_splitA>
    161a:	88 f0       	brcs	.+34     	; 0x163e <__fixunssfsi+0x28>
    161c:	9f 57       	subi	r25, 0x7F	; 127
    161e:	98 f0       	brcs	.+38     	; 0x1646 <__fixunssfsi+0x30>
    1620:	b9 2f       	mov	r27, r25
    1622:	99 27       	eor	r25, r25
    1624:	b7 51       	subi	r27, 0x17	; 23
    1626:	b0 f0       	brcs	.+44     	; 0x1654 <__fixunssfsi+0x3e>
    1628:	e1 f0       	breq	.+56     	; 0x1662 <__fixunssfsi+0x4c>
    162a:	66 0f       	add	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	88 1f       	adc	r24, r24
    1630:	99 1f       	adc	r25, r25
    1632:	1a f0       	brmi	.+6      	; 0x163a <__fixunssfsi+0x24>
    1634:	ba 95       	dec	r27
    1636:	c9 f7       	brne	.-14     	; 0x162a <__fixunssfsi+0x14>
    1638:	14 c0       	rjmp	.+40     	; 0x1662 <__fixunssfsi+0x4c>
    163a:	b1 30       	cpi	r27, 0x01	; 1
    163c:	91 f0       	breq	.+36     	; 0x1662 <__fixunssfsi+0x4c>
    163e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fp_zero>
    1642:	b1 e0       	ldi	r27, 0x01	; 1
    1644:	08 95       	ret
    1646:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__fp_zero>
    164a:	67 2f       	mov	r22, r23
    164c:	78 2f       	mov	r23, r24
    164e:	88 27       	eor	r24, r24
    1650:	b8 5f       	subi	r27, 0xF8	; 248
    1652:	39 f0       	breq	.+14     	; 0x1662 <__fixunssfsi+0x4c>
    1654:	b9 3f       	cpi	r27, 0xF9	; 249
    1656:	cc f3       	brlt	.-14     	; 0x164a <__fixunssfsi+0x34>
    1658:	86 95       	lsr	r24
    165a:	77 95       	ror	r23
    165c:	67 95       	ror	r22
    165e:	b3 95       	inc	r27
    1660:	d9 f7       	brne	.-10     	; 0x1658 <__fixunssfsi+0x42>
    1662:	3e f4       	brtc	.+14     	; 0x1672 <__fixunssfsi+0x5c>
    1664:	90 95       	com	r25
    1666:	80 95       	com	r24
    1668:	70 95       	com	r23
    166a:	61 95       	neg	r22
    166c:	7f 4f       	sbci	r23, 0xFF	; 255
    166e:	8f 4f       	sbci	r24, 0xFF	; 255
    1670:	9f 4f       	sbci	r25, 0xFF	; 255
    1672:	08 95       	ret

00001674 <__floatunsisf>:
    1674:	e8 94       	clt
    1676:	09 c0       	rjmp	.+18     	; 0x168a <__floatsisf+0x12>

00001678 <__floatsisf>:
    1678:	97 fb       	bst	r25, 7
    167a:	3e f4       	brtc	.+14     	; 0x168a <__floatsisf+0x12>
    167c:	90 95       	com	r25
    167e:	80 95       	com	r24
    1680:	70 95       	com	r23
    1682:	61 95       	neg	r22
    1684:	7f 4f       	sbci	r23, 0xFF	; 255
    1686:	8f 4f       	sbci	r24, 0xFF	; 255
    1688:	9f 4f       	sbci	r25, 0xFF	; 255
    168a:	99 23       	and	r25, r25
    168c:	a9 f0       	breq	.+42     	; 0x16b8 <__floatsisf+0x40>
    168e:	f9 2f       	mov	r31, r25
    1690:	96 e9       	ldi	r25, 0x96	; 150
    1692:	bb 27       	eor	r27, r27
    1694:	93 95       	inc	r25
    1696:	f6 95       	lsr	r31
    1698:	87 95       	ror	r24
    169a:	77 95       	ror	r23
    169c:	67 95       	ror	r22
    169e:	b7 95       	ror	r27
    16a0:	f1 11       	cpse	r31, r1
    16a2:	f8 cf       	rjmp	.-16     	; 0x1694 <__floatsisf+0x1c>
    16a4:	fa f4       	brpl	.+62     	; 0x16e4 <__floatsisf+0x6c>
    16a6:	bb 0f       	add	r27, r27
    16a8:	11 f4       	brne	.+4      	; 0x16ae <__floatsisf+0x36>
    16aa:	60 ff       	sbrs	r22, 0
    16ac:	1b c0       	rjmp	.+54     	; 0x16e4 <__floatsisf+0x6c>
    16ae:	6f 5f       	subi	r22, 0xFF	; 255
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	8f 4f       	sbci	r24, 0xFF	; 255
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	16 c0       	rjmp	.+44     	; 0x16e4 <__floatsisf+0x6c>
    16b8:	88 23       	and	r24, r24
    16ba:	11 f0       	breq	.+4      	; 0x16c0 <__floatsisf+0x48>
    16bc:	96 e9       	ldi	r25, 0x96	; 150
    16be:	11 c0       	rjmp	.+34     	; 0x16e2 <__floatsisf+0x6a>
    16c0:	77 23       	and	r23, r23
    16c2:	21 f0       	breq	.+8      	; 0x16cc <__floatsisf+0x54>
    16c4:	9e e8       	ldi	r25, 0x8E	; 142
    16c6:	87 2f       	mov	r24, r23
    16c8:	76 2f       	mov	r23, r22
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <__floatsisf+0x5e>
    16cc:	66 23       	and	r22, r22
    16ce:	71 f0       	breq	.+28     	; 0x16ec <__floatsisf+0x74>
    16d0:	96 e8       	ldi	r25, 0x86	; 134
    16d2:	86 2f       	mov	r24, r22
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	60 e0       	ldi	r22, 0x00	; 0
    16d8:	2a f0       	brmi	.+10     	; 0x16e4 <__floatsisf+0x6c>
    16da:	9a 95       	dec	r25
    16dc:	66 0f       	add	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	88 1f       	adc	r24, r24
    16e2:	da f7       	brpl	.-10     	; 0x16da <__floatsisf+0x62>
    16e4:	88 0f       	add	r24, r24
    16e6:	96 95       	lsr	r25
    16e8:	87 95       	ror	r24
    16ea:	97 f9       	bld	r25, 7
    16ec:	08 95       	ret

000016ee <__fp_inf>:
    16ee:	97 f9       	bld	r25, 7
    16f0:	9f 67       	ori	r25, 0x7F	; 127
    16f2:	80 e8       	ldi	r24, 0x80	; 128
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	60 e0       	ldi	r22, 0x00	; 0
    16f8:	08 95       	ret

000016fa <__fp_nan>:
    16fa:	9f ef       	ldi	r25, 0xFF	; 255
    16fc:	80 ec       	ldi	r24, 0xC0	; 192
    16fe:	08 95       	ret

00001700 <__fp_pscA>:
    1700:	00 24       	eor	r0, r0
    1702:	0a 94       	dec	r0
    1704:	16 16       	cp	r1, r22
    1706:	17 06       	cpc	r1, r23
    1708:	18 06       	cpc	r1, r24
    170a:	09 06       	cpc	r0, r25
    170c:	08 95       	ret

0000170e <__fp_pscB>:
    170e:	00 24       	eor	r0, r0
    1710:	0a 94       	dec	r0
    1712:	12 16       	cp	r1, r18
    1714:	13 06       	cpc	r1, r19
    1716:	14 06       	cpc	r1, r20
    1718:	05 06       	cpc	r0, r21
    171a:	08 95       	ret

0000171c <__fp_round>:
    171c:	09 2e       	mov	r0, r25
    171e:	03 94       	inc	r0
    1720:	00 0c       	add	r0, r0
    1722:	11 f4       	brne	.+4      	; 0x1728 <__fp_round+0xc>
    1724:	88 23       	and	r24, r24
    1726:	52 f0       	brmi	.+20     	; 0x173c <__fp_round+0x20>
    1728:	bb 0f       	add	r27, r27
    172a:	40 f4       	brcc	.+16     	; 0x173c <__fp_round+0x20>
    172c:	bf 2b       	or	r27, r31
    172e:	11 f4       	brne	.+4      	; 0x1734 <__fp_round+0x18>
    1730:	60 ff       	sbrs	r22, 0
    1732:	04 c0       	rjmp	.+8      	; 0x173c <__fp_round+0x20>
    1734:	6f 5f       	subi	r22, 0xFF	; 255
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	8f 4f       	sbci	r24, 0xFF	; 255
    173a:	9f 4f       	sbci	r25, 0xFF	; 255
    173c:	08 95       	ret

0000173e <__fp_split3>:
    173e:	57 fd       	sbrc	r21, 7
    1740:	90 58       	subi	r25, 0x80	; 128
    1742:	44 0f       	add	r20, r20
    1744:	55 1f       	adc	r21, r21
    1746:	59 f0       	breq	.+22     	; 0x175e <__fp_splitA+0x10>
    1748:	5f 3f       	cpi	r21, 0xFF	; 255
    174a:	71 f0       	breq	.+28     	; 0x1768 <__fp_splitA+0x1a>
    174c:	47 95       	ror	r20

0000174e <__fp_splitA>:
    174e:	88 0f       	add	r24, r24
    1750:	97 fb       	bst	r25, 7
    1752:	99 1f       	adc	r25, r25
    1754:	61 f0       	breq	.+24     	; 0x176e <__fp_splitA+0x20>
    1756:	9f 3f       	cpi	r25, 0xFF	; 255
    1758:	79 f0       	breq	.+30     	; 0x1778 <__fp_splitA+0x2a>
    175a:	87 95       	ror	r24
    175c:	08 95       	ret
    175e:	12 16       	cp	r1, r18
    1760:	13 06       	cpc	r1, r19
    1762:	14 06       	cpc	r1, r20
    1764:	55 1f       	adc	r21, r21
    1766:	f2 cf       	rjmp	.-28     	; 0x174c <__fp_split3+0xe>
    1768:	46 95       	lsr	r20
    176a:	f1 df       	rcall	.-30     	; 0x174e <__fp_splitA>
    176c:	08 c0       	rjmp	.+16     	; 0x177e <__fp_splitA+0x30>
    176e:	16 16       	cp	r1, r22
    1770:	17 06       	cpc	r1, r23
    1772:	18 06       	cpc	r1, r24
    1774:	99 1f       	adc	r25, r25
    1776:	f1 cf       	rjmp	.-30     	; 0x175a <__fp_splitA+0xc>
    1778:	86 95       	lsr	r24
    177a:	71 05       	cpc	r23, r1
    177c:	61 05       	cpc	r22, r1
    177e:	08 94       	sec
    1780:	08 95       	ret

00001782 <__fp_zero>:
    1782:	e8 94       	clt

00001784 <__fp_szero>:
    1784:	bb 27       	eor	r27, r27
    1786:	66 27       	eor	r22, r22
    1788:	77 27       	eor	r23, r23
    178a:	cb 01       	movw	r24, r22
    178c:	97 f9       	bld	r25, 7
    178e:	08 95       	ret

00001790 <__gesf2>:
    1790:	0e 94 3a 0c 	call	0x1874	; 0x1874 <__fp_cmp>
    1794:	08 f4       	brcc	.+2      	; 0x1798 <__gesf2+0x8>
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	08 95       	ret

0000179a <__mulsf3>:
    179a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__mulsf3x>
    179e:	0c 94 8e 0b 	jmp	0x171c	; 0x171c <__fp_round>
    17a2:	0e 94 80 0b 	call	0x1700	; 0x1700 <__fp_pscA>
    17a6:	38 f0       	brcs	.+14     	; 0x17b6 <__mulsf3+0x1c>
    17a8:	0e 94 87 0b 	call	0x170e	; 0x170e <__fp_pscB>
    17ac:	20 f0       	brcs	.+8      	; 0x17b6 <__mulsf3+0x1c>
    17ae:	95 23       	and	r25, r21
    17b0:	11 f0       	breq	.+4      	; 0x17b6 <__mulsf3+0x1c>
    17b2:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__fp_inf>
    17b6:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <__fp_nan>
    17ba:	11 24       	eor	r1, r1
    17bc:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_szero>

000017c0 <__mulsf3x>:
    17c0:	0e 94 9f 0b 	call	0x173e	; 0x173e <__fp_split3>
    17c4:	70 f3       	brcs	.-36     	; 0x17a2 <__mulsf3+0x8>

000017c6 <__mulsf3_pse>:
    17c6:	95 9f       	mul	r25, r21
    17c8:	c1 f3       	breq	.-16     	; 0x17ba <__mulsf3+0x20>
    17ca:	95 0f       	add	r25, r21
    17cc:	50 e0       	ldi	r21, 0x00	; 0
    17ce:	55 1f       	adc	r21, r21
    17d0:	62 9f       	mul	r22, r18
    17d2:	f0 01       	movw	r30, r0
    17d4:	72 9f       	mul	r23, r18
    17d6:	bb 27       	eor	r27, r27
    17d8:	f0 0d       	add	r31, r0
    17da:	b1 1d       	adc	r27, r1
    17dc:	63 9f       	mul	r22, r19
    17de:	aa 27       	eor	r26, r26
    17e0:	f0 0d       	add	r31, r0
    17e2:	b1 1d       	adc	r27, r1
    17e4:	aa 1f       	adc	r26, r26
    17e6:	64 9f       	mul	r22, r20
    17e8:	66 27       	eor	r22, r22
    17ea:	b0 0d       	add	r27, r0
    17ec:	a1 1d       	adc	r26, r1
    17ee:	66 1f       	adc	r22, r22
    17f0:	82 9f       	mul	r24, r18
    17f2:	22 27       	eor	r18, r18
    17f4:	b0 0d       	add	r27, r0
    17f6:	a1 1d       	adc	r26, r1
    17f8:	62 1f       	adc	r22, r18
    17fa:	73 9f       	mul	r23, r19
    17fc:	b0 0d       	add	r27, r0
    17fe:	a1 1d       	adc	r26, r1
    1800:	62 1f       	adc	r22, r18
    1802:	83 9f       	mul	r24, r19
    1804:	a0 0d       	add	r26, r0
    1806:	61 1d       	adc	r22, r1
    1808:	22 1f       	adc	r18, r18
    180a:	74 9f       	mul	r23, r20
    180c:	33 27       	eor	r19, r19
    180e:	a0 0d       	add	r26, r0
    1810:	61 1d       	adc	r22, r1
    1812:	23 1f       	adc	r18, r19
    1814:	84 9f       	mul	r24, r20
    1816:	60 0d       	add	r22, r0
    1818:	21 1d       	adc	r18, r1
    181a:	82 2f       	mov	r24, r18
    181c:	76 2f       	mov	r23, r22
    181e:	6a 2f       	mov	r22, r26
    1820:	11 24       	eor	r1, r1
    1822:	9f 57       	subi	r25, 0x7F	; 127
    1824:	50 40       	sbci	r21, 0x00	; 0
    1826:	9a f0       	brmi	.+38     	; 0x184e <__mulsf3_pse+0x88>
    1828:	f1 f0       	breq	.+60     	; 0x1866 <__mulsf3_pse+0xa0>
    182a:	88 23       	and	r24, r24
    182c:	4a f0       	brmi	.+18     	; 0x1840 <__mulsf3_pse+0x7a>
    182e:	ee 0f       	add	r30, r30
    1830:	ff 1f       	adc	r31, r31
    1832:	bb 1f       	adc	r27, r27
    1834:	66 1f       	adc	r22, r22
    1836:	77 1f       	adc	r23, r23
    1838:	88 1f       	adc	r24, r24
    183a:	91 50       	subi	r25, 0x01	; 1
    183c:	50 40       	sbci	r21, 0x00	; 0
    183e:	a9 f7       	brne	.-22     	; 0x182a <__mulsf3_pse+0x64>
    1840:	9e 3f       	cpi	r25, 0xFE	; 254
    1842:	51 05       	cpc	r21, r1
    1844:	80 f0       	brcs	.+32     	; 0x1866 <__mulsf3_pse+0xa0>
    1846:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__fp_inf>
    184a:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_szero>
    184e:	5f 3f       	cpi	r21, 0xFF	; 255
    1850:	e4 f3       	brlt	.-8      	; 0x184a <__mulsf3_pse+0x84>
    1852:	98 3e       	cpi	r25, 0xE8	; 232
    1854:	d4 f3       	brlt	.-12     	; 0x184a <__mulsf3_pse+0x84>
    1856:	86 95       	lsr	r24
    1858:	77 95       	ror	r23
    185a:	67 95       	ror	r22
    185c:	b7 95       	ror	r27
    185e:	f7 95       	ror	r31
    1860:	e7 95       	ror	r30
    1862:	9f 5f       	subi	r25, 0xFF	; 255
    1864:	c1 f7       	brne	.-16     	; 0x1856 <__mulsf3_pse+0x90>
    1866:	fe 2b       	or	r31, r30
    1868:	88 0f       	add	r24, r24
    186a:	91 1d       	adc	r25, r1
    186c:	96 95       	lsr	r25
    186e:	87 95       	ror	r24
    1870:	97 f9       	bld	r25, 7
    1872:	08 95       	ret

00001874 <__fp_cmp>:
    1874:	99 0f       	add	r25, r25
    1876:	00 08       	sbc	r0, r0
    1878:	55 0f       	add	r21, r21
    187a:	aa 0b       	sbc	r26, r26
    187c:	e0 e8       	ldi	r30, 0x80	; 128
    187e:	fe ef       	ldi	r31, 0xFE	; 254
    1880:	16 16       	cp	r1, r22
    1882:	17 06       	cpc	r1, r23
    1884:	e8 07       	cpc	r30, r24
    1886:	f9 07       	cpc	r31, r25
    1888:	c0 f0       	brcs	.+48     	; 0x18ba <__fp_cmp+0x46>
    188a:	12 16       	cp	r1, r18
    188c:	13 06       	cpc	r1, r19
    188e:	e4 07       	cpc	r30, r20
    1890:	f5 07       	cpc	r31, r21
    1892:	98 f0       	brcs	.+38     	; 0x18ba <__fp_cmp+0x46>
    1894:	62 1b       	sub	r22, r18
    1896:	73 0b       	sbc	r23, r19
    1898:	84 0b       	sbc	r24, r20
    189a:	95 0b       	sbc	r25, r21
    189c:	39 f4       	brne	.+14     	; 0x18ac <__fp_cmp+0x38>
    189e:	0a 26       	eor	r0, r26
    18a0:	61 f0       	breq	.+24     	; 0x18ba <__fp_cmp+0x46>
    18a2:	23 2b       	or	r18, r19
    18a4:	24 2b       	or	r18, r20
    18a6:	25 2b       	or	r18, r21
    18a8:	21 f4       	brne	.+8      	; 0x18b2 <__fp_cmp+0x3e>
    18aa:	08 95       	ret
    18ac:	0a 26       	eor	r0, r26
    18ae:	09 f4       	brne	.+2      	; 0x18b2 <__fp_cmp+0x3e>
    18b0:	a1 40       	sbci	r26, 0x01	; 1
    18b2:	a6 95       	lsr	r26
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	81 1d       	adc	r24, r1
    18b8:	81 1d       	adc	r24, r1
    18ba:	08 95       	ret

000018bc <atoi>:
    18bc:	fc 01       	movw	r30, r24
    18be:	88 27       	eor	r24, r24
    18c0:	99 27       	eor	r25, r25
    18c2:	e8 94       	clt
    18c4:	21 91       	ld	r18, Z+
    18c6:	20 32       	cpi	r18, 0x20	; 32
    18c8:	e9 f3       	breq	.-6      	; 0x18c4 <atoi+0x8>
    18ca:	29 30       	cpi	r18, 0x09	; 9
    18cc:	10 f0       	brcs	.+4      	; 0x18d2 <atoi+0x16>
    18ce:	2e 30       	cpi	r18, 0x0E	; 14
    18d0:	c8 f3       	brcs	.-14     	; 0x18c4 <atoi+0x8>
    18d2:	2b 32       	cpi	r18, 0x2B	; 43
    18d4:	41 f0       	breq	.+16     	; 0x18e6 <atoi+0x2a>
    18d6:	2d 32       	cpi	r18, 0x2D	; 45
    18d8:	39 f4       	brne	.+14     	; 0x18e8 <atoi+0x2c>
    18da:	68 94       	set
    18dc:	04 c0       	rjmp	.+8      	; 0x18e6 <atoi+0x2a>
    18de:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulhi_const_10>
    18e2:	82 0f       	add	r24, r18
    18e4:	91 1d       	adc	r25, r1
    18e6:	21 91       	ld	r18, Z+
    18e8:	20 53       	subi	r18, 0x30	; 48
    18ea:	2a 30       	cpi	r18, 0x0A	; 10
    18ec:	c0 f3       	brcs	.-16     	; 0x18de <atoi+0x22>
    18ee:	1e f4       	brtc	.+6      	; 0x18f6 <atoi+0x3a>
    18f0:	90 95       	com	r25
    18f2:	81 95       	neg	r24
    18f4:	9f 4f       	sbci	r25, 0xFF	; 255
    18f6:	08 95       	ret

000018f8 <strcmp>:
    18f8:	fb 01       	movw	r30, r22
    18fa:	dc 01       	movw	r26, r24
    18fc:	8d 91       	ld	r24, X+
    18fe:	01 90       	ld	r0, Z+
    1900:	80 19       	sub	r24, r0
    1902:	01 10       	cpse	r0, r1
    1904:	d9 f3       	breq	.-10     	; 0x18fc <strcmp+0x4>
    1906:	99 0b       	sbc	r25, r25
    1908:	08 95       	ret

0000190a <strcpy>:
    190a:	fb 01       	movw	r30, r22
    190c:	dc 01       	movw	r26, r24
    190e:	01 90       	ld	r0, Z+
    1910:	0d 92       	st	X+, r0
    1912:	00 20       	and	r0, r0
    1914:	e1 f7       	brne	.-8      	; 0x190e <strcpy+0x4>
    1916:	08 95       	ret

00001918 <__mulhi_const_10>:
    1918:	7a e0       	ldi	r23, 0x0A	; 10
    191a:	97 9f       	mul	r25, r23
    191c:	90 2d       	mov	r25, r0
    191e:	87 9f       	mul	r24, r23
    1920:	80 2d       	mov	r24, r0
    1922:	91 0d       	add	r25, r1
    1924:	11 24       	eor	r1, r1
    1926:	08 95       	ret

00001928 <_exit>:
    1928:	f8 94       	cli

0000192a <__stop_program>:
    192a:	ff cf       	rjmp	.-2      	; 0x192a <__stop_program>
