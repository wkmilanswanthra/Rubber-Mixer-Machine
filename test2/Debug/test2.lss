
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001bb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000154  00800060  00001bb2  00001c46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  008001b4  008001b4  00001d9a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b6  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad9  00000000  00000000  000044c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016b1  00000000  00000000  00004f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00006650  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000685  00000000  00000000  00006b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000141e  00000000  00000000  00007211  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  0000862f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 57 00 	jmp	0xae	; 0xae <__ctors_end>
       4:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_1>
       8:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_2>
       c:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_3>
      10:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      14:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      18:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      1c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_7>
      20:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      24:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__vector_9>
      28:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      2c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      30:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      34:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      38:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      3c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      40:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      44:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      48:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      4c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      50:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__bad_interrupt>
      54:	08 00       	.word	0x0008	; ????
      56:	00 00       	nop
      58:	be 92       	st	-X, r11
      5a:	24 49       	sbci	r18, 0x94	; 148
      5c:	12 3e       	cpi	r17, 0xE2	; 226
      5e:	ab aa       	std	Y+51, r10	; 0x33
      60:	aa 2a       	or	r10, r26
      62:	be cd       	rjmp	.-1156   	; 0xfffffbe0 <__eeprom_end+0xff7efbe0>
      64:	cc cc       	rjmp	.-1640   	; 0xfffff9fe <__eeprom_end+0xff7ef9fe>
      66:	4c 3e       	cpi	r20, 0xEC	; 236
      68:	00 00       	nop
      6a:	00 80       	ld	r0, Z
      6c:	be ab       	std	Y+54, r27	; 0x36
      6e:	aa aa       	std	Y+50, r10	; 0x32
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	00 00       	nop
      74:	00 00       	nop
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	00 08       	sbc	r0, r0
      82:	41 78       	andi	r20, 0x81	; 129
      84:	d3 bb       	out	0x13, r29	; 19
      86:	43 87       	std	Z+11, r20	; 0x0b
      88:	d1 13       	cpse	r29, r17
      8a:	3d 19       	sub	r19, r13
      8c:	0e 3c       	cpi	r16, 0xCE	; 206
      8e:	c3 bd       	out	0x23, r28	; 35
      90:	42 82       	std	Z+2, r4	; 0x02
      92:	ad 2b       	or	r26, r29
      94:	3e 68       	ori	r19, 0x8E	; 142
      96:	ec 82       	std	Y+4, r14	; 0x04
      98:	76 be       	out	0x36, r7	; 54
      9a:	d9 8f       	std	Y+25, r29	; 0x19
      9c:	e1 a9       	ldd	r30, Z+49	; 0x31
      9e:	3e 4c       	sbci	r19, 0xCE	; 206
      a0:	80 ef       	ldi	r24, 0xF0	; 240
      a2:	ff be       	out	0x3f, r15	; 63
      a4:	01 c4       	rjmp	.+2050   	; 0x8a8 <ultrasonic1+0x40>
      a6:	ff 7f       	andi	r31, 0xFF	; 255
      a8:	3f 00       	.word	0x003f	; ????
      aa:	00 00       	nop
	...

000000ae <__ctors_end>:
      ae:	11 24       	eor	r1, r1
      b0:	1f be       	out	0x3f, r1	; 63
      b2:	cf e5       	ldi	r28, 0x5F	; 95
      b4:	d8 e0       	ldi	r29, 0x08	; 8
      b6:	de bf       	out	0x3e, r29	; 62
      b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
      ba:	11 e0       	ldi	r17, 0x01	; 1
      bc:	a0 e6       	ldi	r26, 0x60	; 96
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e2 eb       	ldi	r30, 0xB2	; 178
      c2:	fb e1       	ldi	r31, 0x1B	; 27
      c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x10>
      c6:	05 90       	lpm	r0, Z+
      c8:	0d 92       	st	X+, r0
      ca:	a4 3b       	cpi	r26, 0xB4	; 180
      cc:	b1 07       	cpc	r27, r17
      ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0xc>

000000d0 <__do_clear_bss>:
      d0:	21 e0       	ldi	r18, 0x01	; 1
      d2:	a4 eb       	ldi	r26, 0xB4	; 180
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
      d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
      da:	aa 3e       	cpi	r26, 0xEA	; 234
      dc:	b2 07       	cpc	r27, r18
      de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
      e0:	0e 94 c0 09 	call	0x1380	; 0x1380 <main>
      e4:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <_exit>

000000e8 <__bad_interrupt>:
      e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ec <adc_init>:
#include "ADC.h"

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
      ec:	80 e4       	ldi	r24, 0x40	; 64
      ee:	87 b9       	out	0x07, r24	; 7

	// ADC Enable and prescaler of 128.
	
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
      f0:	87 e8       	ldi	r24, 0x87	; 135
      f2:	86 b9       	out	0x06, r24	; 6
      f4:	08 95       	ret

000000f6 <adc_read>:
// read adc value
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	
	ch &= 0b00000111;  // AND operation with 7. select 3rd chanal
      f6:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch; //0b11111000   0b00000111
      f8:	97 b1       	in	r25, 0x07	; 7
      fa:	98 7f       	andi	r25, 0xF8	; 248
      fc:	89 2b       	or	r24, r25
      fe:	87 b9       	out	0x07, r24	; 7

	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
     100:	86 b1       	in	r24, 0x06	; 6
     102:	80 64       	ori	r24, 0x40	; 64
     104:	86 b9       	out	0x06, r24	; 6

	// wait for conversion to complete
	// ADSC becomes '0' again
	
	while(ADCSRA & (1<<ADSC)); //conversion ends when ADSC become 0.
     106:	36 99       	sbic	0x06, 6	; 6
     108:	fe cf       	rjmp	.-4      	; 0x106 <adc_read+0x10>

	return (ADC);
     10a:	84 b1       	in	r24, 0x04	; 4
     10c:	95 b1       	in	r25, 0x05	; 5
     10e:	08 95       	ret

00000110 <timer_1>:
int v_acid ;


void timer_1(){

	TCCR1A =(0 << WGM11)| (0 << WGM10 );// CTC
     110:	1f bc       	out	0x2f, r1	; 47
	TIMSK |= (1 << OCIE1A);//Set interrupt on compare match
     112:	89 b7       	in	r24, 0x39	; 57
     114:	80 61       	ori	r24, 0x10	; 16
     116:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1 << CS12) | (1 << CS10);// set pre scaler to 1024 and start the timer
     118:	8e b5       	in	r24, 0x2e	; 46
     11a:	85 60       	ori	r24, 0x05	; 5
     11c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x07;
     11e:	87 e0       	ldi	r24, 0x07	; 7
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	9b bd       	out	0x2b, r25	; 43
     124:	8a bd       	out	0x2a, r24	; 42
     126:	08 95       	ret

00000128 <pump_w>:
}

void pump_w(){
     128:	cf 92       	push	r12
     12a:	df 92       	push	r13
     12c:	ef 92       	push	r14
     12e:	ff 92       	push	r15
     130:	0f 93       	push	r16
     132:	1f 93       	push	r17
	
	PORTB = PORTB | (1<<5);    /* Turn on the Relay and motor ON*/
     134:	88 b3       	in	r24, 0x18	; 24
     136:	80 62       	ori	r24, 0x20	; 32
     138:	88 bb       	out	0x18, r24	; 24
	timer_1();
     13a:	0e 94 88 00 	call	0x110	; 0x110 <timer_1>
	DDRD &= ~(1 << DDD2);     /*Clear the PD2 pin*/
     13e:	81 b3       	in	r24, 0x11	; 17
     140:	8b 7f       	andi	r24, 0xFB	; 251
     142:	81 bb       	out	0x11, r24	; 17
	PORTD =	 0xFF;             /* turn On the Pull-up */
     144:	8f ef       	ldi	r24, 0xFF	; 255
     146:	82 bb       	out	0x12, r24	; 18
	DDRD &= ~(1<<PD2);        /* Make INT0 pin as Input */
     148:	81 b3       	in	r24, 0x11	; 17
     14a:	8b 7f       	andi	r24, 0xFB	; 251
     14c:	81 bb       	out	0x11, r24	; 17
	GICR = (1<<INT0);         /* Enable INT0*/
     14e:	80 e4       	ldi	r24, 0x40	; 64
     150:	8b bf       	out	0x3b, r24	; 59
	MCUCR = ((1<<ISC00)|(1<<ISC01));/* Trigger INT0 on Rising Edge triggered */
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	85 bf       	out	0x35, r24	; 53
	
	sei();                   /*enable interrupts*/
     156:	78 94       	sei
	while (totalMilliLitres!=v_water)   {
     158:	c8 c0       	rjmp	.+400    	; 0x2ea <pump_w+0x1c2>
		if((millisec-oldTime)>=1000)
     15a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <millisec>
     15e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <millisec+0x1>
     162:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <millisec+0x2>
     166:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <millisec+0x3>
     16a:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <oldTime>
     16e:	50 91 cb 01 	lds	r21, 0x01CB	; 0x8001cb <oldTime+0x1>
     172:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <oldTime+0x2>
     176:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <oldTime+0x3>
     17a:	84 1b       	sub	r24, r20
     17c:	95 0b       	sbc	r25, r21
     17e:	a6 0b       	sbc	r26, r22
     180:	b7 0b       	sbc	r27, r23
     182:	88 3e       	cpi	r24, 0xE8	; 232
     184:	93 40       	sbci	r25, 0x03	; 3
     186:	a1 05       	cpc	r26, r1
     188:	b1 05       	cpc	r27, r1
     18a:	08 f4       	brcc	.+2      	; 0x18e <pump_w+0x66>
     18c:	ae c0       	rjmp	.+348    	; 0x2ea <pump_w+0x1c2>
		{
			sec++;
     18e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <sec>
     192:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <sec+0x1>
     196:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <sec+0x2>
     19a:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <sec+0x3>
     19e:	01 96       	adiw	r24, 0x01	; 1
     1a0:	a1 1d       	adc	r26, r1
     1a2:	b1 1d       	adc	r27, r1
     1a4:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <sec>
     1a8:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <sec+0x1>
     1ac:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <sec+0x2>
     1b0:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <sec+0x3>
			if(sec==1)
     1b4:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <sec>
     1b8:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <sec+0x1>
     1bc:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <sec+0x2>
     1c0:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <sec+0x3>
     1c4:	01 97       	sbiw	r24, 0x01	; 1
     1c6:	a1 05       	cpc	r26, r1
     1c8:	b1 05       	cpc	r27, r1
     1ca:	09 f0       	breq	.+2      	; 0x1ce <pump_w+0xa6>
     1cc:	8e c0       	rjmp	.+284    	; 0x2ea <pump_w+0x1c2>
			{
				cli();
     1ce:	f8 94       	cli
				
				flowRate = ((1000.0 / (millisec - oldTime)) * pulseCount1) / calibrationFactor;
     1d0:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <millisec>
     1d4:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <millisec+0x1>
     1d8:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <millisec+0x2>
     1dc:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <millisec+0x3>
     1e0:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <oldTime>
     1e4:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <oldTime+0x1>
     1e8:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <oldTime+0x2>
     1ec:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <oldTime+0x3>
     1f0:	bc 01       	movw	r22, r24
     1f2:	cd 01       	movw	r24, r26
     1f4:	60 1b       	sub	r22, r16
     1f6:	71 0b       	sbc	r23, r17
     1f8:	82 0b       	sbc	r24, r18
     1fa:	93 0b       	sbc	r25, r19
     1fc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     200:	9b 01       	movw	r18, r22
     202:	ac 01       	movw	r20, r24
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	70 e0       	ldi	r23, 0x00	; 0
     208:	8a e7       	ldi	r24, 0x7A	; 122
     20a:	94 e4       	ldi	r25, 0x44	; 68
     20c:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     210:	6b 01       	movw	r12, r22
     212:	7c 01       	movw	r14, r24
     214:	60 91 d2 01 	lds	r22, 0x01D2	; 0x8001d2 <pulseCount1>
     218:	70 91 d3 01 	lds	r23, 0x01D3	; 0x8001d3 <pulseCount1+0x1>
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     224:	a7 01       	movw	r20, r14
     226:	96 01       	movw	r18, r12
     228:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     22c:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <calibrationFactor>
     230:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <calibrationFactor+0x1>
     234:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <calibrationFactor+0x2>
     238:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <calibrationFactor+0x3>
     23c:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     240:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <flowRate>
     244:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <flowRate+0x1>
     248:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flowRate+0x2>
     24c:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <flowRate+0x3>
				oldTime = millisec;
     250:	00 91 c0 01 	lds	r16, 0x01C0	; 0x8001c0 <millisec>
     254:	10 91 c1 01 	lds	r17, 0x01C1	; 0x8001c1 <millisec+0x1>
     258:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <millisec+0x2>
     25c:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <millisec+0x3>
     260:	00 93 ca 01 	sts	0x01CA, r16	; 0x8001ca <oldTime>
     264:	10 93 cb 01 	sts	0x01CB, r17	; 0x8001cb <oldTime+0x1>
     268:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <oldTime+0x2>
     26c:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <oldTime+0x3>
				flowMilliLitres = (flowRate / 60) * 1000;
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	30 e0       	ldi	r19, 0x00	; 0
     274:	40 e7       	ldi	r20, 0x70	; 112
     276:	52 e4       	ldi	r21, 0x42	; 66
     278:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     27c:	20 e0       	ldi	r18, 0x00	; 0
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	4a e7       	ldi	r20, 0x7A	; 122
     282:	54 e4       	ldi	r21, 0x44	; 68
     284:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     288:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     28c:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <flowMilliLitres+0x1>
     290:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <flowMilliLitres>
				totalMilliLitres += flowMilliLitres;
     294:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <totalMilliLitres>
     298:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <totalMilliLitres+0x1>
     29c:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <totalMilliLitres+0x2>
     2a0:	50 91 c7 01 	lds	r21, 0x01C7	; 0x8001c7 <totalMilliLitres+0x3>
     2a4:	da 01       	movw	r26, r20
     2a6:	c9 01       	movw	r24, r18
     2a8:	86 0f       	add	r24, r22
     2aa:	97 1f       	adc	r25, r23
     2ac:	a1 1d       	adc	r26, r1
     2ae:	b1 1d       	adc	r27, r1
     2b0:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <totalMilliLitres>
     2b4:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <totalMilliLitres+0x1>
     2b8:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <totalMilliLitres+0x2>
     2bc:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <totalMilliLitres+0x3>
				
				millisec=0;
     2c0:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <millisec>
     2c4:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <millisec+0x1>
     2c8:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <millisec+0x2>
     2cc:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <millisec+0x3>
				sec=0;
     2d0:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <sec>
     2d4:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <sec+0x1>
     2d8:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <sec+0x2>
     2dc:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <sec+0x3>
				pulseCount1 = 0;
     2e0:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <pulseCount1+0x1>
     2e4:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <pulseCount1>

				sei();
     2e8:	78 94       	sei
	DDRD &= ~(1<<PD2);        /* Make INT0 pin as Input */
	GICR = (1<<INT0);         /* Enable INT0*/
	MCUCR = ((1<<ISC00)|(1<<ISC01));/* Trigger INT0 on Rising Edge triggered */
	
	sei();                   /*enable interrupts*/
	while (totalMilliLitres!=v_water)   {
     2ea:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <v_water>
     2ee:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <v_water+0x1>
     2f2:	09 2e       	mov	r0, r25
     2f4:	00 0c       	add	r0, r0
     2f6:	aa 0b       	sbc	r26, r26
     2f8:	bb 0b       	sbc	r27, r27
     2fa:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <totalMilliLitres>
     2fe:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <totalMilliLitres+0x1>
     302:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <totalMilliLitres+0x2>
     306:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <totalMilliLitres+0x3>
     30a:	84 17       	cp	r24, r20
     30c:	95 07       	cpc	r25, r21
     30e:	a6 07       	cpc	r26, r22
     310:	b7 07       	cpc	r27, r23
     312:	09 f0       	breq	.+2      	; 0x316 <pump_w+0x1ee>
     314:	22 cf       	rjmp	.-444    	; 0x15a <pump_w+0x32>

				sei();
			}
		}
	}
	PORTB = PORTB & (~(1<<5)); /*Turn off the relay*/
     316:	88 b3       	in	r24, 0x18	; 24
     318:	8f 7d       	andi	r24, 0xDF	; 223
     31a:	88 bb       	out	0x18, r24	; 24
	
}
     31c:	1f 91       	pop	r17
     31e:	0f 91       	pop	r16
     320:	ff 90       	pop	r15
     322:	ef 90       	pop	r14
     324:	df 90       	pop	r13
     326:	cf 90       	pop	r12
     328:	08 95       	ret

0000032a <__vector_7>:
ISR (TIMER1_COMPA_vect){
     32a:	1f 92       	push	r1
     32c:	0f 92       	push	r0
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	0f 92       	push	r0
     332:	11 24       	eor	r1, r1
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	af 93       	push	r26
     33a:	bf 93       	push	r27
	millisec++;
     33c:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <millisec>
     340:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <millisec+0x1>
     344:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <millisec+0x2>
     348:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <millisec+0x3>
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	a1 1d       	adc	r26, r1
     350:	b1 1d       	adc	r27, r1
     352:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <millisec>
     356:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <millisec+0x1>
     35a:	a0 93 c2 01 	sts	0x01C2, r26	; 0x8001c2 <millisec+0x2>
     35e:	b0 93 c3 01 	sts	0x01C3, r27	; 0x8001c3 <millisec+0x3>
}
     362:	bf 91       	pop	r27
     364:	af 91       	pop	r26
     366:	9f 91       	pop	r25
     368:	8f 91       	pop	r24
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <__vector_1>:
ISR (INT0_vect){
     374:	1f 92       	push	r1
     376:	0f 92       	push	r0
     378:	0f b6       	in	r0, 0x3f	; 63
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	8f 93       	push	r24
     380:	9f 93       	push	r25
	pulseCount1++;
     382:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <pulseCount1>
     386:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <pulseCount1+0x1>
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <pulseCount1+0x1>
     390:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <pulseCount1>
}
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	0f 90       	pop	r0
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	0f 90       	pop	r0
     39e:	1f 90       	pop	r1
     3a0:	18 95       	reti

000003a2 <pump_l>:

void pump_l(){
     3a2:	cf 92       	push	r12
     3a4:	df 92       	push	r13
     3a6:	ef 92       	push	r14
     3a8:	ff 92       	push	r15
     3aa:	0f 93       	push	r16
     3ac:	1f 93       	push	r17
	PORTB = PORTB | (1<<6); /* Turn on the Relay and motor ON*/
     3ae:	88 b3       	in	r24, 0x18	; 24
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	88 bb       	out	0x18, r24	; 24
	timer_1();
     3b4:	0e 94 88 00 	call	0x110	; 0x110 <timer_1>
	DDRD &= ~(1 << DDD2);     // Clear the PD2 pin
     3b8:	81 b3       	in	r24, 0x11	; 17
     3ba:	8b 7f       	andi	r24, 0xFB	; 251
     3bc:	81 bb       	out	0x11, r24	; 17
	PORTD = 0xFF;   // turn On the Pull-up
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	82 bb       	out	0x12, r24	; 18
	DDRD &= ~(1<<PD3);		/* Make INT1 pin as Input */
     3c2:	81 b3       	in	r24, 0x11	; 17
     3c4:	87 7f       	andi	r24, 0xF7	; 247
     3c6:	81 bb       	out	0x11, r24	; 17
	GICR = (1<<INT1);		/* Enable INT1*/
     3c8:	80 e8       	ldi	r24, 0x80	; 128
     3ca:	8b bf       	out	0x3b, r24	; 59
	MCUCR = ((1<<ISC10)|(1<<ISC11));/* Trigger INT1 on Rising Edge triggered */
     3cc:	8c e0       	ldi	r24, 0x0C	; 12
     3ce:	85 bf       	out	0x35, r24	; 53

	sei();// enable interrupts
     3d0:	78 94       	sei
	
	while (totalMilliLitres!=v_latex)   {
     3d2:	c8 c0       	rjmp	.+400    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
		if((millisec-oldTime)>=1000)
     3d4:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <millisec>
     3d8:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <millisec+0x1>
     3dc:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <millisec+0x2>
     3e0:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <millisec+0x3>
     3e4:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <oldTime>
     3e8:	50 91 cb 01 	lds	r21, 0x01CB	; 0x8001cb <oldTime+0x1>
     3ec:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <oldTime+0x2>
     3f0:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <oldTime+0x3>
     3f4:	84 1b       	sub	r24, r20
     3f6:	95 0b       	sbc	r25, r21
     3f8:	a6 0b       	sbc	r26, r22
     3fa:	b7 0b       	sbc	r27, r23
     3fc:	88 3e       	cpi	r24, 0xE8	; 232
     3fe:	93 40       	sbci	r25, 0x03	; 3
     400:	a1 05       	cpc	r26, r1
     402:	b1 05       	cpc	r27, r1
     404:	08 f4       	brcc	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     406:	ae c0       	rjmp	.+348    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
		{
			sec++;
     408:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <sec>
     40c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <sec+0x1>
     410:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <sec+0x2>
     414:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <sec+0x3>
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	a1 1d       	adc	r26, r1
     41c:	b1 1d       	adc	r27, r1
     41e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <sec>
     422:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <sec+0x1>
     426:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <sec+0x2>
     42a:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <sec+0x3>
			if(sec==1)
     42e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <sec>
     432:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <sec+0x1>
     436:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <sec+0x2>
     43a:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <sec+0x3>
     43e:	01 97       	sbiw	r24, 0x01	; 1
     440:	a1 05       	cpc	r26, r1
     442:	b1 05       	cpc	r27, r1
     444:	09 f0       	breq	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     446:	8e c0       	rjmp	.+284    	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
			{
				cli();
     448:	f8 94       	cli
				
				flowRate = ((1000.0 / (millisec - oldTime)) * pulseCount2) / calibrationFactor;
     44a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <millisec>
     44e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <millisec+0x1>
     452:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <millisec+0x2>
     456:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <millisec+0x3>
     45a:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <oldTime>
     45e:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <oldTime+0x1>
     462:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <oldTime+0x2>
     466:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <oldTime+0x3>
     46a:	bc 01       	movw	r22, r24
     46c:	cd 01       	movw	r24, r26
     46e:	60 1b       	sub	r22, r16
     470:	71 0b       	sbc	r23, r17
     472:	82 0b       	sbc	r24, r18
     474:	93 0b       	sbc	r25, r19
     476:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	60 e0       	ldi	r22, 0x00	; 0
     480:	70 e0       	ldi	r23, 0x00	; 0
     482:	8a e7       	ldi	r24, 0x7A	; 122
     484:	94 e4       	ldi	r25, 0x44	; 68
     486:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     48a:	6b 01       	movw	r12, r22
     48c:	7c 01       	movw	r14, r24
     48e:	60 91 d0 01 	lds	r22, 0x01D0	; 0x8001d0 <pulseCount2>
     492:	70 91 d1 01 	lds	r23, 0x01D1	; 0x8001d1 <pulseCount2+0x1>
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     49e:	a7 01       	movw	r20, r14
     4a0:	96 01       	movw	r18, r12
     4a2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     4a6:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <calibrationFactor>
     4aa:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <calibrationFactor+0x1>
     4ae:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <calibrationFactor+0x2>
     4b2:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <calibrationFactor+0x3>
     4b6:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     4ba:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <flowRate>
     4be:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <flowRate+0x1>
     4c2:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flowRate+0x2>
     4c6:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <flowRate+0x3>
				oldTime = millisec;
     4ca:	00 91 c0 01 	lds	r16, 0x01C0	; 0x8001c0 <millisec>
     4ce:	10 91 c1 01 	lds	r17, 0x01C1	; 0x8001c1 <millisec+0x1>
     4d2:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <millisec+0x2>
     4d6:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <millisec+0x3>
     4da:	00 93 ca 01 	sts	0x01CA, r16	; 0x8001ca <oldTime>
     4de:	10 93 cb 01 	sts	0x01CB, r17	; 0x8001cb <oldTime+0x1>
     4e2:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <oldTime+0x2>
     4e6:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <oldTime+0x3>
				flowMilliLitres = (flowRate / 60) * 1000;
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	40 e7       	ldi	r20, 0x70	; 112
     4f0:	52 e4       	ldi	r21, 0x42	; 66
     4f2:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	4a e7       	ldi	r20, 0x7A	; 122
     4fc:	54 e4       	ldi	r21, 0x44	; 68
     4fe:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     502:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     506:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <flowMilliLitres+0x1>
     50a:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <flowMilliLitres>
				totalMilliLitres += flowMilliLitres;
     50e:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <totalMilliLitres>
     512:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <totalMilliLitres+0x1>
     516:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <totalMilliLitres+0x2>
     51a:	50 91 c7 01 	lds	r21, 0x01C7	; 0x8001c7 <totalMilliLitres+0x3>
     51e:	da 01       	movw	r26, r20
     520:	c9 01       	movw	r24, r18
     522:	86 0f       	add	r24, r22
     524:	97 1f       	adc	r25, r23
     526:	a1 1d       	adc	r26, r1
     528:	b1 1d       	adc	r27, r1
     52a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <totalMilliLitres>
     52e:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <totalMilliLitres+0x1>
     532:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <totalMilliLitres+0x2>
     536:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <totalMilliLitres+0x3>

				millisec=0;
     53a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <millisec>
     53e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <millisec+0x1>
     542:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <millisec+0x2>
     546:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <millisec+0x3>
				sec=0;
     54a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <sec>
     54e:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <sec+0x1>
     552:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <sec+0x2>
     556:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <sec+0x3>
				pulseCount2 = 0;
     55a:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <pulseCount2+0x1>
     55e:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <pulseCount2>

				sei();
     562:	78 94       	sei
	GICR = (1<<INT1);		/* Enable INT1*/
	MCUCR = ((1<<ISC10)|(1<<ISC11));/* Trigger INT1 on Rising Edge triggered */

	sei();// enable interrupts
	
	while (totalMilliLitres!=v_latex)   {
     564:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     568:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     56c:	09 2e       	mov	r0, r25
     56e:	00 0c       	add	r0, r0
     570:	aa 0b       	sbc	r26, r26
     572:	bb 0b       	sbc	r27, r27
     574:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <totalMilliLitres>
     578:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <totalMilliLitres+0x1>
     57c:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <totalMilliLitres+0x2>
     580:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <totalMilliLitres+0x3>
     584:	84 17       	cp	r24, r20
     586:	95 07       	cpc	r25, r21
     588:	a6 07       	cpc	r26, r22
     58a:	b7 07       	cpc	r27, r23
     58c:	09 f0       	breq	.+2      	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
     58e:	22 cf       	rjmp	.-444    	; 0x3d4 <pump_l+0x32>

				sei();
			}
		}
	}
	PORTB = PORTB & (~(1<<6)); /*Turn off the relay*/
     590:	88 b3       	in	r24, 0x18	; 24
     592:	8f 7b       	andi	r24, 0xBF	; 191
     594:	88 bb       	out	0x18, r24	; 24
	
}
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	08 95       	ret

000005a4 <__vector_2>:


ISR (INT1_vect){
     5a4:	1f 92       	push	r1
     5a6:	0f 92       	push	r0
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	0f 92       	push	r0
     5ac:	11 24       	eor	r1, r1
     5ae:	8f 93       	push	r24
     5b0:	9f 93       	push	r25
	pulseCount2++;
     5b2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <pulseCount2>
     5b6:	90 91 d1 01 	lds	r25, 0x01D1	; 0x8001d1 <pulseCount2+0x1>
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <pulseCount2+0x1>
     5c0:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <pulseCount2>
}
     5c4:	9f 91       	pop	r25
     5c6:	8f 91       	pop	r24
     5c8:	0f 90       	pop	r0
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	0f 90       	pop	r0
     5ce:	1f 90       	pop	r1
     5d0:	18 95       	reti

000005d2 <pump_a>:

void pump_a( int vol){
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
	v_acid = vol;
     5de:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <v_acid+0x1>
     5e2:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <v_acid>
	PORTB = PORTB | (0<<4);
     5e6:	88 b3       	in	r24, 0x18	; 24
     5e8:	88 bb       	out	0x18, r24	; 24
	PORTB = PORTB | (0<<3);    /*multiplexer input*/
     5ea:	88 b3       	in	r24, 0x18	; 24
     5ec:	88 bb       	out	0x18, r24	; 24
	PORTB = PORTB | (1<<7); /* Turn OFF the Relay and motor ON*/
     5ee:	88 b3       	in	r24, 0x18	; 24
     5f0:	80 68       	ori	r24, 0x80	; 128
     5f2:	88 bb       	out	0x18, r24	; 24
	timer_1();
     5f4:	0e 94 88 00 	call	0x110	; 0x110 <timer_1>
	DDRB &= ~(1 << DDB2);     // Clear the PD2 pin
     5f8:	87 b3       	in	r24, 0x17	; 23
     5fa:	8b 7f       	andi	r24, 0xFB	; 251
     5fc:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xFF;   // turn On the Pull-up
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	88 bb       	out	0x18, r24	; 24
	DDRB &= ~(1<<PB2);		/* Make INT2 pin as Input */
     602:	87 b3       	in	r24, 0x17	; 23
     604:	8b 7f       	andi	r24, 0xFB	; 251
     606:	87 bb       	out	0x17, r24	; 23
	GICR = (1<<INT2);		/* Enable INT2*/
     608:	80 e2       	ldi	r24, 0x20	; 32
     60a:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<<ISC2);/* Trigger INT2 on Rising Edge triggered */
     60c:	80 e4       	ldi	r24, 0x40	; 64
     60e:	85 bf       	out	0x35, r24	; 53


	sei();// enable interrupts
     610:	78 94       	sei
	
	while (totalMilliLitres!=v_acid)   {
     612:	c8 c0       	rjmp	.+400    	; 0x7a4 <pump_a+0x1d2>
		if((millisec-oldTime)>=1000)
     614:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <millisec>
     618:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <millisec+0x1>
     61c:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <millisec+0x2>
     620:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <millisec+0x3>
     624:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <oldTime>
     628:	50 91 cb 01 	lds	r21, 0x01CB	; 0x8001cb <oldTime+0x1>
     62c:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <oldTime+0x2>
     630:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <oldTime+0x3>
     634:	84 1b       	sub	r24, r20
     636:	95 0b       	sbc	r25, r21
     638:	a6 0b       	sbc	r26, r22
     63a:	b7 0b       	sbc	r27, r23
     63c:	88 3e       	cpi	r24, 0xE8	; 232
     63e:	93 40       	sbci	r25, 0x03	; 3
     640:	a1 05       	cpc	r26, r1
     642:	b1 05       	cpc	r27, r1
     644:	08 f4       	brcc	.+2      	; 0x648 <pump_a+0x76>
     646:	ae c0       	rjmp	.+348    	; 0x7a4 <pump_a+0x1d2>
		{
			sec++;
     648:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <sec>
     64c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <sec+0x1>
     650:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <sec+0x2>
     654:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <sec+0x3>
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	a1 1d       	adc	r26, r1
     65c:	b1 1d       	adc	r27, r1
     65e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <sec>
     662:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <sec+0x1>
     666:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <sec+0x2>
     66a:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <sec+0x3>
			if(sec==1)
     66e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <sec>
     672:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <sec+0x1>
     676:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <sec+0x2>
     67a:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <sec+0x3>
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	a1 05       	cpc	r26, r1
     682:	b1 05       	cpc	r27, r1
     684:	09 f0       	breq	.+2      	; 0x688 <pump_a+0xb6>
     686:	8e c0       	rjmp	.+284    	; 0x7a4 <pump_a+0x1d2>
			{
				cli();
     688:	f8 94       	cli
				
				flowRate = ((1000.0 / (millisec - oldTime)) * pulseCount3) / calibrationFactor;
     68a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <millisec>
     68e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <millisec+0x1>
     692:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <millisec+0x2>
     696:	b0 91 c3 01 	lds	r27, 0x01C3	; 0x8001c3 <millisec+0x3>
     69a:	00 91 ca 01 	lds	r16, 0x01CA	; 0x8001ca <oldTime>
     69e:	10 91 cb 01 	lds	r17, 0x01CB	; 0x8001cb <oldTime+0x1>
     6a2:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <oldTime+0x2>
     6a6:	30 91 cd 01 	lds	r19, 0x01CD	; 0x8001cd <oldTime+0x3>
     6aa:	bc 01       	movw	r22, r24
     6ac:	cd 01       	movw	r24, r26
     6ae:	60 1b       	sub	r22, r16
     6b0:	71 0b       	sbc	r23, r17
     6b2:	82 0b       	sbc	r24, r18
     6b4:	93 0b       	sbc	r25, r19
     6b6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     6ba:	9b 01       	movw	r18, r22
     6bc:	ac 01       	movw	r20, r24
     6be:	60 e0       	ldi	r22, 0x00	; 0
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	8a e7       	ldi	r24, 0x7A	; 122
     6c4:	94 e4       	ldi	r25, 0x44	; 68
     6c6:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     6ca:	6b 01       	movw	r12, r22
     6cc:	7c 01       	movw	r14, r24
     6ce:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <pulseCount3>
     6d2:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <pulseCount3+0x1>
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     6de:	a7 01       	movw	r20, r14
     6e0:	96 01       	movw	r18, r12
     6e2:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     6e6:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <calibrationFactor>
     6ea:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <calibrationFactor+0x1>
     6ee:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <calibrationFactor+0x2>
     6f2:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <calibrationFactor+0x3>
     6f6:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     6fa:	60 93 d4 01 	sts	0x01D4, r22	; 0x8001d4 <flowRate>
     6fe:	70 93 d5 01 	sts	0x01D5, r23	; 0x8001d5 <flowRate+0x1>
     702:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flowRate+0x2>
     706:	90 93 d7 01 	sts	0x01D7, r25	; 0x8001d7 <flowRate+0x3>
				oldTime = millisec;
     70a:	00 91 c0 01 	lds	r16, 0x01C0	; 0x8001c0 <millisec>
     70e:	10 91 c1 01 	lds	r17, 0x01C1	; 0x8001c1 <millisec+0x1>
     712:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <millisec+0x2>
     716:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <millisec+0x3>
     71a:	00 93 ca 01 	sts	0x01CA, r16	; 0x8001ca <oldTime>
     71e:	10 93 cb 01 	sts	0x01CB, r17	; 0x8001cb <oldTime+0x1>
     722:	20 93 cc 01 	sts	0x01CC, r18	; 0x8001cc <oldTime+0x2>
     726:	30 93 cd 01 	sts	0x01CD, r19	; 0x8001cd <oldTime+0x3>
				flowMilliLitres = (flowRate / 60) * 1000;
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 e7       	ldi	r20, 0x70	; 112
     730:	52 e4       	ldi	r21, 0x42	; 66
     732:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	4a e7       	ldi	r20, 0x7A	; 122
     73c:	54 e4       	ldi	r21, 0x44	; 68
     73e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     742:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
     746:	70 93 c9 01 	sts	0x01C9, r23	; 0x8001c9 <flowMilliLitres+0x1>
     74a:	60 93 c8 01 	sts	0x01C8, r22	; 0x8001c8 <flowMilliLitres>
				totalMilliLitres += flowMilliLitres;
     74e:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <totalMilliLitres>
     752:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <totalMilliLitres+0x1>
     756:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <totalMilliLitres+0x2>
     75a:	50 91 c7 01 	lds	r21, 0x01C7	; 0x8001c7 <totalMilliLitres+0x3>
     75e:	da 01       	movw	r26, r20
     760:	c9 01       	movw	r24, r18
     762:	86 0f       	add	r24, r22
     764:	97 1f       	adc	r25, r23
     766:	a1 1d       	adc	r26, r1
     768:	b1 1d       	adc	r27, r1
     76a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <totalMilliLitres>
     76e:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <totalMilliLitres+0x1>
     772:	a0 93 c6 01 	sts	0x01C6, r26	; 0x8001c6 <totalMilliLitres+0x2>
     776:	b0 93 c7 01 	sts	0x01C7, r27	; 0x8001c7 <totalMilliLitres+0x3>
				
				millisec=0;
     77a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <millisec>
     77e:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <millisec+0x1>
     782:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <millisec+0x2>
     786:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <millisec+0x3>
				sec=0;
     78a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <sec>
     78e:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <sec+0x1>
     792:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <sec+0x2>
     796:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <sec+0x3>
				pulseCount3 = 0;
     79a:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <pulseCount3+0x1>
     79e:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <pulseCount3>

				sei();
     7a2:	78 94       	sei
	MCUCR = (1<<ISC2);/* Trigger INT2 on Rising Edge triggered */


	sei();// enable interrupts
	
	while (totalMilliLitres!=v_acid)   {
     7a4:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <v_acid>
     7a8:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <v_acid+0x1>
     7ac:	09 2e       	mov	r0, r25
     7ae:	00 0c       	add	r0, r0
     7b0:	aa 0b       	sbc	r26, r26
     7b2:	bb 0b       	sbc	r27, r27
     7b4:	40 91 c4 01 	lds	r20, 0x01C4	; 0x8001c4 <totalMilliLitres>
     7b8:	50 91 c5 01 	lds	r21, 0x01C5	; 0x8001c5 <totalMilliLitres+0x1>
     7bc:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <totalMilliLitres+0x2>
     7c0:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <totalMilliLitres+0x3>
     7c4:	84 17       	cp	r24, r20
     7c6:	95 07       	cpc	r25, r21
     7c8:	a6 07       	cpc	r26, r22
     7ca:	b7 07       	cpc	r27, r23
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <pump_a+0x1fe>
     7ce:	22 cf       	rjmp	.-444    	; 0x614 <pump_a+0x42>
				sei();
				
			}
		}
	}
	PORTB = PORTB & (~(1<<7)); /*Turn off the relay*/
     7d0:	88 b3       	in	r24, 0x18	; 24
     7d2:	8f 77       	andi	r24, 0x7F	; 127
     7d4:	88 bb       	out	0x18, r24	; 24
	
}
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	08 95       	ret

000007e4 <initUS>:
double distance = 0;


void initUS(){
	
	DDRB = DDRB | 1 << DDB1;
     7e4:	87 b3       	in	r24, 0x17	; 23
     7e6:	82 60       	ori	r24, 0x02	; 2
     7e8:	87 bb       	out	0x17, r24	; 23
	//DDRD = DDRD & ~(1 << DDD2) ;
	//PORTD = PORTD & ~(1 << PD2);
	DDRB = DDRB & ~(1 << DDB2) ;
     7ea:	87 b3       	in	r24, 0x17	; 23
     7ec:	8b 7f       	andi	r24, 0xFB	; 251
     7ee:	87 bb       	out	0x17, r24	; 23
	PORTB = PORTB & ~(1 << PB2);
     7f0:	88 b3       	in	r24, 0x18	; 24
     7f2:	8b 7f       	andi	r24, 0xFB	; 251
     7f4:	88 bb       	out	0x18, r24	; 24
	DDRB= DDRB | 1 << DDB3;
     7f6:	87 b3       	in	r24, 0x17	; 23
     7f8:	88 60       	ori	r24, 0x08	; 8
     7fa:	87 bb       	out	0x17, r24	; 23
	DDRB= DDRB | 1 << DDB4;
     7fc:	87 b3       	in	r24, 0x17	; 23
     7fe:	80 61       	ori	r24, 0x10	; 16
     800:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     802:	83 ed       	ldi	r24, 0xD3	; 211
     804:	90 e3       	ldi	r25, 0x30	; 48
     806:	01 97       	sbiw	r24, 0x01	; 1
     808:	f1 f7       	brne	.-4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80c:	00 00       	nop
	_delay_ms(50);
	MCUCSR |= 1 << ISC2;
     80e:	84 b7       	in	r24, 0x34	; 52
     810:	80 64       	ori	r24, 0x40	; 64
     812:	84 bf       	out	0x34, r24	; 52
	GIFR &= ~(1<< INTF2);
     814:	8a b7       	in	r24, 0x3a	; 58
     816:	8f 7d       	andi	r24, 0xDF	; 223
     818:	8a bf       	out	0x3a, r24	; 58
	GICR |= 1<<INT2;
     81a:	8b b7       	in	r24, 0x3b	; 59
     81c:	80 62       	ori	r24, 0x20	; 32
     81e:	8b bf       	out	0x3b, r24	; 59
	//MCUCR |= 1<<ISC00;
	TIMSK |= 1 << TOIE1;
     820:	89 b7       	in	r24, 0x39	; 57
     822:	84 60       	ori	r24, 0x04	; 4
     824:	89 bf       	out	0x39, r24	; 57
	sei();
     826:	78 94       	sei
     828:	08 95       	ret

0000082a <trigPulse>:
}


void trigPulse()
{
	PORTB = PORTB | 1<<PB1;
     82a:	88 b3       	in	r24, 0x18	; 24
     82c:	82 60       	ori	r24, 0x02	; 2
     82e:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     830:	85 e0       	ldi	r24, 0x05	; 5
     832:	8a 95       	dec	r24
     834:	f1 f7       	brne	.-4      	; 0x832 <trigPulse+0x8>
	_delay_us(15);
	PORTB = PORTB & ~(1<<PB1);
     836:	88 b3       	in	r24, 0x18	; 24
     838:	8d 7f       	andi	r24, 0xFD	; 253
     83a:	88 bb       	out	0x18, r24	; 24
     83c:	85 e0       	ldi	r24, 0x05	; 5
     83e:	8a 95       	dec	r24
     840:	f1 f7       	brne	.-4      	; 0x83e <trigPulse+0x14>
     842:	08 95       	ret

00000844 <retDistance>:
	
}

uint8_t retDistance(double distance)
{
	v_acid =15;
     844:	2f e0       	ldi	r18, 0x0F	; 15
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	30 93 df 01 	sts	0x01DF, r19	; 0x8001df <v_acid+0x1>
     84c:	20 93 de 01 	sts	0x01DE, r18	; 0x8001de <v_acid>
	if (distance >50)
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	48 e4       	ldi	r20, 0x48	; 72
     856:	52 e4       	ldi	r21, 0x42	; 66
     858:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__gesf2>
     85c:	18 16       	cp	r1, r24
     85e:	14 f4       	brge	.+4      	; 0x864 <__stack+0x5>
	{
		return 1;
     860:	81 e0       	ldi	r24, 0x01	; 1
     862:	08 95       	ret
	}
	else
	{
		return 0;
     864:	80 e0       	ldi	r24, 0x00	; 0
	}
	_delay_ms(200);
	
}
     866:	08 95       	ret

00000868 <ultrasonic1>:
	sei();
}

uint8_t ultrasonic1()
{
	v_water=12;
     868:	8c e0       	ldi	r24, 0x0C	; 12
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <v_water+0x1>
     870:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <v_water>
	PORTB=PORTB & ~(1 << PB3);
     874:	88 b3       	in	r24, 0x18	; 24
     876:	87 7f       	andi	r24, 0xF7	; 247
     878:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1 << PB4);
     87a:	88 b3       	in	r24, 0x18	; 24
     87c:	8f 7e       	andi	r24, 0xEF	; 239
     87e:	88 bb       	out	0x18, r24	; 24
	trigPulse();
     880:	0e 94 15 04 	call	0x82a	; 0x82a <trigPulse>
	distance = tCount*1000000.0/F_CPU/58;
     884:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <tCount>
     888:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <tCount+0x1>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     894:	20 e0       	ldi	r18, 0x00	; 0
     896:	34 e2       	ldi	r19, 0x24	; 36
     898:	44 e7       	ldi	r20, 0x74	; 116
     89a:	59 e4       	ldi	r21, 0x49	; 73
     89c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	34 e2       	ldi	r19, 0x24	; 36
     8a4:	44 e7       	ldi	r20, 0x74	; 116
     8a6:	59 e4       	ldi	r21, 0x49	; 73
     8a8:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	48 e6       	ldi	r20, 0x68	; 104
     8b2:	52 e4       	ldi	r21, 0x42	; 66
     8b4:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     8b8:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <__data_end>
     8bc:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <__data_end+0x1>
     8c0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end+0x2>
     8c4:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x3>
	v_water=13;
     8c8:	2d e0       	ldi	r18, 0x0D	; 13
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <v_water+0x1>
     8d0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <v_water>
	return retDistance(distance);
     8d4:	0e 94 22 04 	call	0x844	; 0x844 <retDistance>

}
     8d8:	08 95       	ret

000008da <ultrasonic2>:


uint8_t ultrasonic2()
{
	PORTB=PORTB | 1 << PB3;
     8da:	88 b3       	in	r24, 0x18	; 24
     8dc:	88 60       	ori	r24, 0x08	; 8
     8de:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB & ~(1 << PB4);
     8e0:	88 b3       	in	r24, 0x18	; 24
     8e2:	8f 7e       	andi	r24, 0xEF	; 239
     8e4:	88 bb       	out	0x18, r24	; 24
	trigPulse();
     8e6:	0e 94 15 04 	call	0x82a	; 0x82a <trigPulse>
	distance = tCount*1000000.0/F_CPU/58;
     8ea:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <tCount>
     8ee:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <tCount+0x1>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	34 e2       	ldi	r19, 0x24	; 36
     8fe:	44 e7       	ldi	r20, 0x74	; 116
     900:	59 e4       	ldi	r21, 0x49	; 73
     902:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	34 e2       	ldi	r19, 0x24	; 36
     90a:	44 e7       	ldi	r20, 0x74	; 116
     90c:	59 e4       	ldi	r21, 0x49	; 73
     90e:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	48 e6       	ldi	r20, 0x68	; 104
     918:	52 e4       	ldi	r21, 0x42	; 66
     91a:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     91e:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <__data_end>
     922:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <__data_end+0x1>
     926:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end+0x2>
     92a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x3>
	return retDistance(distance);
     92e:	0e 94 22 04 	call	0x844	; 0x844 <retDistance>

}
     932:	08 95       	ret

00000934 <ultrasonic3>:

uint8_t ultrasonic3()
{
	PORTB=PORTB & ~(1 << PB3);
     934:	88 b3       	in	r24, 0x18	; 24
     936:	87 7f       	andi	r24, 0xF7	; 247
     938:	88 bb       	out	0x18, r24	; 24
	PORTB=PORTB | 1 << PB4;
     93a:	88 b3       	in	r24, 0x18	; 24
     93c:	80 61       	ori	r24, 0x10	; 16
     93e:	88 bb       	out	0x18, r24	; 24
	trigPulse();
     940:	0e 94 15 04 	call	0x82a	; 0x82a <trigPulse>
	distance = tCount*1000000.0/F_CPU/58;
     944:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <tCount>
     948:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <tCount+0x1>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatunsisf>
     954:	20 e0       	ldi	r18, 0x00	; 0
     956:	34 e2       	ldi	r19, 0x24	; 36
     958:	44 e7       	ldi	r20, 0x74	; 116
     95a:	59 e4       	ldi	r21, 0x49	; 73
     95c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	34 e2       	ldi	r19, 0x24	; 36
     964:	44 e7       	ldi	r20, 0x74	; 116
     966:	59 e4       	ldi	r21, 0x49	; 73
     968:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	48 e6       	ldi	r20, 0x68	; 104
     972:	52 e4       	ldi	r21, 0x42	; 66
     974:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
     978:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <__data_end>
     97c:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <__data_end+0x1>
     980:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <__data_end+0x2>
     984:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <__data_end+0x3>
	return retDistance(distance);
     988:	0e 94 22 04 	call	0x844	; 0x844 <retDistance>

}
     98c:	08 95       	ret

0000098e <__vector_9>:
	}
	_delay_ms(200);
	
}

ISR(TIMER1_OVF_vect){
     98e:	1f 92       	push	r1
     990:	0f 92       	push	r0
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	0f 92       	push	r0
     996:	11 24       	eor	r1, r1
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
	TCCR1B = 0;
     99c:	1e bc       	out	0x2e, r1	; 46
	tCount = 200;
     99e:	88 ec       	ldi	r24, 0xC8	; 200
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <tCount+0x1>
     9a6:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <tCount>
	TCNT1 = 0;
     9aa:	1d bc       	out	0x2d, r1	; 45
     9ac:	1c bc       	out	0x2c, r1	; 44
	i = 0;
     9ae:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <i+0x1>
     9b2:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <i>
}
     9b6:	9f 91       	pop	r25
     9b8:	8f 91       	pop	r24
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	0f 90       	pop	r0
     9c0:	1f 90       	pop	r1
     9c2:	18 95       	reti

000009c4 <__vector_3>:

ISR(INT2_vect)
{
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	8f 93       	push	r24
     9d0:	9f 93       	push	r25
	GICR &= ~(1<<INT2);
     9d2:	8b b7       	in	r24, 0x3b	; 59
     9d4:	8f 7d       	andi	r24, 0xDF	; 223
     9d6:	8b bf       	out	0x3b, r24	; 59
	MCUCSR ^= 1 << ISC2;
     9d8:	94 b7       	in	r25, 0x34	; 52
     9da:	80 e4       	ldi	r24, 0x40	; 64
     9dc:	89 27       	eor	r24, r25
     9de:	84 bf       	out	0x34, r24	; 52
	GIFR &= ~(1<< INTF2);
     9e0:	8a b7       	in	r24, 0x3a	; 58
     9e2:	8f 7d       	andi	r24, 0xDF	; 223
     9e4:	8a bf       	out	0x3a, r24	; 58
	GICR |= 1<<INT2;
     9e6:	8b b7       	in	r24, 0x3b	; 59
     9e8:	80 62       	ori	r24, 0x20	; 32
     9ea:	8b bf       	out	0x3b, r24	; 59
	pulseCount3++;
     9ec:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <pulseCount3>
     9f0:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <pulseCount3+0x1>
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <pulseCount3+0x1>
     9fa:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <pulseCount3>

	if(i == 0)
     9fe:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <i>
     a02:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <i+0x1>
     a06:	89 2b       	or	r24, r25
     a08:	51 f4       	brne	.+20     	; 0xa1e <__vector_3+0x5a>
	{
		TCCR1B |= 1<<CS10;
     a0a:	8e b5       	in	r24, 0x2e	; 46
     a0c:	81 60       	ori	r24, 0x01	; 1
     a0e:	8e bd       	out	0x2e, r24	; 46
		i = 1;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <i+0x1>
     a18:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <i>
     a1c:	0d c0       	rjmp	.+26     	; 0xa38 <__vector_3+0x74>
	}
	else
	{
		TCCR1B = 0;
     a1e:	1e bc       	out	0x2e, r1	; 46
		tCount = TCNT1;
     a20:	8c b5       	in	r24, 0x2c	; 44
     a22:	9d b5       	in	r25, 0x2d	; 45
     a24:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <tCount+0x1>
     a28:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <tCount>
		TCNT1 = 0;
     a2c:	1d bc       	out	0x2d, r1	; 45
     a2e:	1c bc       	out	0x2c, r1	; 44
		i = 0;
     a30:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <i+0x1>
     a34:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <i>
	}
     a38:	9f 91       	pop	r25
     a3a:	8f 91       	pop	r24
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	0f 90       	pop	r0
     a42:	1f 90       	pop	r1
     a44:	18 95       	reti

00000a46 <keyfind>:

char *keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;           /* set port direction as input-output */
     a46:	80 ef       	ldi	r24, 0xF0	; 240
     a48:	8a bb       	out	0x1a, r24	; 26
		KEY_PRT = 0xFF;
     a4a:	8f ef       	ldi	r24, 0xFF	; 255
     a4c:	8b bb       	out	0x1b, r24	; 27

		do
		{
			KEY_PRT &= 0x0F;      /* mask PORT for column read only */
     a4e:	8b b3       	in	r24, 0x1b	; 27
     a50:	8f 70       	andi	r24, 0x0F	; 15
     a52:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     a54:	00 00       	nop
			colloc = (KEY_PIN & 0x0F); /* read status of column */
     a56:	89 b3       	in	r24, 0x19	; 25
     a58:	8f 70       	andi	r24, 0x0F	; 15
     a5a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <colloc>
		}while(colloc != 0x0F);
     a5e:	8f 30       	cpi	r24, 0x0F	; 15
     a60:	b1 f7       	brne	.-20     	; 0xa4e <keyfind+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a62:	87 e8       	ldi	r24, 0x87	; 135
     a64:	93 e1       	ldi	r25, 0x13	; 19
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	f1 f7       	brne	.-4      	; 0xa66 <keyfind+0x20>
     a6a:	00 c0       	rjmp	.+0      	; 0xa6c <keyfind+0x26>
     a6c:	00 00       	nop
			do
			{
				do
				{
				_delay_ms(20);             /* 20ms key debounce time */
				colloc = (KEY_PIN & 0x0F); /* read status of column */
     a6e:	89 b3       	in	r24, 0x19	; 25
     a70:	8f 70       	andi	r24, 0x0F	; 15
     a72:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <colloc>
				}while(colloc == 0x0F);        /* check for any key press */
     a76:	8f 30       	cpi	r24, 0x0F	; 15
     a78:	a1 f3       	breq	.-24     	; 0xa62 <keyfind+0x1c>
     a7a:	8f e0       	ldi	r24, 0x0F	; 15
     a7c:	97 e2       	ldi	r25, 0x27	; 39
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	f1 f7       	brne	.-4      	; 0xa7e <keyfind+0x38>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <keyfind+0x3e>
     a84:	00 00       	nop
				
				_delay_ms (40);	            /* 20 ms key debounce time */
				colloc = (KEY_PIN & 0x0F);
     a86:	89 b3       	in	r24, 0x19	; 25
     a88:	8f 70       	andi	r24, 0x0F	; 15
     a8a:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <colloc>
			}while(colloc == 0x0F);
     a8e:	8f 30       	cpi	r24, 0x0F	; 15
     a90:	41 f3       	breq	.-48     	; 0xa62 <keyfind+0x1c>

			/* now check for rows */
			KEY_PRT = 0xEF;            /* check for pressed key in 1st row */
     a92:	8f ee       	ldi	r24, 0xEF	; 239
     a94:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     a96:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     a98:	89 b3       	in	r24, 0x19	; 25
     a9a:	8f 70       	andi	r24, 0x0F	; 15
     a9c:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <colloc>
			if(colloc != 0x0F)
     aa0:	8f 30       	cpi	r24, 0x0F	; 15
     aa2:	19 f0       	breq	.+6      	; 0xaaa <keyfind+0x64>
			{
				rowloc = 0;
     aa4:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <rowloc>
				break;
     aa8:	27 c0       	rjmp	.+78     	; 0xaf8 <keyfind+0xb2>
			}

			KEY_PRT = 0xDF;		/* check for pressed key in 2nd row */
     aaa:	8f ed       	ldi	r24, 0xDF	; 223
     aac:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     aae:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     ab0:	89 b3       	in	r24, 0x19	; 25
     ab2:	8f 70       	andi	r24, 0x0F	; 15
     ab4:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <colloc>
			if(colloc != 0x0F)
     ab8:	8f 30       	cpi	r24, 0x0F	; 15
     aba:	21 f0       	breq	.+8      	; 0xac4 <keyfind+0x7e>
			{
				rowloc = 1;
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <rowloc>
				break;
     ac2:	1a c0       	rjmp	.+52     	; 0xaf8 <keyfind+0xb2>
			}
			
			KEY_PRT = 0xBF;		/* check for pressed key in 3rd row */
     ac4:	8f eb       	ldi	r24, 0xBF	; 191
     ac6:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     ac8:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     aca:	89 b3       	in	r24, 0x19	; 25
     acc:	8f 70       	andi	r24, 0x0F	; 15
     ace:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <colloc>
			if(colloc != 0x0F)
     ad2:	8f 30       	cpi	r24, 0x0F	; 15
     ad4:	21 f0       	breq	.+8      	; 0xade <keyfind+0x98>
			{
				rowloc = 2;
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <rowloc>
				break;
     adc:	0d c0       	rjmp	.+26     	; 0xaf8 <keyfind+0xb2>
			}

			KEY_PRT = 0x7F;		/* check for pressed key in 4th row */
     ade:	8f e7       	ldi	r24, 0x7F	; 127
     ae0:	8b bb       	out	0x1b, r24	; 27
			asm("NOP");
     ae2:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
     ae4:	89 b3       	in	r24, 0x19	; 25
     ae6:	8f 70       	andi	r24, 0x0F	; 15
     ae8:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <colloc>
			if(colloc != 0x0F)
     aec:	8f 30       	cpi	r24, 0x0F	; 15
     aee:	09 f4       	brne	.+2      	; 0xaf2 <keyfind+0xac>
     af0:	aa cf       	rjmp	.-172    	; 0xa46 <keyfind>
			{
				rowloc = 3;
     af2:	83 e0       	ldi	r24, 0x03	; 3
     af4:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <rowloc>
				break;
			}
		}

		if(colloc == 0x0E)
     af8:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <colloc>
     afc:	8e 30       	cpi	r24, 0x0E	; 14
     afe:	71 f4       	brne	.+28     	; 0xb1c <keyfind+0xd6>
		return(keypad[rowloc][0]);
     b00:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <rowloc>
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	ee 0f       	add	r30, r30
     b08:	ff 1f       	adc	r31, r31
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	ee 0f       	add	r30, r30
     b10:	ff 1f       	adc	r31, r31
     b12:	e8 59       	subi	r30, 0x98	; 152
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	80 81       	ld	r24, Z
     b18:	91 81       	ldd	r25, Z+1	; 0x01
     b1a:	08 95       	ret
		else if(colloc == 0x0D)
     b1c:	8d 30       	cpi	r24, 0x0D	; 13
     b1e:	71 f4       	brne	.+28     	; 0xb3c <keyfind+0xf6>
		return(keypad[rowloc][1]);
     b20:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <rowloc>
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	e8 59       	subi	r30, 0x98	; 152
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	82 81       	ldd	r24, Z+2	; 0x02
     b38:	93 81       	ldd	r25, Z+3	; 0x03
     b3a:	08 95       	ret
		else if(colloc == 0x0B)
     b3c:	8b 30       	cpi	r24, 0x0B	; 11
     b3e:	71 f4       	brne	.+28     	; 0xb5c <keyfind+0x116>
		return(keypad[rowloc][2]);
     b40:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <rowloc>
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	e8 59       	subi	r30, 0x98	; 152
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	84 81       	ldd	r24, Z+4	; 0x04
     b58:	95 81       	ldd	r25, Z+5	; 0x05
     b5a:	08 95       	ret
		else
		return(keypad[rowloc][3]);
     b5c:	e0 91 e1 01 	lds	r30, 0x01E1	; 0x8001e1 <rowloc>
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	ee 0f       	add	r30, r30
     b64:	ff 1f       	adc	r31, r31
     b66:	ee 0f       	add	r30, r30
     b68:	ff 1f       	adc	r31, r31
     b6a:	ee 0f       	add	r30, r30
     b6c:	ff 1f       	adc	r31, r31
     b6e:	e8 59       	subi	r30, 0x98	; 152
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	86 81       	ldd	r24, Z+6	; 0x06
     b74:	97 81       	ldd	r25, Z+7	; 0x07
     b76:	08 95       	ret

00000b78 <stprTrayPsh_init>:
}
void disp_l_low()
{
	lcd_cmd(0x01);
	lcd_cmd(0x80);
	lcd_msg("Latex Level Low!");
     b78:	84 b3       	in	r24, 0x14	; 20
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	84 bb       	out	0x14, r24	; 20
     b7e:	85 b3       	in	r24, 0x15	; 21
     b80:	8f 70       	andi	r24, 0x0F	; 15
     b82:	85 bb       	out	0x15, r24	; 21
     b84:	08 95       	ret

00000b86 <stprMix_init>:
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	81 bb       	out	0x11, r24	; 17
     b8a:	12 ba       	out	0x12, r1	; 18
     b8c:	08 95       	ret

00000b8e <stprTrayPsh_clk>:
     b8e:	ac 01       	movw	r20, r24
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	2a c0       	rjmp	.+84     	; 0xbea <stprTrayPsh_clk+0x5c>
     b96:	95 b3       	in	r25, 0x15	; 21
     b98:	9f 70       	andi	r25, 0x0F	; 15
     b9a:	90 69       	ori	r25, 0x90	; 144
     b9c:	95 bb       	out	0x15, r25	; 21
     b9e:	8b ed       	ldi	r24, 0xDB	; 219
     ba0:	95 e0       	ldi	r25, 0x05	; 5
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <stprTrayPsh_clk+0x14>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <stprTrayPsh_clk+0x1a>
     ba8:	00 00       	nop
     baa:	95 b3       	in	r25, 0x15	; 21
     bac:	9f 70       	andi	r25, 0x0F	; 15
     bae:	90 6c       	ori	r25, 0xC0	; 192
     bb0:	95 bb       	out	0x15, r25	; 21
     bb2:	8b ed       	ldi	r24, 0xDB	; 219
     bb4:	95 e0       	ldi	r25, 0x05	; 5
     bb6:	01 97       	sbiw	r24, 0x01	; 1
     bb8:	f1 f7       	brne	.-4      	; 0xbb6 <stprTrayPsh_clk+0x28>
     bba:	00 c0       	rjmp	.+0      	; 0xbbc <stprTrayPsh_clk+0x2e>
     bbc:	00 00       	nop
     bbe:	95 b3       	in	r25, 0x15	; 21
     bc0:	9f 70       	andi	r25, 0x0F	; 15
     bc2:	90 66       	ori	r25, 0x60	; 96
     bc4:	95 bb       	out	0x15, r25	; 21
     bc6:	8b ed       	ldi	r24, 0xDB	; 219
     bc8:	95 e0       	ldi	r25, 0x05	; 5
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	f1 f7       	brne	.-4      	; 0xbca <stprTrayPsh_clk+0x3c>
     bce:	00 c0       	rjmp	.+0      	; 0xbd0 <stprTrayPsh_clk+0x42>
     bd0:	00 00       	nop
     bd2:	95 b3       	in	r25, 0x15	; 21
     bd4:	9f 70       	andi	r25, 0x0F	; 15
     bd6:	90 63       	ori	r25, 0x30	; 48
     bd8:	95 bb       	out	0x15, r25	; 21
     bda:	8b ed       	ldi	r24, 0xDB	; 219
     bdc:	95 e0       	ldi	r25, 0x05	; 5
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <stprTrayPsh_clk+0x50>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <stprTrayPsh_clk+0x56>
     be4:	00 00       	nop
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
     bea:	24 17       	cp	r18, r20
     bec:	35 07       	cpc	r19, r21
     bee:	9c f2       	brlt	.-90     	; 0xb96 <stprTrayPsh_clk+0x8>
     bf0:	85 b3       	in	r24, 0x15	; 21
     bf2:	8f 70       	andi	r24, 0x0F	; 15
     bf4:	80 69       	ori	r24, 0x90	; 144
     bf6:	85 bb       	out	0x15, r24	; 21
     bf8:	8b ed       	ldi	r24, 0xDB	; 219
     bfa:	95 e0       	ldi	r25, 0x05	; 5
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	f1 f7       	brne	.-4      	; 0xbfc <stprTrayPsh_clk+0x6e>
     c00:	00 c0       	rjmp	.+0      	; 0xc02 <stprTrayPsh_clk+0x74>
     c02:	00 00       	nop
     c04:	08 95       	ret

00000c06 <stprTrayPsh_aclk>:
     c06:	ac 01       	movw	r20, r24
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	2a c0       	rjmp	.+84     	; 0xc62 <stprTrayPsh_aclk+0x5c>
     c0e:	95 b3       	in	r25, 0x15	; 21
     c10:	9f 70       	andi	r25, 0x0F	; 15
     c12:	90 63       	ori	r25, 0x30	; 48
     c14:	95 bb       	out	0x15, r25	; 21
     c16:	8b ed       	ldi	r24, 0xDB	; 219
     c18:	95 e0       	ldi	r25, 0x05	; 5
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	f1 f7       	brne	.-4      	; 0xc1a <stprTrayPsh_aclk+0x14>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <stprTrayPsh_aclk+0x1a>
     c20:	00 00       	nop
     c22:	95 b3       	in	r25, 0x15	; 21
     c24:	9f 70       	andi	r25, 0x0F	; 15
     c26:	90 66       	ori	r25, 0x60	; 96
     c28:	95 bb       	out	0x15, r25	; 21
     c2a:	8b ed       	ldi	r24, 0xDB	; 219
     c2c:	95 e0       	ldi	r25, 0x05	; 5
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <stprTrayPsh_aclk+0x28>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <stprTrayPsh_aclk+0x2e>
     c34:	00 00       	nop
     c36:	95 b3       	in	r25, 0x15	; 21
     c38:	9f 70       	andi	r25, 0x0F	; 15
     c3a:	90 6c       	ori	r25, 0xC0	; 192
     c3c:	95 bb       	out	0x15, r25	; 21
     c3e:	8b ed       	ldi	r24, 0xDB	; 219
     c40:	95 e0       	ldi	r25, 0x05	; 5
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <stprTrayPsh_aclk+0x3c>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <stprTrayPsh_aclk+0x42>
     c48:	00 00       	nop
     c4a:	95 b3       	in	r25, 0x15	; 21
     c4c:	9f 70       	andi	r25, 0x0F	; 15
     c4e:	90 69       	ori	r25, 0x90	; 144
     c50:	95 bb       	out	0x15, r25	; 21
     c52:	8b ed       	ldi	r24, 0xDB	; 219
     c54:	95 e0       	ldi	r25, 0x05	; 5
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <stprTrayPsh_aclk+0x50>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <stprTrayPsh_aclk+0x56>
     c5c:	00 00       	nop
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
     c62:	24 17       	cp	r18, r20
     c64:	35 07       	cpc	r19, r21
     c66:	9c f2       	brlt	.-90     	; 0xc0e <stprTrayPsh_aclk+0x8>
     c68:	85 b3       	in	r24, 0x15	; 21
     c6a:	8f 70       	andi	r24, 0x0F	; 15
     c6c:	80 69       	ori	r24, 0x90	; 144
     c6e:	85 bb       	out	0x15, r24	; 21
     c70:	8b ed       	ldi	r24, 0xDB	; 219
     c72:	95 e0       	ldi	r25, 0x05	; 5
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <stprTrayPsh_aclk+0x6e>
     c78:	00 c0       	rjmp	.+0      	; 0xc7a <stprTrayPsh_aclk+0x74>
     c7a:	00 00       	nop
     c7c:	08 95       	ret

00000c7e <stprMix_clk>:
     c7e:	ac 01       	movw	r20, r24
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	2a c0       	rjmp	.+84     	; 0xcda <stprMix_clk+0x5c>
     c86:	92 b3       	in	r25, 0x12	; 18
     c88:	9f 70       	andi	r25, 0x0F	; 15
     c8a:	90 69       	ori	r25, 0x90	; 144
     c8c:	92 bb       	out	0x12, r25	; 18
     c8e:	8b ed       	ldi	r24, 0xDB	; 219
     c90:	95 e0       	ldi	r25, 0x05	; 5
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <stprMix_clk+0x14>
     c96:	00 c0       	rjmp	.+0      	; 0xc98 <stprMix_clk+0x1a>
     c98:	00 00       	nop
     c9a:	92 b3       	in	r25, 0x12	; 18
     c9c:	9f 70       	andi	r25, 0x0F	; 15
     c9e:	90 6c       	ori	r25, 0xC0	; 192
     ca0:	92 bb       	out	0x12, r25	; 18
     ca2:	8b ed       	ldi	r24, 0xDB	; 219
     ca4:	95 e0       	ldi	r25, 0x05	; 5
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <stprMix_clk+0x28>
     caa:	00 c0       	rjmp	.+0      	; 0xcac <stprMix_clk+0x2e>
     cac:	00 00       	nop
     cae:	92 b3       	in	r25, 0x12	; 18
     cb0:	9f 70       	andi	r25, 0x0F	; 15
     cb2:	90 66       	ori	r25, 0x60	; 96
     cb4:	92 bb       	out	0x12, r25	; 18
     cb6:	8b ed       	ldi	r24, 0xDB	; 219
     cb8:	95 e0       	ldi	r25, 0x05	; 5
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <stprMix_clk+0x3c>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <stprMix_clk+0x42>
     cc0:	00 00       	nop
     cc2:	92 b3       	in	r25, 0x12	; 18
     cc4:	9f 70       	andi	r25, 0x0F	; 15
     cc6:	90 63       	ori	r25, 0x30	; 48
     cc8:	92 bb       	out	0x12, r25	; 18
     cca:	8b ed       	ldi	r24, 0xDB	; 219
     ccc:	95 e0       	ldi	r25, 0x05	; 5
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <stprMix_clk+0x50>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <stprMix_clk+0x56>
     cd4:	00 00       	nop
     cd6:	2f 5f       	subi	r18, 0xFF	; 255
     cd8:	3f 4f       	sbci	r19, 0xFF	; 255
     cda:	24 17       	cp	r18, r20
     cdc:	35 07       	cpc	r19, r21
     cde:	9c f2       	brlt	.-90     	; 0xc86 <stprMix_clk+0x8>
     ce0:	82 b3       	in	r24, 0x12	; 18
     ce2:	8f 70       	andi	r24, 0x0F	; 15
     ce4:	80 69       	ori	r24, 0x90	; 144
     ce6:	82 bb       	out	0x12, r24	; 18
     ce8:	8b ed       	ldi	r24, 0xDB	; 219
     cea:	95 e0       	ldi	r25, 0x05	; 5
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <stprMix_clk+0x6e>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <stprMix_clk+0x74>
     cf2:	00 00       	nop
     cf4:	08 95       	ret

00000cf6 <stprMix_aclk>:
     cf6:	ac 01       	movw	r20, r24
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	2a c0       	rjmp	.+84     	; 0xd52 <stprMix_aclk+0x5c>
     cfe:	92 b3       	in	r25, 0x12	; 18
     d00:	9f 70       	andi	r25, 0x0F	; 15
     d02:	90 63       	ori	r25, 0x30	; 48
     d04:	92 bb       	out	0x12, r25	; 18
     d06:	8b ed       	ldi	r24, 0xDB	; 219
     d08:	95 e0       	ldi	r25, 0x05	; 5
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <stprMix_aclk+0x14>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <stprMix_aclk+0x1a>
     d10:	00 00       	nop
     d12:	92 b3       	in	r25, 0x12	; 18
     d14:	9f 70       	andi	r25, 0x0F	; 15
     d16:	90 66       	ori	r25, 0x60	; 96
     d18:	92 bb       	out	0x12, r25	; 18
     d1a:	8b ed       	ldi	r24, 0xDB	; 219
     d1c:	95 e0       	ldi	r25, 0x05	; 5
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <stprMix_aclk+0x28>
     d22:	00 c0       	rjmp	.+0      	; 0xd24 <stprMix_aclk+0x2e>
     d24:	00 00       	nop
     d26:	92 b3       	in	r25, 0x12	; 18
     d28:	9f 70       	andi	r25, 0x0F	; 15
     d2a:	90 6c       	ori	r25, 0xC0	; 192
     d2c:	92 bb       	out	0x12, r25	; 18
     d2e:	8b ed       	ldi	r24, 0xDB	; 219
     d30:	95 e0       	ldi	r25, 0x05	; 5
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <stprMix_aclk+0x3c>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <stprMix_aclk+0x42>
     d38:	00 00       	nop
     d3a:	92 b3       	in	r25, 0x12	; 18
     d3c:	9f 70       	andi	r25, 0x0F	; 15
     d3e:	90 69       	ori	r25, 0x90	; 144
     d40:	92 bb       	out	0x12, r25	; 18
     d42:	8b ed       	ldi	r24, 0xDB	; 219
     d44:	95 e0       	ldi	r25, 0x05	; 5
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <stprMix_aclk+0x50>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <stprMix_aclk+0x56>
     d4c:	00 00       	nop
     d4e:	2f 5f       	subi	r18, 0xFF	; 255
     d50:	3f 4f       	sbci	r19, 0xFF	; 255
     d52:	24 17       	cp	r18, r20
     d54:	35 07       	cpc	r19, r21
     d56:	9c f2       	brlt	.-90     	; 0xcfe <stprMix_aclk+0x8>
     d58:	82 b3       	in	r24, 0x12	; 18
     d5a:	8f 70       	andi	r24, 0x0F	; 15
     d5c:	80 69       	ori	r24, 0x90	; 144
     d5e:	82 bb       	out	0x12, r24	; 18
     d60:	8b ed       	ldi	r24, 0xDB	; 219
     d62:	95 e0       	ldi	r25, 0x05	; 5
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <stprMix_aclk+0x6e>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <stprMix_aclk+0x74>
     d6a:	00 00       	nop
     d6c:	08 95       	ret

00000d6e <dc_init>:
     d6e:	81 b3       	in	r24, 0x11	; 17
     d70:	83 60       	ori	r24, 0x03	; 3
     d72:	81 bb       	out	0x11, r24	; 17
     d74:	82 b3       	in	r24, 0x12	; 18
     d76:	82 bb       	out	0x12, r24	; 18
     d78:	82 b3       	in	r24, 0x12	; 18
     d7a:	82 bb       	out	0x12, r24	; 18
     d7c:	08 95       	ret

00000d7e <dc_stp>:
     d7e:	82 b3       	in	r24, 0x12	; 18
     d80:	8c 7f       	andi	r24, 0xFC	; 252
     d82:	82 bb       	out	0x12, r24	; 18
     d84:	08 95       	ret

00000d86 <dc_aclk>:
     d86:	22 b3       	in	r18, 0x12	; 18
     d88:	21 60       	ori	r18, 0x01	; 1
     d8a:	22 bb       	out	0x12, r18	; 18
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <dc_aclk+0x16>
     d8e:	89 ef       	ldi	r24, 0xF9	; 249
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	f1 f7       	brne	.-4      	; 0xd92 <dc_aclk+0xc>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <dc_aclk+0x12>
     d98:	00 00       	nop
     d9a:	c9 01       	movw	r24, r18
     d9c:	9c 01       	movw	r18, r24
     d9e:	21 50       	subi	r18, 0x01	; 1
     da0:	31 09       	sbc	r19, r1
     da2:	89 2b       	or	r24, r25
     da4:	a1 f7       	brne	.-24     	; 0xd8e <dc_aclk+0x8>
     da6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <dc_stp>
     daa:	08 95       	ret

00000dac <dc_clk>:
     dac:	22 b3       	in	r18, 0x12	; 18
     dae:	22 60       	ori	r18, 0x02	; 2
     db0:	22 bb       	out	0x12, r18	; 18
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <dc_clk+0x16>
     db4:	89 ef       	ldi	r24, 0xF9	; 249
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <dc_clk+0xc>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <dc_clk+0x12>
     dbe:	00 00       	nop
     dc0:	c9 01       	movw	r24, r18
     dc2:	9c 01       	movw	r18, r24
     dc4:	21 50       	subi	r18, 0x01	; 1
     dc6:	31 09       	sbc	r19, r1
     dc8:	89 2b       	or	r24, r25
     dca:	a1 f7       	brne	.-24     	; 0xdb4 <dc_clk+0x8>
     dcc:	0e 94 bf 06 	call	0xd7e	; 0xd7e <dc_stp>
     dd0:	08 95       	ret

00000dd2 <acvt_mixer>:
     dd2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <dc_init>
     dd6:	84 ec       	ldi	r24, 0xC4	; 196
     dd8:	99 e0       	ldi	r25, 0x09	; 9
     dda:	0e 94 d6 06 	call	0xdac	; 0xdac <dc_clk>
     dde:	84 ec       	ldi	r24, 0xC4	; 196
     de0:	99 e0       	ldi	r25, 0x09	; 9
     de2:	0e 94 c3 06 	call	0xd86	; 0xd86 <dc_aclk>
     de6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <dc_stp>
     dea:	08 95       	ret

00000dec <switchon>:
     dec:	84 b3       	in	r24, 0x14	; 20
     dee:	88 60       	ori	r24, 0x08	; 8
     df0:	84 bb       	out	0x14, r24	; 20
     df2:	85 b3       	in	r24, 0x15	; 21
     df4:	87 7f       	andi	r24, 0xF7	; 247
     df6:	85 bb       	out	0x15, r24	; 21
     df8:	85 b3       	in	r24, 0x15	; 21
     dfa:	88 60       	ori	r24, 0x08	; 8
     dfc:	85 bb       	out	0x15, r24	; 21
     dfe:	08 95       	ret

00000e00 <switchoff>:
     e00:	84 b3       	in	r24, 0x14	; 20
     e02:	88 60       	ori	r24, 0x08	; 8
     e04:	84 bb       	out	0x14, r24	; 20
     e06:	85 b3       	in	r24, 0x15	; 21
     e08:	87 7f       	andi	r24, 0xF7	; 247
     e0a:	85 bb       	out	0x15, r24	; 21
     e0c:	85 b3       	in	r24, 0x15	; 21
     e0e:	87 7f       	andi	r24, 0xF7	; 247
     e10:	85 bb       	out	0x15, r24	; 21
     e12:	08 95       	ret

00000e14 <ir_init>:
     e14:	80 ef       	ldi	r24, 0xF0	; 240
     e16:	84 bb       	out	0x14, r24	; 20
     e18:	8f e0       	ldi	r24, 0x0F	; 15
     e1a:	85 bb       	out	0x15, r24	; 21
     e1c:	08 95       	ret

00000e1e <act_IR>:
     e1e:	0e 94 0a 07 	call	0xe14	; 0xe14 <ir_init>
     e22:	9a 9b       	sbis	0x13, 2	; 19
     e24:	fe cf       	rjmp	.-4      	; 0xe22 <act_IR+0x4>
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	08 95       	ret

00000e2c <i2c_init>:
     e2c:	82 e6       	ldi	r24, 0x62	; 98
     e2e:	80 b9       	out	0x00, r24	; 0
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	86 bf       	out	0x36, r24	; 54
     e34:	11 b8       	out	0x01, r1	; 1
     e36:	08 95       	ret

00000e38 <i2c_start>:
     e38:	84 ea       	ldi	r24, 0xA4	; 164
     e3a:	86 bf       	out	0x36, r24	; 54
     e3c:	06 b6       	in	r0, 0x36	; 54
     e3e:	07 fe       	sbrs	r0, 7
     e40:	fd cf       	rjmp	.-6      	; 0xe3c <i2c_start+0x4>
     e42:	08 95       	ret

00000e44 <i2c_write>:
     e44:	83 b9       	out	0x03, r24	; 3
     e46:	84 e8       	ldi	r24, 0x84	; 132
     e48:	86 bf       	out	0x36, r24	; 54
     e4a:	06 b6       	in	r0, 0x36	; 54
     e4c:	07 fe       	sbrs	r0, 7
     e4e:	fd cf       	rjmp	.-6      	; 0xe4a <i2c_write+0x6>
     e50:	08 95       	ret

00000e52 <delay>:
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	0a c0       	rjmp	.+20     	; 0xe6c <delay+0x1a>
     e58:	2f 5f       	subi	r18, 0xFF	; 255
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <delay+0x10>
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	29 37       	cpi	r18, 0x79	; 121
     e64:	31 05       	cpc	r19, r1
     e66:	c4 f3       	brlt	.-16     	; 0xe58 <delay+0x6>
     e68:	4f 5f       	subi	r20, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	84 17       	cp	r24, r20
     e6e:	95 07       	cpc	r25, r21
     e70:	b4 f7       	brge	.-20     	; 0xe5e <delay+0xc>
     e72:	08 95       	ret

00000e74 <toggle>:
     e74:	83 b1       	in	r24, 0x03	; 3
     e76:	82 60       	ori	r24, 0x02	; 2
     e78:	83 b9       	out	0x03, r24	; 3
     e7a:	84 e8       	ldi	r24, 0x84	; 132
     e7c:	86 bf       	out	0x36, r24	; 54
     e7e:	06 b6       	in	r0, 0x36	; 54
     e80:	07 fe       	sbrs	r0, 7
     e82:	fd cf       	rjmp	.-6      	; 0xe7e <toggle+0xa>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 29 07 	call	0xe52	; 0xe52 <delay>
     e8c:	83 b1       	in	r24, 0x03	; 3
     e8e:	8d 7f       	andi	r24, 0xFD	; 253
     e90:	83 b9       	out	0x03, r24	; 3
     e92:	84 e8       	ldi	r24, 0x84	; 132
     e94:	86 bf       	out	0x36, r24	; 54
     e96:	06 b6       	in	r0, 0x36	; 54
     e98:	07 fe       	sbrs	r0, 7
     e9a:	fd cf       	rjmp	.-6      	; 0xe96 <toggle+0x22>
     e9c:	08 95       	ret

00000e9e <lcd_cmd_hf>:
     e9e:	93 b1       	in	r25, 0x03	; 3
     ea0:	9e 7f       	andi	r25, 0xFE	; 254
     ea2:	93 b9       	out	0x03, r25	; 3
     ea4:	94 e8       	ldi	r25, 0x84	; 132
     ea6:	96 bf       	out	0x36, r25	; 54
     ea8:	06 b6       	in	r0, 0x36	; 54
     eaa:	07 fe       	sbrs	r0, 7
     eac:	fd cf       	rjmp	.-6      	; 0xea8 <lcd_cmd_hf+0xa>
     eae:	93 b1       	in	r25, 0x03	; 3
     eb0:	9f 70       	andi	r25, 0x0F	; 15
     eb2:	93 b9       	out	0x03, r25	; 3
     eb4:	94 e8       	ldi	r25, 0x84	; 132
     eb6:	96 bf       	out	0x36, r25	; 54
     eb8:	06 b6       	in	r0, 0x36	; 54
     eba:	07 fe       	sbrs	r0, 7
     ebc:	fd cf       	rjmp	.-6      	; 0xeb8 <lcd_cmd_hf+0x1a>
     ebe:	93 b1       	in	r25, 0x03	; 3
     ec0:	80 7f       	andi	r24, 0xF0	; 240
     ec2:	89 2b       	or	r24, r25
     ec4:	83 b9       	out	0x03, r24	; 3
     ec6:	84 e8       	ldi	r24, 0x84	; 132
     ec8:	86 bf       	out	0x36, r24	; 54
     eca:	06 b6       	in	r0, 0x36	; 54
     ecc:	07 fe       	sbrs	r0, 7
     ece:	fd cf       	rjmp	.-6      	; 0xeca <lcd_cmd_hf+0x2c>
     ed0:	0e 94 3a 07 	call	0xe74	; 0xe74 <toggle>
     ed4:	08 95       	ret

00000ed6 <lcd_cmd>:
     ed6:	cf 93       	push	r28
     ed8:	c8 2f       	mov	r28, r24
     eda:	83 b1       	in	r24, 0x03	; 3
     edc:	8e 7f       	andi	r24, 0xFE	; 254
     ede:	83 b9       	out	0x03, r24	; 3
     ee0:	84 e8       	ldi	r24, 0x84	; 132
     ee2:	86 bf       	out	0x36, r24	; 54
     ee4:	06 b6       	in	r0, 0x36	; 54
     ee6:	07 fe       	sbrs	r0, 7
     ee8:	fd cf       	rjmp	.-6      	; 0xee4 <lcd_cmd+0xe>
     eea:	83 b1       	in	r24, 0x03	; 3
     eec:	8f 70       	andi	r24, 0x0F	; 15
     eee:	83 b9       	out	0x03, r24	; 3
     ef0:	84 e8       	ldi	r24, 0x84	; 132
     ef2:	86 bf       	out	0x36, r24	; 54
     ef4:	06 b6       	in	r0, 0x36	; 54
     ef6:	07 fe       	sbrs	r0, 7
     ef8:	fd cf       	rjmp	.-6      	; 0xef4 <lcd_cmd+0x1e>
     efa:	83 b1       	in	r24, 0x03	; 3
     efc:	9c 2f       	mov	r25, r28
     efe:	90 7f       	andi	r25, 0xF0	; 240
     f00:	89 2b       	or	r24, r25
     f02:	83 b9       	out	0x03, r24	; 3
     f04:	84 e8       	ldi	r24, 0x84	; 132
     f06:	86 bf       	out	0x36, r24	; 54
     f08:	06 b6       	in	r0, 0x36	; 54
     f0a:	07 fe       	sbrs	r0, 7
     f0c:	fd cf       	rjmp	.-6      	; 0xf08 <lcd_cmd+0x32>
     f0e:	0e 94 3a 07 	call	0xe74	; 0xe74 <toggle>
     f12:	83 b1       	in	r24, 0x03	; 3
     f14:	8f 70       	andi	r24, 0x0F	; 15
     f16:	83 b9       	out	0x03, r24	; 3
     f18:	84 e8       	ldi	r24, 0x84	; 132
     f1a:	86 bf       	out	0x36, r24	; 54
     f1c:	06 b6       	in	r0, 0x36	; 54
     f1e:	07 fe       	sbrs	r0, 7
     f20:	fd cf       	rjmp	.-6      	; 0xf1c <lcd_cmd+0x46>
     f22:	23 b1       	in	r18, 0x03	; 3
     f24:	30 e1       	ldi	r19, 0x10	; 16
     f26:	c3 9f       	mul	r28, r19
     f28:	c0 01       	movw	r24, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	82 2b       	or	r24, r18
     f2e:	83 b9       	out	0x03, r24	; 3
     f30:	84 e8       	ldi	r24, 0x84	; 132
     f32:	86 bf       	out	0x36, r24	; 54
     f34:	06 b6       	in	r0, 0x36	; 54
     f36:	07 fe       	sbrs	r0, 7
     f38:	fd cf       	rjmp	.-6      	; 0xf34 <lcd_cmd+0x5e>
     f3a:	0e 94 3a 07 	call	0xe74	; 0xe74 <toggle>
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <lcd_init>:
     f42:	80 e3       	ldi	r24, 0x30	; 48
     f44:	0e 94 4f 07 	call	0xe9e	; 0xe9e <lcd_cmd_hf>
     f48:	80 e3       	ldi	r24, 0x30	; 48
     f4a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <lcd_cmd_hf>
     f4e:	80 e2       	ldi	r24, 0x20	; 32
     f50:	0e 94 4f 07 	call	0xe9e	; 0xe9e <lcd_cmd_hf>
     f54:	88 e2       	ldi	r24, 0x28	; 40
     f56:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
     f5a:	8c e0       	ldi	r24, 0x0C	; 12
     f5c:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
     f66:	86 e0       	ldi	r24, 0x06	; 6
     f68:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
     f6c:	80 e8       	ldi	r24, 0x80	; 128
     f6e:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
     f72:	08 95       	ret

00000f74 <lcd_dwr>:
     f74:	cf 93       	push	r28
     f76:	c8 2f       	mov	r28, r24
     f78:	83 b1       	in	r24, 0x03	; 3
     f7a:	81 60       	ori	r24, 0x01	; 1
     f7c:	83 b9       	out	0x03, r24	; 3
     f7e:	84 e8       	ldi	r24, 0x84	; 132
     f80:	86 bf       	out	0x36, r24	; 54
     f82:	06 b6       	in	r0, 0x36	; 54
     f84:	07 fe       	sbrs	r0, 7
     f86:	fd cf       	rjmp	.-6      	; 0xf82 <lcd_dwr+0xe>
     f88:	83 b1       	in	r24, 0x03	; 3
     f8a:	8f 70       	andi	r24, 0x0F	; 15
     f8c:	83 b9       	out	0x03, r24	; 3
     f8e:	84 e8       	ldi	r24, 0x84	; 132
     f90:	86 bf       	out	0x36, r24	; 54
     f92:	06 b6       	in	r0, 0x36	; 54
     f94:	07 fe       	sbrs	r0, 7
     f96:	fd cf       	rjmp	.-6      	; 0xf92 <lcd_dwr+0x1e>
     f98:	83 b1       	in	r24, 0x03	; 3
     f9a:	9c 2f       	mov	r25, r28
     f9c:	90 7f       	andi	r25, 0xF0	; 240
     f9e:	89 2b       	or	r24, r25
     fa0:	83 b9       	out	0x03, r24	; 3
     fa2:	84 e8       	ldi	r24, 0x84	; 132
     fa4:	86 bf       	out	0x36, r24	; 54
     fa6:	06 b6       	in	r0, 0x36	; 54
     fa8:	07 fe       	sbrs	r0, 7
     faa:	fd cf       	rjmp	.-6      	; 0xfa6 <lcd_dwr+0x32>
     fac:	0e 94 3a 07 	call	0xe74	; 0xe74 <toggle>
     fb0:	83 b1       	in	r24, 0x03	; 3
     fb2:	8f 70       	andi	r24, 0x0F	; 15
     fb4:	83 b9       	out	0x03, r24	; 3
     fb6:	84 e8       	ldi	r24, 0x84	; 132
     fb8:	86 bf       	out	0x36, r24	; 54
     fba:	06 b6       	in	r0, 0x36	; 54
     fbc:	07 fe       	sbrs	r0, 7
     fbe:	fd cf       	rjmp	.-6      	; 0xfba <lcd_dwr+0x46>
     fc0:	23 b1       	in	r18, 0x03	; 3
     fc2:	30 e1       	ldi	r19, 0x10	; 16
     fc4:	c3 9f       	mul	r28, r19
     fc6:	c0 01       	movw	r24, r0
     fc8:	11 24       	eor	r1, r1
     fca:	82 2b       	or	r24, r18
     fcc:	83 b9       	out	0x03, r24	; 3
     fce:	84 e8       	ldi	r24, 0x84	; 132
     fd0:	86 bf       	out	0x36, r24	; 54
     fd2:	06 b6       	in	r0, 0x36	; 54
     fd4:	07 fe       	sbrs	r0, 7
     fd6:	fd cf       	rjmp	.-6      	; 0xfd2 <lcd_dwr+0x5e>
     fd8:	0e 94 3a 07 	call	0xe74	; 0xe74 <toggle>
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <lcd_msg>:
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	ec 01       	movw	r28, r24
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <lcd_msg+0xe>
     fe8:	21 96       	adiw	r28, 0x01	; 1
     fea:	0e 94 ba 07 	call	0xf74	; 0xf74 <lcd_dwr>
     fee:	88 81       	ld	r24, Y
     ff0:	81 11       	cpse	r24, r1
     ff2:	fa cf       	rjmp	.-12     	; 0xfe8 <lcd_msg+0x8>
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <wlcm_msg>:
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	0e 94 16 07 	call	0xe2c	; 0xe2c <i2c_init>
    1002:	0e 94 1c 07 	call	0xe38	; 0xe38 <i2c_start>
    1006:	80 e7       	ldi	r24, 0x70	; 112
    1008:	0e 94 22 07 	call	0xe44	; 0xe44 <i2c_write>
    100c:	0e 94 a1 07 	call	0xf42	; 0xf42 <lcd_init>
    1010:	80 e8       	ldi	r24, 0x80	; 128
    1012:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1016:	86 ea       	ldi	r24, 0xA6	; 166
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    101e:	80 ec       	ldi	r24, 0xC0	; 192
    1020:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1024:	84 e1       	ldi	r24, 0x14	; 20
    1026:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    102a:	84 e1       	ldi	r24, 0x14	; 20
    102c:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1030:	84 e1       	ldi	r24, 0x14	; 20
    1032:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1036:	84 e1       	ldi	r24, 0x14	; 20
    1038:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    103c:	80 ec       	ldi	r24, 0xC0	; 192
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    1044:	2f e9       	ldi	r18, 0x9F	; 159
    1046:	86 e8       	ldi	r24, 0x86	; 134
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	21 50       	subi	r18, 0x01	; 1
    104c:	80 40       	sbci	r24, 0x00	; 0
    104e:	90 40       	sbci	r25, 0x00	; 0
    1050:	e1 f7       	brne	.-8      	; 0x104a <wlcm_msg+0x50>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <wlcm_msg+0x5a>
    1054:	00 00       	nop
    1056:	c0 e0       	ldi	r28, 0x00	; 0
    1058:	d0 e0       	ldi	r29, 0x00	; 0
    105a:	0a c0       	rjmp	.+20     	; 0x1070 <wlcm_msg+0x76>
    105c:	88 e1       	ldi	r24, 0x18	; 24
    105e:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1062:	87 ea       	ldi	r24, 0xA7	; 167
    1064:	91 e6       	ldi	r25, 0x61	; 97
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <wlcm_msg+0x6c>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <wlcm_msg+0x72>
    106c:	00 00       	nop
    106e:	21 96       	adiw	r28, 0x01	; 1
    1070:	cb 31       	cpi	r28, 0x1B	; 27
    1072:	d1 05       	cpc	r29, r1
    1074:	9c f3       	brlt	.-26     	; 0x105c <wlcm_msg+0x62>
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <num_tray>:
    107c:	ef 92       	push	r14
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	64 97       	sbiw	r28, 0x14	; 20
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	de bf       	out	0x3e, r29	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	cd bf       	out	0x3d, r28	; 61
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    109e:	80 e8       	ldi	r24, 0x80	; 128
    10a0:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    10a4:	88 ec       	ldi	r24, 0xC8	; 200
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    10ac:	80 ec       	ldi	r24, 0xC0	; 192
    10ae:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    10b2:	8f e0       	ldi	r24, 0x0F	; 15
    10b4:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    10b8:	00 e0       	ldi	r16, 0x00	; 0
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	0e 94 23 05 	call	0xa46	; 0xa46 <keyfind>
    10c0:	bc 01       	movw	r22, r24
    10c2:	ce 01       	movw	r24, r28
    10c4:	01 96       	adiw	r24, 0x01	; 1
    10c6:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcpy>
    10ca:	62 ea       	ldi	r22, 0xA2	; 162
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <strcmp>
    10d6:	89 2b       	or	r24, r25
    10d8:	01 f5       	brne	.+64     	; 0x111a <num_tray+0x9e>
    10da:	10 16       	cp	r1, r16
    10dc:	11 06       	cpc	r1, r17
    10de:	74 f5       	brge	.+92     	; 0x113c <num_tray+0xc0>
    10e0:	80 e1       	ldi	r24, 0x10	; 16
    10e2:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    10e6:	80 ea       	ldi	r24, 0xA0	; 160
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    10ee:	80 e1       	ldi	r24, 0x10	; 16
    10f0:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    10f4:	80 e1       	ldi	r24, 0x10	; 16
    10f6:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    10fa:	84 e1       	ldi	r24, 0x14	; 20
    10fc:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1100:	01 50       	subi	r16, 0x01	; 1
    1102:	11 09       	sbc	r17, r1
    1104:	eb e0       	ldi	r30, 0x0B	; 11
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	ec 0f       	add	r30, r28
    110a:	fd 1f       	adc	r31, r29
    110c:	e0 0f       	add	r30, r16
    110e:	f1 1f       	adc	r31, r17
    1110:	80 e2       	ldi	r24, 0x20	; 32
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	91 83       	std	Z+1, r25	; 0x01
    1116:	80 83       	st	Z, r24
    1118:	11 c0       	rjmp	.+34     	; 0x113c <num_tray+0xc0>
    111a:	ce 01       	movw	r24, r28
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    1122:	be 01       	movw	r22, r28
    1124:	6f 5f       	subi	r22, 0xFF	; 255
    1126:	7f 4f       	sbci	r23, 0xFF	; 255
    1128:	8b e0       	ldi	r24, 0x0B	; 11
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	8c 0f       	add	r24, r28
    112e:	9d 1f       	adc	r25, r29
    1130:	80 0f       	add	r24, r16
    1132:	91 1f       	adc	r25, r17
    1134:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcpy>
    1138:	0f 5f       	subi	r16, 0xFF	; 255
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	60 ea       	ldi	r22, 0xA0	; 160
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	ce 01       	movw	r24, r28
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <strcmp>
    1148:	7c 01       	movw	r14, r24
    114a:	ce 01       	movw	r24, r28
    114c:	0b 96       	adiw	r24, 0x0b	; 11
    114e:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <atoi>
    1152:	ac 01       	movw	r20, r24
    1154:	21 e0       	ldi	r18, 0x01	; 1
    1156:	ef 28       	or	r14, r15
    1158:	09 f4       	brne	.+2      	; 0x115c <num_tray+0xe0>
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	41 15       	cp	r20, r1
    1160:	51 05       	cpc	r21, r1
    1162:	09 f0       	breq	.+2      	; 0x1166 <num_tray+0xea>
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	92 2b       	or	r25, r18
    1168:	09 f0       	breq	.+2      	; 0x116c <num_tray+0xf0>
    116a:	a8 cf       	rjmp	.-176    	; 0x10bc <num_tray+0x40>
    116c:	50 93 dd 01 	sts	0x01DD, r21	; 0x8001dd <num_trays+0x1>
    1170:	40 93 dc 01 	sts	0x01DC, r20	; 0x8001dc <num_trays>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    117a:	80 e8       	ldi	r24, 0x80	; 128
    117c:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1180:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <num_trays>
    1184:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <num_trays+0x1>
    1188:	84 31       	cpi	r24, 0x14	; 20
    118a:	91 05       	cpc	r25, r1
    118c:	fc f0       	brlt	.+62     	; 0x11cc <num_tray+0x150>
    118e:	89 ed       	ldi	r24, 0xD9	; 217
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    1196:	2f e9       	ldi	r18, 0x9F	; 159
    1198:	86 e8       	ldi	r24, 0x86	; 134
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	21 50       	subi	r18, 0x01	; 1
    119e:	80 40       	sbci	r24, 0x00	; 0
    11a0:	90 40       	sbci	r25, 0x00	; 0
    11a2:	e1 f7       	brne	.-8      	; 0x119c <num_tray+0x120>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <num_tray+0x12a>
    11a6:	00 00       	nop
    11a8:	00 e0       	ldi	r16, 0x00	; 0
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	0b c0       	rjmp	.+22     	; 0x11c4 <num_tray+0x148>
    11ae:	88 e1       	ldi	r24, 0x18	; 24
    11b0:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    11b4:	87 ea       	ldi	r24, 0xA7	; 167
    11b6:	91 e6       	ldi	r25, 0x61	; 97
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <num_tray+0x13c>
    11bc:	00 c0       	rjmp	.+0      	; 0x11be <num_tray+0x142>
    11be:	00 00       	nop
    11c0:	0f 5f       	subi	r16, 0xFF	; 255
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	0b 31       	cpi	r16, 0x1B	; 27
    11c6:	11 05       	cpc	r17, r1
    11c8:	94 f3       	brlt	.-28     	; 0x11ae <num_tray+0x132>
    11ca:	66 cf       	rjmp	.-308    	; 0x1098 <num_tray+0x1c>
    11cc:	64 96       	adiw	r28, 0x14	; 20
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	08 95       	ret

000011e6 <tray_vol>:
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	64 97       	sbiw	r28, 0x14	; 20
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	f8 94       	cli
    1200:	de bf       	out	0x3e, r29	; 62
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	84 ef       	ldi	r24, 0xF4	; 244
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    120e:	80 ec       	ldi	r24, 0xC0	; 192
    1210:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1214:	8f e0       	ldi	r24, 0x0F	; 15
    1216:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    121a:	00 e0       	ldi	r16, 0x00	; 0
    121c:	10 e0       	ldi	r17, 0x00	; 0
    121e:	0e 94 23 05 	call	0xa46	; 0xa46 <keyfind>
    1222:	bc 01       	movw	r22, r24
    1224:	ce 01       	movw	r24, r28
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcpy>
    122c:	62 ea       	ldi	r22, 0xA2	; 162
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	ce 01       	movw	r24, r28
    1232:	01 96       	adiw	r24, 0x01	; 1
    1234:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <strcmp>
    1238:	89 2b       	or	r24, r25
    123a:	01 f5       	brne	.+64     	; 0x127c <tray_vol+0x96>
    123c:	10 16       	cp	r1, r16
    123e:	11 06       	cpc	r1, r17
    1240:	74 f5       	brge	.+92     	; 0x129e <tray_vol+0xb8>
    1242:	80 e1       	ldi	r24, 0x10	; 16
    1244:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1248:	80 ea       	ldi	r24, 0xA0	; 160
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    1250:	80 e1       	ldi	r24, 0x10	; 16
    1252:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1256:	80 e1       	ldi	r24, 0x10	; 16
    1258:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    125c:	84 e1       	ldi	r24, 0x14	; 20
    125e:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1262:	01 50       	subi	r16, 0x01	; 1
    1264:	11 09       	sbc	r17, r1
    1266:	eb e0       	ldi	r30, 0x0B	; 11
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	ec 0f       	add	r30, r28
    126c:	fd 1f       	adc	r31, r29
    126e:	e0 0f       	add	r30, r16
    1270:	f1 1f       	adc	r31, r17
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	80 83       	st	Z, r24
    127a:	11 c0       	rjmp	.+34     	; 0x129e <tray_vol+0xb8>
    127c:	ce 01       	movw	r24, r28
    127e:	01 96       	adiw	r24, 0x01	; 1
    1280:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    1284:	be 01       	movw	r22, r28
    1286:	6f 5f       	subi	r22, 0xFF	; 255
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	8b e0       	ldi	r24, 0x0B	; 11
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	8c 0f       	add	r24, r28
    1290:	9d 1f       	adc	r25, r29
    1292:	80 0f       	add	r24, r16
    1294:	91 1f       	adc	r25, r17
    1296:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <strcpy>
    129a:	0f 5f       	subi	r16, 0xFF	; 255
    129c:	1f 4f       	sbci	r17, 0xFF	; 255
    129e:	60 ea       	ldi	r22, 0xA0	; 160
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	ce 01       	movw	r24, r28
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <strcmp>
    12aa:	7c 01       	movw	r14, r24
    12ac:	ce 01       	movw	r24, r28
    12ae:	0b 96       	adiw	r24, 0x0b	; 11
    12b0:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <atoi>
    12b4:	bc 01       	movw	r22, r24
    12b6:	21 e0       	ldi	r18, 0x01	; 1
    12b8:	ef 28       	or	r14, r15
    12ba:	09 f4       	brne	.+2      	; 0x12be <tray_vol+0xd8>
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	61 15       	cp	r22, r1
    12c2:	71 05       	cpc	r23, r1
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <tray_vol+0xe2>
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	92 2b       	or	r25, r18
    12ca:	09 f0       	breq	.+2      	; 0x12ce <tray_vol+0xe8>
    12cc:	a8 cf       	rjmp	.-176    	; 0x121e <tray_vol+0x38>
    12ce:	07 2e       	mov	r0, r23
    12d0:	00 0c       	add	r0, r0
    12d2:	88 0b       	sbc	r24, r24
    12d4:	99 0b       	sbc	r25, r25
    12d6:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__floatsisf>
    12da:	60 93 d8 01 	sts	0x01D8, r22	; 0x8001d8 <vol>
    12de:	70 93 d9 01 	sts	0x01D9, r23	; 0x8001d9 <vol+0x1>
    12e2:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <vol+0x2>
    12e6:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <vol+0x3>
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    12f0:	80 e8       	ldi	r24, 0x80	; 128
    12f2:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    12f6:	c0 90 d8 01 	lds	r12, 0x01D8	; 0x8001d8 <vol>
    12fa:	d0 90 d9 01 	lds	r13, 0x01D9	; 0x8001d9 <vol+0x1>
    12fe:	e0 90 da 01 	lds	r14, 0x01DA	; 0x8001da <vol+0x2>
    1302:	f0 90 db 01 	lds	r15, 0x01DB	; 0x8001db <vol+0x3>
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e4       	ldi	r19, 0x40	; 64
    130a:	4c e9       	ldi	r20, 0x9C	; 156
    130c:	55 e4       	ldi	r21, 0x45	; 69
    130e:	c7 01       	movw	r24, r14
    1310:	b6 01       	movw	r22, r12
    1312:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <__gesf2>
    1316:	88 23       	and	r24, r24
    1318:	fc f0       	brlt	.+62     	; 0x1358 <tray_vol+0x172>
    131a:	86 e0       	ldi	r24, 0x06	; 6
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    1322:	2f e9       	ldi	r18, 0x9F	; 159
    1324:	86 e8       	ldi	r24, 0x86	; 134
    1326:	91 e0       	ldi	r25, 0x01	; 1
    1328:	21 50       	subi	r18, 0x01	; 1
    132a:	80 40       	sbci	r24, 0x00	; 0
    132c:	90 40       	sbci	r25, 0x00	; 0
    132e:	e1 f7       	brne	.-8      	; 0x1328 <tray_vol+0x142>
    1330:	00 c0       	rjmp	.+0      	; 0x1332 <tray_vol+0x14c>
    1332:	00 00       	nop
    1334:	00 e0       	ldi	r16, 0x00	; 0
    1336:	10 e0       	ldi	r17, 0x00	; 0
    1338:	0b c0       	rjmp	.+22     	; 0x1350 <tray_vol+0x16a>
    133a:	88 e1       	ldi	r24, 0x18	; 24
    133c:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
    1340:	87 ea       	ldi	r24, 0xA7	; 167
    1342:	91 e6       	ldi	r25, 0x61	; 97
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <tray_vol+0x15e>
    1348:	00 c0       	rjmp	.+0      	; 0x134a <tray_vol+0x164>
    134a:	00 00       	nop
    134c:	0f 5f       	subi	r16, 0xFF	; 255
    134e:	1f 4f       	sbci	r17, 0xFF	; 255
    1350:	0c 31       	cpi	r16, 0x1C	; 28
    1352:	11 05       	cpc	r17, r1
    1354:	94 f3       	brlt	.-28     	; 0x133a <tray_vol+0x154>
    1356:	57 cf       	rjmp	.-338    	; 0x1206 <tray_vol+0x20>
    1358:	c7 01       	movw	r24, r14
    135a:	b6 01       	movw	r22, r12
    135c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fixsfsi>
    1360:	cb 01       	movw	r24, r22
    1362:	64 96       	adiw	r28, 0x14	; 20
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	08 95       	ret

00001380 <main>:
float pH;
int adc_ph, var1;


int main(void)
{
    1380:	4f 92       	push	r4
    1382:	5f 92       	push	r5
    1384:	6f 92       	push	r6
    1386:	7f 92       	push	r7
    1388:	8f 92       	push	r8
    138a:	9f 92       	push	r9
    138c:	af 92       	push	r10
    138e:	bf 92       	push	r11
    1390:	cf 92       	push	r12
    1392:	df 92       	push	r13
    1394:	ef 92       	push	r14
    1396:	ff 92       	push	r15
    1398:	0f 93       	push	r16
    139a:	1f 93       	push	r17
    139c:	cf 93       	push	r28
    139e:	df 93       	push	r29
	//------------------------------display on-----------------------------------
	wlcm_msg(); //display the welcome message 
    13a0:	0e 94 fd 07 	call	0xffa	; 0xffa <wlcm_msg>
	int num_trays = num_tray(); // get the user input for the number of trays to be processed
    13a4:	0e 94 3e 08 	call	0x107c	; 0x107c <num_tray>
    13a8:	ec 01       	movw	r28, r24
	int vol = tray_vol(); //get the user input for the volume of a tray
    13aa:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <tray_vol>
    13ae:	8c 01       	movw	r16, r24
	initUS();
    13b0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <initUS>
	
	//Main Program Loop
	while(num_trays>0){
    13b4:	e9 c0       	rjmp	.+466    	; 0x1588 <main+0x208>
		//------------------------------ultrasonic-----------------------(In progress)

		while (ultrasonic1())	// Display a message if the liquid is empty
		{
			lcd_cmd(0x01);
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
			lcd_cmd(0x80);
    13bc:	80 e8       	ldi	r24, 0x80	; 128
    13be:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
			lcd_msg("water tank empty");
    13c2:	85 e5       	ldi	r24, 0x55	; 85
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
	
	//Main Program Loop
	while(num_trays>0){
		//------------------------------ultrasonic-----------------------(In progress)

		while (ultrasonic1())	// Display a message if the liquid is empty
    13ca:	0e 94 34 04 	call	0x868	; 0x868 <ultrasonic1>
    13ce:	81 11       	cpse	r24, r1
    13d0:	f2 cf       	rjmp	.-28     	; 0x13b6 <main+0x36>
    13d2:	0a c0       	rjmp	.+20     	; 0x13e8 <main+0x68>

		
		while (ultrasonic2())	// Display a message if the liquid is empty
		{
			
			lcd_cmd(0x01);
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
			lcd_cmd(0x80);
    13da:	80 e8       	ldi	r24, 0x80	; 128
    13dc:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
			lcd_msg("latex tank empty");
    13e0:	86 e6       	ldi	r24, 0x66	; 102
    13e2:	91 e0       	ldi	r25, 0x01	; 1
    13e4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
			lcd_cmd(0x80);
			lcd_msg("water tank empty");
		}

		
		while (ultrasonic2())	// Display a message if the liquid is empty
    13e8:	0e 94 6d 04 	call	0x8da	; 0x8da <ultrasonic2>
    13ec:	81 11       	cpse	r24, r1
    13ee:	f2 cf       	rjmp	.-28     	; 0x13d4 <main+0x54>
    13f0:	0a c0       	rjmp	.+20     	; 0x1406 <main+0x86>
		}
		

		while (ultrasonic3())	// Display a message if the liquid is empty
		{
			lcd_cmd(0x01);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
			lcd_cmd(0x80);
    13f8:	80 e8       	ldi	r24, 0x80	; 128
    13fa:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
			lcd_msg("acid tank empty");
    13fe:	87 e7       	ldi	r24, 0x77	; 119
    1400:	91 e0       	ldi	r25, 0x01	; 1
    1402:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
			lcd_cmd(0x80);
			lcd_msg("latex tank empty");
		}
		

		while (ultrasonic3())	// Display a message if the liquid is empty
    1406:	0e 94 9a 04 	call	0x934	; 0x934 <ultrasonic3>
    140a:	81 11       	cpse	r24, r1
    140c:	f2 cf       	rjmp	.-28     	; 0x13f2 <main+0x72>
			lcd_msg("acid tank empty");
		}
		
		//----------------------------------ph sensor--------------------------(in progress)
		
		adc_init();
    140e:	0e 94 76 00 	call	0xec	; 0xec <adc_init>
		
		adc_ph=adc_read(3);   //ph reading at PA3
    1412:	83 e0       	ldi	r24, 0x03	; 3
    1414:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_read>
    1418:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <adc_ph+0x1>
    141c:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <adc_ph>
		
		pH=14/1024.0*adc_ph;  //float pH=2*((adc_ph*5)/1024.0)+1.2;
    1420:	bc 01       	movw	r22, r24
    1422:	99 0f       	add	r25, r25
    1424:	88 0b       	sbc	r24, r24
    1426:	99 0b       	sbc	r25, r25
    1428:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__floatsisf>
    142c:	20 e0       	ldi	r18, 0x00	; 0
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	40 e6       	ldi	r20, 0x60	; 96
    1432:	5c e3       	ldi	r21, 0x3C	; 60
    1434:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
    1438:	4b 01       	movw	r8, r22
    143a:	5c 01       	movw	r10, r24
    143c:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <pH>
    1440:	70 93 e5 01 	sts	0x01E5, r23	; 0x8001e5 <pH+0x1>
    1444:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <pH+0x2>
    1448:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <pH+0x3>
		
		
		//calculate the volume of water,latex and acid needed
		float ph0 = 8.00; // standard pH level of the final mixer
		float l1; // The acid volume liquid which we  need to find
		float l2 = vol; // Volume of the Tray
    144c:	b8 01       	movw	r22, r16
    144e:	01 2e       	mov	r0, r17
    1450:	00 0c       	add	r0, r0
    1452:	88 0b       	sbc	r24, r24
    1454:	99 0b       	sbc	r25, r25
    1456:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__floatsisf>
    145a:	6b 01       	movw	r12, r22
    145c:	7c 01       	movw	r14, r24
		float c1 = 0.01; // concentration of acid
		
		float antiLogPh0 = pow(10, ph0);  // antilog of the pH0
		float logPh1 = log10(pH);        // log of the pH1
    145e:	c5 01       	movw	r24, r10
    1460:	b4 01       	movw	r22, r8
    1462:	0e 94 83 0c 	call	0x1906	; 0x1906 <log10>
    1466:	2b 01       	movw	r4, r22
    1468:	3c 01       	movw	r6, r24

		l1 = ((1000*l2 * antiLogPh0) + (l2*logPh1)) / c1;
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4a e7       	ldi	r20, 0x7A	; 122
    1470:	54 e4       	ldi	r21, 0x44	; 68
    1472:	c7 01       	movw	r24, r14
    1474:	b6 01       	movw	r22, r12
    1476:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
    147a:	20 e2       	ldi	r18, 0x20	; 32
    147c:	3c eb       	ldi	r19, 0xBC	; 188
    147e:	4e eb       	ldi	r20, 0xBE	; 190
    1480:	5c e4       	ldi	r21, 0x4C	; 76
    1482:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
    1486:	4b 01       	movw	r8, r22
    1488:	5c 01       	movw	r10, r24
    148a:	a3 01       	movw	r20, r6
    148c:	92 01       	movw	r18, r4
    148e:	c7 01       	movw	r24, r14
    1490:	b6 01       	movw	r22, r12
    1492:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__mulsf3>
    1496:	9b 01       	movw	r18, r22
    1498:	ac 01       	movw	r20, r24
    149a:	c5 01       	movw	r24, r10
    149c:	b4 01       	movw	r22, r8
    149e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
    14a2:	2a e0       	ldi	r18, 0x0A	; 10
    14a4:	37 ed       	ldi	r19, 0xD7	; 215
    14a6:	43 e2       	ldi	r20, 0x23	; 35
    14a8:	5c e3       	ldi	r21, 0x3C	; 60
    14aa:	0e 94 48 0b 	call	0x1690	; 0x1690 <__divsf3>
    14ae:	6b 01       	movw	r12, r22
    14b0:	7c 01       	movw	r14, r24
		
		//--------------------------------conveyor start------------------------------
		lcd_cmd(0x01);
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
		lcd_cmd(0x80);
    14b8:	80 e8       	ldi	r24, 0x80	; 128
    14ba:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
		lcd_msg("Machine started");
    14be:	87 e8       	ldi	r24, 0x87	; 135
    14c0:	91 e0       	ldi	r25, 0x01	; 1
    14c2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
		
		
		switchon();	//activate the relay switch to the AC motor
    14c6:	0e 94 f6 06 	call	0xdec	; 0xdec <switchon>
		
		//---------------------------------stepper push-------------------------------
	
		stprTrayPsh_init();	// initialize the stepper motors
    14ca:	0e 94 bc 05 	call	0xb78	; 0xb78 <stprTrayPsh_init>
		stprTrayPsh_clk(100);	// rotate the stepper motors to push the tray onto the conveyor
    14ce:	84 e6       	ldi	r24, 0x64	; 100
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <stprTrayPsh_clk>
		
		//--------------------------------Ir detector---------------------------------
		while(1){
			if (act_IR())		//if the IR function returns a true value the conveyor will stop
    14d6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <act_IR>
    14da:	89 2b       	or	r24, r25
    14dc:	e1 f3       	breq	.-8      	; 0x14d6 <main+0x156>
			{
				lcd_cmd(0x80);
    14de:	80 e8       	ldi	r24, 0x80	; 128
    14e0:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
				lcd_msg("Dactvt Conveyor");
    14e4:	87 e9       	ldi	r24, 0x97	; 151
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
				lcd_cmd(0xC0);
    14ec:	80 ec       	ldi	r24, 0xC0	; 192
    14ee:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
				switchoff();
    14f2:	0e 94 00 07 	call	0xe00	; 0xe00 <switchoff>
				break;
			}
		}
		
		//--------------------------------stepper pull--------------------------------
		stprTrayPsh_init();	// initialize the stepper motors
    14f6:	0e 94 bc 05 	call	0xb78	; 0xb78 <stprTrayPsh_init>
		stprTrayPsh_aclk(100);// rotate the stepper motors to pull the handle
    14fa:	84 e6       	ldi	r24, 0x64	; 100
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 03 06 	call	0xc06	; 0xc06 <stprTrayPsh_aclk>
		
		
		//----------------------------tray holder down (mixer)----------------------------
		
		stprMix_init(); //initiate the stepper motor
    1502:	0e 94 c3 05 	call	0xb86	; 0xb86 <stprMix_init>
		stprMix_clk(100);	// rotate the stepper motor to lower the mixer
    1506:	84 e6       	ldi	r24, 0x64	; 100
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <stprMix_clk>
		
		//----------------------------liquid pumps {flow sensor}--------------------------
	
		pump_w(); //function of the water pump
    150e:	0e 94 94 00 	call	0x128	; 0x128 <pump_w>
		pump_l(); //function of the latex pump
    1512:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <pump_l>
		pump_a(l1); //function of the acid pump
    1516:	c7 01       	movw	r24, r14
    1518:	b6 01       	movw	r22, r12
    151a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <__fixsfsi>
    151e:	cb 01       	movw	r24, r22
    1520:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <pump_a>
		
		//---------------------------------DC motor (Mixer)-------------------------------
		
		acvt_mixer();
    1524:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <acvt_mixer>
		
		//------------------------------tray holder up (mixer)----------------------------
		
		stprMix_init();//initiate the stepper motor
    1528:	0e 94 c3 05 	call	0xb86	; 0xb86 <stprMix_init>
		stprMix_aclk(100);// rotate the stepper motor to lower the mixer;
    152c:	84 e6       	ldi	r24, 0x64	; 100
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <stprMix_aclk>
		
		//------------------------------conveyor belt start-------------------------------
		
		switchon();
    1534:	0e 94 f6 06 	call	0xdec	; 0xdec <switchon>
		
		
		num_trays--; //reduce the number of trays by 1
    1538:	21 97       	sbiw	r28, 0x01	; 1
    153a:	2f e3       	ldi	r18, 0x3F	; 63
    153c:	82 e4       	ldi	r24, 0x42	; 66
    153e:	9f e0       	ldi	r25, 0x0F	; 15
    1540:	21 50       	subi	r18, 0x01	; 1
    1542:	80 40       	sbci	r24, 0x00	; 0
    1544:	90 40       	sbci	r25, 0x00	; 0
    1546:	e1 f7       	brne	.-8      	; 0x1540 <main+0x1c0>
    1548:	00 c0       	rjmp	.+0      	; 0x154a <main+0x1ca>
    154a:	00 00       	nop
		
		_delay_ms(5000);
		
		
		switchoff(); //deactivate the conveyor belt
    154c:	0e 94 00 07 	call	0xe00	; 0xe00 <switchoff>
    1550:	2f e7       	ldi	r18, 0x7F	; 127
    1552:	8a e1       	ldi	r24, 0x1A	; 26
    1554:	96 e0       	ldi	r25, 0x06	; 6
    1556:	21 50       	subi	r18, 0x01	; 1
    1558:	80 40       	sbci	r24, 0x00	; 0
    155a:	90 40       	sbci	r25, 0x00	; 0
    155c:	e1 f7       	brne	.-8      	; 0x1556 <main+0x1d6>
    155e:	00 c0       	rjmp	.+0      	; 0x1560 <main+0x1e0>
    1560:	00 00       	nop
		
		_delay_ms(2000);
		
		lcd_cmd(0x01);
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
		lcd_cmd(0x80);
    1568:	80 e8       	ldi	r24, 0x80	; 128
    156a:	0e 94 6b 07 	call	0xed6	; 0xed6 <lcd_cmd>
		lcd_msg("End of cycle");
    156e:	87 ea       	ldi	r24, 0xA7	; 167
    1570:	91 e0       	ldi	r25, 0x01	; 1
    1572:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <lcd_msg>
    1576:	2f e7       	ldi	r18, 0x7F	; 127
    1578:	8a e1       	ldi	r24, 0x1A	; 26
    157a:	96 e0       	ldi	r25, 0x06	; 6
    157c:	21 50       	subi	r18, 0x01	; 1
    157e:	80 40       	sbci	r24, 0x00	; 0
    1580:	90 40       	sbci	r25, 0x00	; 0
    1582:	e1 f7       	brne	.-8      	; 0x157c <main+0x1fc>
    1584:	00 c0       	rjmp	.+0      	; 0x1586 <main+0x206>
    1586:	00 00       	nop
	int num_trays = num_tray(); // get the user input for the number of trays to be processed
	int vol = tray_vol(); //get the user input for the volume of a tray
	initUS();
	
	//Main Program Loop
	while(num_trays>0){
    1588:	1c 16       	cp	r1, r28
    158a:	1d 06       	cpc	r1, r29
    158c:	0c f4       	brge	.+2      	; 0x1590 <main+0x210>
    158e:	1d cf       	rjmp	.-454    	; 0x13ca <main+0x4a>
		lcd_msg("End of cycle");
		
		_delay_ms(2000);
	}
	
}
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	ff 90       	pop	r15
    159e:	ef 90       	pop	r14
    15a0:	df 90       	pop	r13
    15a2:	cf 90       	pop	r12
    15a4:	bf 90       	pop	r11
    15a6:	af 90       	pop	r10
    15a8:	9f 90       	pop	r9
    15aa:	8f 90       	pop	r8
    15ac:	7f 90       	pop	r7
    15ae:	6f 90       	pop	r6
    15b0:	5f 90       	pop	r5
    15b2:	4f 90       	pop	r4
    15b4:	08 95       	ret

000015b6 <__subsf3>:
    15b6:	50 58       	subi	r21, 0x80	; 128

000015b8 <__addsf3>:
    15b8:	bb 27       	eor	r27, r27
    15ba:	aa 27       	eor	r26, r26
    15bc:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__addsf3x>
    15c0:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_round>
    15c4:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_pscA>
    15c8:	38 f0       	brcs	.+14     	; 0x15d8 <__addsf3+0x20>
    15ca:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fp_pscB>
    15ce:	20 f0       	brcs	.+8      	; 0x15d8 <__addsf3+0x20>
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <__addsf3+0x28>
    15d2:	9f 3f       	cpi	r25, 0xFF	; 255
    15d4:	19 f4       	brne	.+6      	; 0x15dc <__addsf3+0x24>
    15d6:	26 f4       	brtc	.+8      	; 0x15e0 <__addsf3+0x28>
    15d8:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__fp_nan>
    15dc:	0e f4       	brtc	.+2      	; 0x15e0 <__addsf3+0x28>
    15de:	e0 95       	com	r30
    15e0:	e7 fb       	bst	r30, 7
    15e2:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>

000015e6 <__addsf3x>:
    15e6:	e9 2f       	mov	r30, r25
    15e8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    15ec:	58 f3       	brcs	.-42     	; 0x15c4 <__addsf3+0xc>
    15ee:	ba 17       	cp	r27, r26
    15f0:	62 07       	cpc	r22, r18
    15f2:	73 07       	cpc	r23, r19
    15f4:	84 07       	cpc	r24, r20
    15f6:	95 07       	cpc	r25, r21
    15f8:	20 f0       	brcs	.+8      	; 0x1602 <__addsf3x+0x1c>
    15fa:	79 f4       	brne	.+30     	; 0x161a <__addsf3x+0x34>
    15fc:	a6 f5       	brtc	.+104    	; 0x1666 <__addsf3x+0x80>
    15fe:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_zero>
    1602:	0e f4       	brtc	.+2      	; 0x1606 <__addsf3x+0x20>
    1604:	e0 95       	com	r30
    1606:	0b 2e       	mov	r0, r27
    1608:	ba 2f       	mov	r27, r26
    160a:	a0 2d       	mov	r26, r0
    160c:	0b 01       	movw	r0, r22
    160e:	b9 01       	movw	r22, r18
    1610:	90 01       	movw	r18, r0
    1612:	0c 01       	movw	r0, r24
    1614:	ca 01       	movw	r24, r20
    1616:	a0 01       	movw	r20, r0
    1618:	11 24       	eor	r1, r1
    161a:	ff 27       	eor	r31, r31
    161c:	59 1b       	sub	r21, r25
    161e:	99 f0       	breq	.+38     	; 0x1646 <__addsf3x+0x60>
    1620:	59 3f       	cpi	r21, 0xF9	; 249
    1622:	50 f4       	brcc	.+20     	; 0x1638 <__addsf3x+0x52>
    1624:	50 3e       	cpi	r21, 0xE0	; 224
    1626:	68 f1       	brcs	.+90     	; 0x1682 <__addsf3x+0x9c>
    1628:	1a 16       	cp	r1, r26
    162a:	f0 40       	sbci	r31, 0x00	; 0
    162c:	a2 2f       	mov	r26, r18
    162e:	23 2f       	mov	r18, r19
    1630:	34 2f       	mov	r19, r20
    1632:	44 27       	eor	r20, r20
    1634:	58 5f       	subi	r21, 0xF8	; 248
    1636:	f3 cf       	rjmp	.-26     	; 0x161e <__addsf3x+0x38>
    1638:	46 95       	lsr	r20
    163a:	37 95       	ror	r19
    163c:	27 95       	ror	r18
    163e:	a7 95       	ror	r26
    1640:	f0 40       	sbci	r31, 0x00	; 0
    1642:	53 95       	inc	r21
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__addsf3x+0x52>
    1646:	7e f4       	brtc	.+30     	; 0x1666 <__addsf3x+0x80>
    1648:	1f 16       	cp	r1, r31
    164a:	ba 0b       	sbc	r27, r26
    164c:	62 0b       	sbc	r22, r18
    164e:	73 0b       	sbc	r23, r19
    1650:	84 0b       	sbc	r24, r20
    1652:	ba f0       	brmi	.+46     	; 0x1682 <__addsf3x+0x9c>
    1654:	91 50       	subi	r25, 0x01	; 1
    1656:	a1 f0       	breq	.+40     	; 0x1680 <__addsf3x+0x9a>
    1658:	ff 0f       	add	r31, r31
    165a:	bb 1f       	adc	r27, r27
    165c:	66 1f       	adc	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	c2 f7       	brpl	.-16     	; 0x1654 <__addsf3x+0x6e>
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <__addsf3x+0x9c>
    1666:	ba 0f       	add	r27, r26
    1668:	62 1f       	adc	r22, r18
    166a:	73 1f       	adc	r23, r19
    166c:	84 1f       	adc	r24, r20
    166e:	48 f4       	brcc	.+18     	; 0x1682 <__addsf3x+0x9c>
    1670:	87 95       	ror	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b7 95       	ror	r27
    1678:	f7 95       	ror	r31
    167a:	9e 3f       	cpi	r25, 0xFE	; 254
    167c:	08 f0       	brcs	.+2      	; 0x1680 <__addsf3x+0x9a>
    167e:	b0 cf       	rjmp	.-160    	; 0x15e0 <__addsf3+0x28>
    1680:	93 95       	inc	r25
    1682:	88 0f       	add	r24, r24
    1684:	08 f0       	brcs	.+2      	; 0x1688 <__addsf3x+0xa2>
    1686:	99 27       	eor	r25, r25
    1688:	ee 0f       	add	r30, r30
    168a:	97 95       	ror	r25
    168c:	87 95       	ror	r24
    168e:	08 95       	ret

00001690 <__divsf3>:
    1690:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <__divsf3x>
    1694:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_round>
    1698:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fp_pscB>
    169c:	58 f0       	brcs	.+22     	; 0x16b4 <__divsf3+0x24>
    169e:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_pscA>
    16a2:	40 f0       	brcs	.+16     	; 0x16b4 <__divsf3+0x24>
    16a4:	29 f4       	brne	.+10     	; 0x16b0 <__divsf3+0x20>
    16a6:	5f 3f       	cpi	r21, 0xFF	; 255
    16a8:	29 f0       	breq	.+10     	; 0x16b4 <__divsf3+0x24>
    16aa:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>
    16ae:	51 11       	cpse	r21, r1
    16b0:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    16b4:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__fp_nan>

000016b8 <__divsf3x>:
    16b8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    16bc:	68 f3       	brcs	.-38     	; 0x1698 <__divsf3+0x8>

000016be <__divsf3_pse>:
    16be:	99 23       	and	r25, r25
    16c0:	b1 f3       	breq	.-20     	; 0x16ae <__divsf3+0x1e>
    16c2:	55 23       	and	r21, r21
    16c4:	91 f3       	breq	.-28     	; 0x16aa <__divsf3+0x1a>
    16c6:	95 1b       	sub	r25, r21
    16c8:	55 0b       	sbc	r21, r21
    16ca:	bb 27       	eor	r27, r27
    16cc:	aa 27       	eor	r26, r26
    16ce:	62 17       	cp	r22, r18
    16d0:	73 07       	cpc	r23, r19
    16d2:	84 07       	cpc	r24, r20
    16d4:	38 f0       	brcs	.+14     	; 0x16e4 <__divsf3_pse+0x26>
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	5f 4f       	sbci	r21, 0xFF	; 255
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	44 1f       	adc	r20, r20
    16e0:	aa 1f       	adc	r26, r26
    16e2:	a9 f3       	breq	.-22     	; 0x16ce <__divsf3_pse+0x10>
    16e4:	35 d0       	rcall	.+106    	; 0x1750 <__divsf3_pse+0x92>
    16e6:	0e 2e       	mov	r0, r30
    16e8:	3a f0       	brmi	.+14     	; 0x16f8 <__divsf3_pse+0x3a>
    16ea:	e0 e8       	ldi	r30, 0x80	; 128
    16ec:	32 d0       	rcall	.+100    	; 0x1752 <__divsf3_pse+0x94>
    16ee:	91 50       	subi	r25, 0x01	; 1
    16f0:	50 40       	sbci	r21, 0x00	; 0
    16f2:	e6 95       	lsr	r30
    16f4:	00 1c       	adc	r0, r0
    16f6:	ca f7       	brpl	.-14     	; 0x16ea <__divsf3_pse+0x2c>
    16f8:	2b d0       	rcall	.+86     	; 0x1750 <__divsf3_pse+0x92>
    16fa:	fe 2f       	mov	r31, r30
    16fc:	29 d0       	rcall	.+82     	; 0x1750 <__divsf3_pse+0x92>
    16fe:	66 0f       	add	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	bb 1f       	adc	r27, r27
    1706:	26 17       	cp	r18, r22
    1708:	37 07       	cpc	r19, r23
    170a:	48 07       	cpc	r20, r24
    170c:	ab 07       	cpc	r26, r27
    170e:	b0 e8       	ldi	r27, 0x80	; 128
    1710:	09 f0       	breq	.+2      	; 0x1714 <__divsf3_pse+0x56>
    1712:	bb 0b       	sbc	r27, r27
    1714:	80 2d       	mov	r24, r0
    1716:	bf 01       	movw	r22, r30
    1718:	ff 27       	eor	r31, r31
    171a:	93 58       	subi	r25, 0x83	; 131
    171c:	5f 4f       	sbci	r21, 0xFF	; 255
    171e:	3a f0       	brmi	.+14     	; 0x172e <__divsf3_pse+0x70>
    1720:	9e 3f       	cpi	r25, 0xFE	; 254
    1722:	51 05       	cpc	r21, r1
    1724:	78 f0       	brcs	.+30     	; 0x1744 <__divsf3_pse+0x86>
    1726:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>
    172a:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    172e:	5f 3f       	cpi	r21, 0xFF	; 255
    1730:	e4 f3       	brlt	.-8      	; 0x172a <__divsf3_pse+0x6c>
    1732:	98 3e       	cpi	r25, 0xE8	; 232
    1734:	d4 f3       	brlt	.-12     	; 0x172a <__divsf3_pse+0x6c>
    1736:	86 95       	lsr	r24
    1738:	77 95       	ror	r23
    173a:	67 95       	ror	r22
    173c:	b7 95       	ror	r27
    173e:	f7 95       	ror	r31
    1740:	9f 5f       	subi	r25, 0xFF	; 255
    1742:	c9 f7       	brne	.-14     	; 0x1736 <__divsf3_pse+0x78>
    1744:	88 0f       	add	r24, r24
    1746:	91 1d       	adc	r25, r1
    1748:	96 95       	lsr	r25
    174a:	87 95       	ror	r24
    174c:	97 f9       	bld	r25, 7
    174e:	08 95       	ret
    1750:	e1 e0       	ldi	r30, 0x01	; 1
    1752:	66 0f       	add	r22, r22
    1754:	77 1f       	adc	r23, r23
    1756:	88 1f       	adc	r24, r24
    1758:	bb 1f       	adc	r27, r27
    175a:	62 17       	cp	r22, r18
    175c:	73 07       	cpc	r23, r19
    175e:	84 07       	cpc	r24, r20
    1760:	ba 07       	cpc	r27, r26
    1762:	20 f0       	brcs	.+8      	; 0x176c <__divsf3_pse+0xae>
    1764:	62 1b       	sub	r22, r18
    1766:	73 0b       	sbc	r23, r19
    1768:	84 0b       	sbc	r24, r20
    176a:	ba 0b       	sbc	r27, r26
    176c:	ee 1f       	adc	r30, r30
    176e:	88 f7       	brcc	.-30     	; 0x1752 <__divsf3_pse+0x94>
    1770:	e0 95       	com	r30
    1772:	08 95       	ret

00001774 <__fixsfsi>:
    1774:	0e 94 c1 0b 	call	0x1782	; 0x1782 <__fixunssfsi>
    1778:	68 94       	set
    177a:	b1 11       	cpse	r27, r1
    177c:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    1780:	08 95       	ret

00001782 <__fixunssfsi>:
    1782:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fp_splitA>
    1786:	88 f0       	brcs	.+34     	; 0x17aa <__fixunssfsi+0x28>
    1788:	9f 57       	subi	r25, 0x7F	; 127
    178a:	98 f0       	brcs	.+38     	; 0x17b2 <__fixunssfsi+0x30>
    178c:	b9 2f       	mov	r27, r25
    178e:	99 27       	eor	r25, r25
    1790:	b7 51       	subi	r27, 0x17	; 23
    1792:	b0 f0       	brcs	.+44     	; 0x17c0 <__fixunssfsi+0x3e>
    1794:	e1 f0       	breq	.+56     	; 0x17ce <__fixunssfsi+0x4c>
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	88 1f       	adc	r24, r24
    179c:	99 1f       	adc	r25, r25
    179e:	1a f0       	brmi	.+6      	; 0x17a6 <__fixunssfsi+0x24>
    17a0:	ba 95       	dec	r27
    17a2:	c9 f7       	brne	.-14     	; 0x1796 <__fixunssfsi+0x14>
    17a4:	14 c0       	rjmp	.+40     	; 0x17ce <__fixunssfsi+0x4c>
    17a6:	b1 30       	cpi	r27, 0x01	; 1
    17a8:	91 f0       	breq	.+36     	; 0x17ce <__fixunssfsi+0x4c>
    17aa:	0e 94 77 0c 	call	0x18ee	; 0x18ee <__fp_zero>
    17ae:	b1 e0       	ldi	r27, 0x01	; 1
    17b0:	08 95       	ret
    17b2:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__fp_zero>
    17b6:	67 2f       	mov	r22, r23
    17b8:	78 2f       	mov	r23, r24
    17ba:	88 27       	eor	r24, r24
    17bc:	b8 5f       	subi	r27, 0xF8	; 248
    17be:	39 f0       	breq	.+14     	; 0x17ce <__fixunssfsi+0x4c>
    17c0:	b9 3f       	cpi	r27, 0xF9	; 249
    17c2:	cc f3       	brlt	.-14     	; 0x17b6 <__fixunssfsi+0x34>
    17c4:	86 95       	lsr	r24
    17c6:	77 95       	ror	r23
    17c8:	67 95       	ror	r22
    17ca:	b3 95       	inc	r27
    17cc:	d9 f7       	brne	.-10     	; 0x17c4 <__fixunssfsi+0x42>
    17ce:	3e f4       	brtc	.+14     	; 0x17de <__fixunssfsi+0x5c>
    17d0:	90 95       	com	r25
    17d2:	80 95       	com	r24
    17d4:	70 95       	com	r23
    17d6:	61 95       	neg	r22
    17d8:	7f 4f       	sbci	r23, 0xFF	; 255
    17da:	8f 4f       	sbci	r24, 0xFF	; 255
    17dc:	9f 4f       	sbci	r25, 0xFF	; 255
    17de:	08 95       	ret

000017e0 <__floatunsisf>:
    17e0:	e8 94       	clt
    17e2:	09 c0       	rjmp	.+18     	; 0x17f6 <__floatsisf+0x12>

000017e4 <__floatsisf>:
    17e4:	97 fb       	bst	r25, 7
    17e6:	3e f4       	brtc	.+14     	; 0x17f6 <__floatsisf+0x12>
    17e8:	90 95       	com	r25
    17ea:	80 95       	com	r24
    17ec:	70 95       	com	r23
    17ee:	61 95       	neg	r22
    17f0:	7f 4f       	sbci	r23, 0xFF	; 255
    17f2:	8f 4f       	sbci	r24, 0xFF	; 255
    17f4:	9f 4f       	sbci	r25, 0xFF	; 255
    17f6:	99 23       	and	r25, r25
    17f8:	a9 f0       	breq	.+42     	; 0x1824 <__floatsisf+0x40>
    17fa:	f9 2f       	mov	r31, r25
    17fc:	96 e9       	ldi	r25, 0x96	; 150
    17fe:	bb 27       	eor	r27, r27
    1800:	93 95       	inc	r25
    1802:	f6 95       	lsr	r31
    1804:	87 95       	ror	r24
    1806:	77 95       	ror	r23
    1808:	67 95       	ror	r22
    180a:	b7 95       	ror	r27
    180c:	f1 11       	cpse	r31, r1
    180e:	f8 cf       	rjmp	.-16     	; 0x1800 <__floatsisf+0x1c>
    1810:	fa f4       	brpl	.+62     	; 0x1850 <__floatsisf+0x6c>
    1812:	bb 0f       	add	r27, r27
    1814:	11 f4       	brne	.+4      	; 0x181a <__floatsisf+0x36>
    1816:	60 ff       	sbrs	r22, 0
    1818:	1b c0       	rjmp	.+54     	; 0x1850 <__floatsisf+0x6c>
    181a:	6f 5f       	subi	r22, 0xFF	; 255
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	8f 4f       	sbci	r24, 0xFF	; 255
    1820:	9f 4f       	sbci	r25, 0xFF	; 255
    1822:	16 c0       	rjmp	.+44     	; 0x1850 <__floatsisf+0x6c>
    1824:	88 23       	and	r24, r24
    1826:	11 f0       	breq	.+4      	; 0x182c <__floatsisf+0x48>
    1828:	96 e9       	ldi	r25, 0x96	; 150
    182a:	11 c0       	rjmp	.+34     	; 0x184e <__floatsisf+0x6a>
    182c:	77 23       	and	r23, r23
    182e:	21 f0       	breq	.+8      	; 0x1838 <__floatsisf+0x54>
    1830:	9e e8       	ldi	r25, 0x8E	; 142
    1832:	87 2f       	mov	r24, r23
    1834:	76 2f       	mov	r23, r22
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <__floatsisf+0x5e>
    1838:	66 23       	and	r22, r22
    183a:	71 f0       	breq	.+28     	; 0x1858 <__floatsisf+0x74>
    183c:	96 e8       	ldi	r25, 0x86	; 134
    183e:	86 2f       	mov	r24, r22
    1840:	70 e0       	ldi	r23, 0x00	; 0
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	2a f0       	brmi	.+10     	; 0x1850 <__floatsisf+0x6c>
    1846:	9a 95       	dec	r25
    1848:	66 0f       	add	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	da f7       	brpl	.-10     	; 0x1846 <__floatsisf+0x62>
    1850:	88 0f       	add	r24, r24
    1852:	96 95       	lsr	r25
    1854:	87 95       	ror	r24
    1856:	97 f9       	bld	r25, 7
    1858:	08 95       	ret

0000185a <__fp_inf>:
    185a:	97 f9       	bld	r25, 7
    185c:	9f 67       	ori	r25, 0x7F	; 127
    185e:	80 e8       	ldi	r24, 0x80	; 128
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	08 95       	ret

00001866 <__fp_nan>:
    1866:	9f ef       	ldi	r25, 0xFF	; 255
    1868:	80 ec       	ldi	r24, 0xC0	; 192
    186a:	08 95       	ret

0000186c <__fp_pscA>:
    186c:	00 24       	eor	r0, r0
    186e:	0a 94       	dec	r0
    1870:	16 16       	cp	r1, r22
    1872:	17 06       	cpc	r1, r23
    1874:	18 06       	cpc	r1, r24
    1876:	09 06       	cpc	r0, r25
    1878:	08 95       	ret

0000187a <__fp_pscB>:
    187a:	00 24       	eor	r0, r0
    187c:	0a 94       	dec	r0
    187e:	12 16       	cp	r1, r18
    1880:	13 06       	cpc	r1, r19
    1882:	14 06       	cpc	r1, r20
    1884:	05 06       	cpc	r0, r21
    1886:	08 95       	ret

00001888 <__fp_round>:
    1888:	09 2e       	mov	r0, r25
    188a:	03 94       	inc	r0
    188c:	00 0c       	add	r0, r0
    188e:	11 f4       	brne	.+4      	; 0x1894 <__fp_round+0xc>
    1890:	88 23       	and	r24, r24
    1892:	52 f0       	brmi	.+20     	; 0x18a8 <__fp_round+0x20>
    1894:	bb 0f       	add	r27, r27
    1896:	40 f4       	brcc	.+16     	; 0x18a8 <__fp_round+0x20>
    1898:	bf 2b       	or	r27, r31
    189a:	11 f4       	brne	.+4      	; 0x18a0 <__fp_round+0x18>
    189c:	60 ff       	sbrs	r22, 0
    189e:	04 c0       	rjmp	.+8      	; 0x18a8 <__fp_round+0x20>
    18a0:	6f 5f       	subi	r22, 0xFF	; 255
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	08 95       	ret

000018aa <__fp_split3>:
    18aa:	57 fd       	sbrc	r21, 7
    18ac:	90 58       	subi	r25, 0x80	; 128
    18ae:	44 0f       	add	r20, r20
    18b0:	55 1f       	adc	r21, r21
    18b2:	59 f0       	breq	.+22     	; 0x18ca <__fp_splitA+0x10>
    18b4:	5f 3f       	cpi	r21, 0xFF	; 255
    18b6:	71 f0       	breq	.+28     	; 0x18d4 <__fp_splitA+0x1a>
    18b8:	47 95       	ror	r20

000018ba <__fp_splitA>:
    18ba:	88 0f       	add	r24, r24
    18bc:	97 fb       	bst	r25, 7
    18be:	99 1f       	adc	r25, r25
    18c0:	61 f0       	breq	.+24     	; 0x18da <__fp_splitA+0x20>
    18c2:	9f 3f       	cpi	r25, 0xFF	; 255
    18c4:	79 f0       	breq	.+30     	; 0x18e4 <__fp_splitA+0x2a>
    18c6:	87 95       	ror	r24
    18c8:	08 95       	ret
    18ca:	12 16       	cp	r1, r18
    18cc:	13 06       	cpc	r1, r19
    18ce:	14 06       	cpc	r1, r20
    18d0:	55 1f       	adc	r21, r21
    18d2:	f2 cf       	rjmp	.-28     	; 0x18b8 <__fp_split3+0xe>
    18d4:	46 95       	lsr	r20
    18d6:	f1 df       	rcall	.-30     	; 0x18ba <__fp_splitA>
    18d8:	08 c0       	rjmp	.+16     	; 0x18ea <__fp_splitA+0x30>
    18da:	16 16       	cp	r1, r22
    18dc:	17 06       	cpc	r1, r23
    18de:	18 06       	cpc	r1, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	f1 cf       	rjmp	.-30     	; 0x18c6 <__fp_splitA+0xc>
    18e4:	86 95       	lsr	r24
    18e6:	71 05       	cpc	r23, r1
    18e8:	61 05       	cpc	r22, r1
    18ea:	08 94       	sec
    18ec:	08 95       	ret

000018ee <__fp_zero>:
    18ee:	e8 94       	clt

000018f0 <__fp_szero>:
    18f0:	bb 27       	eor	r27, r27
    18f2:	66 27       	eor	r22, r22
    18f4:	77 27       	eor	r23, r23
    18f6:	cb 01       	movw	r24, r22
    18f8:	97 f9       	bld	r25, 7
    18fa:	08 95       	ret

000018fc <__gesf2>:
    18fc:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <__fp_cmp>
    1900:	08 f4       	brcc	.+2      	; 0x1904 <__gesf2+0x8>
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	08 95       	ret

00001906 <log10>:
    1906:	0e 94 93 0c 	call	0x1926	; 0x1926 <log>
    190a:	29 ed       	ldi	r18, 0xD9	; 217
    190c:	3b e5       	ldi	r19, 0x5B	; 91
    190e:	4e ed       	ldi	r20, 0xDE	; 222
    1910:	5e e3       	ldi	r21, 0x3E	; 62
    1912:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__mulsf3>
    1916:	16 f0       	brts	.+4      	; 0x191c <log10+0x16>
    1918:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__fp_mpack>
    191c:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__fp_nan>
    1920:	68 94       	set
    1922:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>

00001926 <log>:
    1926:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__fp_splitA>
    192a:	a8 f3       	brcs	.-22     	; 0x1916 <log10+0x10>
    192c:	99 23       	and	r25, r25
    192e:	c1 f3       	breq	.-16     	; 0x1920 <log10+0x1a>
    1930:	ae f3       	brts	.-22     	; 0x191c <log10+0x16>
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	1f 93       	push	r17
    1938:	0f 93       	push	r16
    193a:	ff 92       	push	r15
    193c:	c9 2f       	mov	r28, r25
    193e:	dd 27       	eor	r29, r29
    1940:	88 23       	and	r24, r24
    1942:	2a f0       	brmi	.+10     	; 0x194e <log+0x28>
    1944:	21 97       	sbiw	r28, 0x01	; 1
    1946:	66 0f       	add	r22, r22
    1948:	77 1f       	adc	r23, r23
    194a:	88 1f       	adc	r24, r24
    194c:	da f7       	brpl	.-10     	; 0x1944 <log+0x1e>
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f eb       	ldi	r21, 0xBF	; 191
    1956:	9f e3       	ldi	r25, 0x3F	; 63
    1958:	88 39       	cpi	r24, 0x98	; 152
    195a:	20 f0       	brcs	.+8      	; 0x1964 <log+0x3e>
    195c:	80 3e       	cpi	r24, 0xE0	; 224
    195e:	38 f0       	brcs	.+14     	; 0x196e <log+0x48>
    1960:	21 96       	adiw	r28, 0x01	; 1
    1962:	8f 77       	andi	r24, 0x7F	; 127
    1964:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
    1968:	e4 e5       	ldi	r30, 0x54	; 84
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	04 c0       	rjmp	.+8      	; 0x1976 <log+0x50>
    196e:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <__addsf3>
    1972:	e1 e8       	ldi	r30, 0x81	; 129
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <__fp_powser>
    197a:	8b 01       	movw	r16, r22
    197c:	be 01       	movw	r22, r28
    197e:	ec 01       	movw	r28, r24
    1980:	fb 2e       	mov	r15, r27
    1982:	6f 57       	subi	r22, 0x7F	; 127
    1984:	71 09       	sbc	r23, r1
    1986:	75 95       	asr	r23
    1988:	77 1f       	adc	r23, r23
    198a:	88 0b       	sbc	r24, r24
    198c:	99 0b       	sbc	r25, r25
    198e:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <__floatsisf>
    1992:	28 e1       	ldi	r18, 0x18	; 24
    1994:	32 e7       	ldi	r19, 0x72	; 114
    1996:	41 e3       	ldi	r20, 0x31	; 49
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__mulsf3x>
    199e:	af 2d       	mov	r26, r15
    19a0:	98 01       	movw	r18, r16
    19a2:	ae 01       	movw	r20, r28
    19a4:	ff 90       	pop	r15
    19a6:	0f 91       	pop	r16
    19a8:	1f 91       	pop	r17
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__addsf3x>
    19b2:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_round>

000019b6 <__mulsf3>:
    19b6:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__mulsf3x>
    19ba:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__fp_round>
    19be:	0e 94 36 0c 	call	0x186c	; 0x186c <__fp_pscA>
    19c2:	38 f0       	brcs	.+14     	; 0x19d2 <__mulsf3+0x1c>
    19c4:	0e 94 3d 0c 	call	0x187a	; 0x187a <__fp_pscB>
    19c8:	20 f0       	brcs	.+8      	; 0x19d2 <__mulsf3+0x1c>
    19ca:	95 23       	and	r25, r21
    19cc:	11 f0       	breq	.+4      	; 0x19d2 <__mulsf3+0x1c>
    19ce:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>
    19d2:	0c 94 33 0c 	jmp	0x1866	; 0x1866 <__fp_nan>
    19d6:	11 24       	eor	r1, r1
    19d8:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>

000019dc <__mulsf3x>:
    19dc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__fp_split3>
    19e0:	70 f3       	brcs	.-36     	; 0x19be <__mulsf3+0x8>

000019e2 <__mulsf3_pse>:
    19e2:	95 9f       	mul	r25, r21
    19e4:	c1 f3       	breq	.-16     	; 0x19d6 <__mulsf3+0x20>
    19e6:	95 0f       	add	r25, r21
    19e8:	50 e0       	ldi	r21, 0x00	; 0
    19ea:	55 1f       	adc	r21, r21
    19ec:	62 9f       	mul	r22, r18
    19ee:	f0 01       	movw	r30, r0
    19f0:	72 9f       	mul	r23, r18
    19f2:	bb 27       	eor	r27, r27
    19f4:	f0 0d       	add	r31, r0
    19f6:	b1 1d       	adc	r27, r1
    19f8:	63 9f       	mul	r22, r19
    19fa:	aa 27       	eor	r26, r26
    19fc:	f0 0d       	add	r31, r0
    19fe:	b1 1d       	adc	r27, r1
    1a00:	aa 1f       	adc	r26, r26
    1a02:	64 9f       	mul	r22, r20
    1a04:	66 27       	eor	r22, r22
    1a06:	b0 0d       	add	r27, r0
    1a08:	a1 1d       	adc	r26, r1
    1a0a:	66 1f       	adc	r22, r22
    1a0c:	82 9f       	mul	r24, r18
    1a0e:	22 27       	eor	r18, r18
    1a10:	b0 0d       	add	r27, r0
    1a12:	a1 1d       	adc	r26, r1
    1a14:	62 1f       	adc	r22, r18
    1a16:	73 9f       	mul	r23, r19
    1a18:	b0 0d       	add	r27, r0
    1a1a:	a1 1d       	adc	r26, r1
    1a1c:	62 1f       	adc	r22, r18
    1a1e:	83 9f       	mul	r24, r19
    1a20:	a0 0d       	add	r26, r0
    1a22:	61 1d       	adc	r22, r1
    1a24:	22 1f       	adc	r18, r18
    1a26:	74 9f       	mul	r23, r20
    1a28:	33 27       	eor	r19, r19
    1a2a:	a0 0d       	add	r26, r0
    1a2c:	61 1d       	adc	r22, r1
    1a2e:	23 1f       	adc	r18, r19
    1a30:	84 9f       	mul	r24, r20
    1a32:	60 0d       	add	r22, r0
    1a34:	21 1d       	adc	r18, r1
    1a36:	82 2f       	mov	r24, r18
    1a38:	76 2f       	mov	r23, r22
    1a3a:	6a 2f       	mov	r22, r26
    1a3c:	11 24       	eor	r1, r1
    1a3e:	9f 57       	subi	r25, 0x7F	; 127
    1a40:	50 40       	sbci	r21, 0x00	; 0
    1a42:	9a f0       	brmi	.+38     	; 0x1a6a <__mulsf3_pse+0x88>
    1a44:	f1 f0       	breq	.+60     	; 0x1a82 <__mulsf3_pse+0xa0>
    1a46:	88 23       	and	r24, r24
    1a48:	4a f0       	brmi	.+18     	; 0x1a5c <__mulsf3_pse+0x7a>
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	bb 1f       	adc	r27, r27
    1a50:	66 1f       	adc	r22, r22
    1a52:	77 1f       	adc	r23, r23
    1a54:	88 1f       	adc	r24, r24
    1a56:	91 50       	subi	r25, 0x01	; 1
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	a9 f7       	brne	.-22     	; 0x1a46 <__mulsf3_pse+0x64>
    1a5c:	9e 3f       	cpi	r25, 0xFE	; 254
    1a5e:	51 05       	cpc	r21, r1
    1a60:	80 f0       	brcs	.+32     	; 0x1a82 <__mulsf3_pse+0xa0>
    1a62:	0c 94 2d 0c 	jmp	0x185a	; 0x185a <__fp_inf>
    1a66:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__fp_szero>
    1a6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6c:	e4 f3       	brlt	.-8      	; 0x1a66 <__mulsf3_pse+0x84>
    1a6e:	98 3e       	cpi	r25, 0xE8	; 232
    1a70:	d4 f3       	brlt	.-12     	; 0x1a66 <__mulsf3_pse+0x84>
    1a72:	86 95       	lsr	r24
    1a74:	77 95       	ror	r23
    1a76:	67 95       	ror	r22
    1a78:	b7 95       	ror	r27
    1a7a:	f7 95       	ror	r31
    1a7c:	e7 95       	ror	r30
    1a7e:	9f 5f       	subi	r25, 0xFF	; 255
    1a80:	c1 f7       	brne	.-16     	; 0x1a72 <__mulsf3_pse+0x90>
    1a82:	fe 2b       	or	r31, r30
    1a84:	88 0f       	add	r24, r24
    1a86:	91 1d       	adc	r25, r1
    1a88:	96 95       	lsr	r25
    1a8a:	87 95       	ror	r24
    1a8c:	97 f9       	bld	r25, 7
    1a8e:	08 95       	ret

00001a90 <__fp_cmp>:
    1a90:	99 0f       	add	r25, r25
    1a92:	00 08       	sbc	r0, r0
    1a94:	55 0f       	add	r21, r21
    1a96:	aa 0b       	sbc	r26, r26
    1a98:	e0 e8       	ldi	r30, 0x80	; 128
    1a9a:	fe ef       	ldi	r31, 0xFE	; 254
    1a9c:	16 16       	cp	r1, r22
    1a9e:	17 06       	cpc	r1, r23
    1aa0:	e8 07       	cpc	r30, r24
    1aa2:	f9 07       	cpc	r31, r25
    1aa4:	c0 f0       	brcs	.+48     	; 0x1ad6 <__fp_cmp+0x46>
    1aa6:	12 16       	cp	r1, r18
    1aa8:	13 06       	cpc	r1, r19
    1aaa:	e4 07       	cpc	r30, r20
    1aac:	f5 07       	cpc	r31, r21
    1aae:	98 f0       	brcs	.+38     	; 0x1ad6 <__fp_cmp+0x46>
    1ab0:	62 1b       	sub	r22, r18
    1ab2:	73 0b       	sbc	r23, r19
    1ab4:	84 0b       	sbc	r24, r20
    1ab6:	95 0b       	sbc	r25, r21
    1ab8:	39 f4       	brne	.+14     	; 0x1ac8 <__fp_cmp+0x38>
    1aba:	0a 26       	eor	r0, r26
    1abc:	61 f0       	breq	.+24     	; 0x1ad6 <__fp_cmp+0x46>
    1abe:	23 2b       	or	r18, r19
    1ac0:	24 2b       	or	r18, r20
    1ac2:	25 2b       	or	r18, r21
    1ac4:	21 f4       	brne	.+8      	; 0x1ace <__fp_cmp+0x3e>
    1ac6:	08 95       	ret
    1ac8:	0a 26       	eor	r0, r26
    1aca:	09 f4       	brne	.+2      	; 0x1ace <__fp_cmp+0x3e>
    1acc:	a1 40       	sbci	r26, 0x01	; 1
    1ace:	a6 95       	lsr	r26
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	81 1d       	adc	r24, r1
    1ad4:	81 1d       	adc	r24, r1
    1ad6:	08 95       	ret

00001ad8 <__fp_mpack>:
    1ad8:	9f 3f       	cpi	r25, 0xFF	; 255
    1ada:	31 f0       	breq	.+12     	; 0x1ae8 <__fp_mpack_finite+0xc>

00001adc <__fp_mpack_finite>:
    1adc:	91 50       	subi	r25, 0x01	; 1
    1ade:	20 f4       	brcc	.+8      	; 0x1ae8 <__fp_mpack_finite+0xc>
    1ae0:	87 95       	ror	r24
    1ae2:	77 95       	ror	r23
    1ae4:	67 95       	ror	r22
    1ae6:	b7 95       	ror	r27
    1ae8:	88 0f       	add	r24, r24
    1aea:	91 1d       	adc	r25, r1
    1aec:	96 95       	lsr	r25
    1aee:	87 95       	ror	r24
    1af0:	97 f9       	bld	r25, 7
    1af2:	08 95       	ret

00001af4 <__fp_powser>:
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	1f 93       	push	r17
    1afa:	0f 93       	push	r16
    1afc:	ff 92       	push	r15
    1afe:	ef 92       	push	r14
    1b00:	df 92       	push	r13
    1b02:	7b 01       	movw	r14, r22
    1b04:	8c 01       	movw	r16, r24
    1b06:	68 94       	set
    1b08:	06 c0       	rjmp	.+12     	; 0x1b16 <__fp_powser+0x22>
    1b0a:	da 2e       	mov	r13, r26
    1b0c:	ef 01       	movw	r28, r30
    1b0e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__mulsf3x>
    1b12:	fe 01       	movw	r30, r28
    1b14:	e8 94       	clt
    1b16:	a5 91       	lpm	r26, Z+
    1b18:	25 91       	lpm	r18, Z+
    1b1a:	35 91       	lpm	r19, Z+
    1b1c:	45 91       	lpm	r20, Z+
    1b1e:	55 91       	lpm	r21, Z+
    1b20:	a6 f3       	brts	.-24     	; 0x1b0a <__fp_powser+0x16>
    1b22:	ef 01       	movw	r28, r30
    1b24:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <__addsf3x>
    1b28:	fe 01       	movw	r30, r28
    1b2a:	97 01       	movw	r18, r14
    1b2c:	a8 01       	movw	r20, r16
    1b2e:	da 94       	dec	r13
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <__fp_powser+0x18>
    1b32:	df 90       	pop	r13
    1b34:	ef 90       	pop	r14
    1b36:	ff 90       	pop	r15
    1b38:	0f 91       	pop	r16
    1b3a:	1f 91       	pop	r17
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <atoi>:
    1b42:	fc 01       	movw	r30, r24
    1b44:	88 27       	eor	r24, r24
    1b46:	99 27       	eor	r25, r25
    1b48:	e8 94       	clt
    1b4a:	21 91       	ld	r18, Z+
    1b4c:	20 32       	cpi	r18, 0x20	; 32
    1b4e:	e9 f3       	breq	.-6      	; 0x1b4a <atoi+0x8>
    1b50:	29 30       	cpi	r18, 0x09	; 9
    1b52:	10 f0       	brcs	.+4      	; 0x1b58 <atoi+0x16>
    1b54:	2e 30       	cpi	r18, 0x0E	; 14
    1b56:	c8 f3       	brcs	.-14     	; 0x1b4a <atoi+0x8>
    1b58:	2b 32       	cpi	r18, 0x2B	; 43
    1b5a:	41 f0       	breq	.+16     	; 0x1b6c <atoi+0x2a>
    1b5c:	2d 32       	cpi	r18, 0x2D	; 45
    1b5e:	39 f4       	brne	.+14     	; 0x1b6e <atoi+0x2c>
    1b60:	68 94       	set
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <atoi+0x2a>
    1b64:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <__mulhi_const_10>
    1b68:	82 0f       	add	r24, r18
    1b6a:	91 1d       	adc	r25, r1
    1b6c:	21 91       	ld	r18, Z+
    1b6e:	20 53       	subi	r18, 0x30	; 48
    1b70:	2a 30       	cpi	r18, 0x0A	; 10
    1b72:	c0 f3       	brcs	.-16     	; 0x1b64 <atoi+0x22>
    1b74:	1e f4       	brtc	.+6      	; 0x1b7c <atoi+0x3a>
    1b76:	90 95       	com	r25
    1b78:	81 95       	neg	r24
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	08 95       	ret

00001b7e <strcmp>:
    1b7e:	fb 01       	movw	r30, r22
    1b80:	dc 01       	movw	r26, r24
    1b82:	8d 91       	ld	r24, X+
    1b84:	01 90       	ld	r0, Z+
    1b86:	80 19       	sub	r24, r0
    1b88:	01 10       	cpse	r0, r1
    1b8a:	d9 f3       	breq	.-10     	; 0x1b82 <strcmp+0x4>
    1b8c:	99 0b       	sbc	r25, r25
    1b8e:	08 95       	ret

00001b90 <strcpy>:
    1b90:	fb 01       	movw	r30, r22
    1b92:	dc 01       	movw	r26, r24
    1b94:	01 90       	ld	r0, Z+
    1b96:	0d 92       	st	X+, r0
    1b98:	00 20       	and	r0, r0
    1b9a:	e1 f7       	brne	.-8      	; 0x1b94 <strcpy+0x4>
    1b9c:	08 95       	ret

00001b9e <__mulhi_const_10>:
    1b9e:	7a e0       	ldi	r23, 0x0A	; 10
    1ba0:	97 9f       	mul	r25, r23
    1ba2:	90 2d       	mov	r25, r0
    1ba4:	87 9f       	mul	r24, r23
    1ba6:	80 2d       	mov	r24, r0
    1ba8:	91 0d       	add	r25, r1
    1baa:	11 24       	eor	r1, r1
    1bac:	08 95       	ret

00001bae <_exit>:
    1bae:	f8 94       	cli

00001bb0 <__stop_program>:
    1bb0:	ff cf       	rjmp	.-2      	; 0x1bb0 <__stop_program>
